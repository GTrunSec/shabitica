Author: aszlig <aszlig@nix.build>
Date:   Tue Mar 27 05:37:11 2018 +0200

    Remove all external services from the code
    
    This is one of the bigger changes in our standalone version and this
    removes all the analytics, trackers, payment systems, social networking
    integration and others.
    
    The services that are removed are the following:
    
      * Amazon Payments
      * Amazon S3
      * Amplitude (users behavior analytics)
      * Apple Push Notifications
      * Apple iTunes Store
      * CloudKarafka (hosted Apache Kafka service)
      * External request to Google Fonts
      * Facebook share buttons
      * Facebook social authentication
      * Firebase Cloud Messaging
      * Google Analytics
      * Google Cloud Messaging
      * Google Docs links
      * Google In-App-Payments
      * Google Play Store
      * Google social authentication
      * Instagram links
      * Loggly log analysis
      * New Relic analytics
      * Paypal payments
      * Pusher (publish/subscribe)
      * Slack integration
      * StackImpact (external service for performance profiling)
      * Stripe payments
      * Tumblr share buttons
      * Twitter share buttons
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: remove-external-services.patch

diff --git a/config.json.example b/config.json.example
index 1073ead7c..63df05213 100644
--- a/config.json.example
+++ b/config.json.example
@@ -4,16 +4,6 @@
     "IP":"0.0.0.0",
     "WEB_CONCURRENCY":1,
     "BASE_URL":"http://localhost:3000",
-    "FACEBOOK_KEY":"123456789012345",
-    "FACEBOOK_SECRET":"aaaabbbbccccddddeeeeffff00001111",
-    "GOOGLE_CLIENT_ID":"123456789012345",
-    "GOOGLE_CLIENT_SECRET":"aaaabbbbccccddddeeeeffff00001111",
-    "PLAY_API": {
-      "CLIENT_ID": "aaaabbbbccccddddeeeeffff00001111",
-      "CLIENT_SECRET": "aaaabbbbccccddddeeeeffff00001111",
-      "ACCESS_TOKEN":"aaaabbbbccccddddeeeeffff00001111",
-      "REFRESH_TOKEN":"aaaabbbbccccddddeeeeffff00001111"
-    },
     "NODE_DB_URI":"mongodb://localhost/habitrpg",
     "TEST_DB_URI":"mongodb://localhost/habitrpg_test",
     "NODE_ENV":"development",
@@ -31,86 +21,20 @@
     "SMTP_HOST":"example.com",
     "SMTP_PORT": 587,
     "SMTP_TLS": true,
-    "STRIPE_API_KEY":"aaaabbbbccccddddeeeeffff00001111",
-    "STRIPE_PUB_KEY":"22223333444455556666777788889999",
-    "NEW_RELIC_LICENSE_KEY":"NEW_RELIC_LICENSE_KEY",
-    "NEW_RELIC_NO_CONFIG_FILE":"true",
-    "NEW_RELIC_APPLICATION_ID":"NEW_RELIC_APPLICATION_ID",
-    "NEW_RELIC_API_KEY":"NEW_RELIC_API_KEY",
-    "GA_ID": "GA_ID",
-    "AMPLITUDE_KEY": "AMPLITUDE_KEY",
-    "AMAZON_PAYMENTS": {
-        "SELLER_ID": "SELLER_ID",
-        "CLIENT_ID": "CLIENT_ID",
-        "MWS_KEY": "",
-        "MWS_SECRET": ""
-    },
     "FLAG_REPORT_EMAIL": "email@mod.com,email2@mod.com",
     "EMAIL_SERVER": {
         "url": "http://example.com",
         "authUser": "user",
         "authPassword": "password"
     },
-    "S3":{
-        "bucket":"bucket",
-        "accessKeyId":"accessKeyId",
-        "secretAccessKey":"secretAccessKey"
-    },
-    "SLACK_URL": "https://hooks.slack.com/services/some-url",
-    "TRANSIFEX_SLACK_CHANNEL": "transifex",
-    "PAYPAL":{
-        "billing_plans": {
-            "basic_earned":"basic_earned",
-            "basic_3mo":"basic_3mo",
-            "basic_6mo":"basic_6mo",
-            "google_6mo":"google_6mo",
-            "basic_12mo":"basic_12mo"
-        },
-        "mode":"sandbox",
-        "client_id":"client_id",
-        "client_secret":"client_secret",
-        "experience_profile_id": ""
-    },
-    "IAP_GOOGLE_KEYDIR": "/path/to/google/public/key/dir/",
-    "LOGGLY_TOKEN": "token",
-    "LOGGLY_CLIENT_TOKEN": "token",
-    "LOGGLY_ACCOUNT": "account",
-    "PUSH_CONFIGS": {
-        "GCM_SERVER_API_KEY": "",
-        "APN_ENABLED": "false",
-        "FCM_SERVER_API_KEY": ""
-    },
     "SITE_HTTP_AUTH": {
         "ENABLED": "false",
         "USERNAME": "admin",
         "PASSWORD": "password"
     },
-    "PUSHER": {
-        "ENABLED": "false",
-        "APP_ID": "appId",
-        "KEY": "key",
-        "SECRET": "secret"
-    },
-    "SLACK": {
-        "FLAGGING_URL": "https://hooks.slack.com/services/id/id/id",
-        "FLAGGING_FOOTER_LINK": "https://habitrpg.github.io/flag-o-rama/",
-        "SUBSCRIPTIONS_URL": "https://hooks.slack.com/services/id/id/id"
-    },
-    "ITUNES_SHARED_SECRET": "aaaabbbbccccddddeeeeffff00001111",
     "EMAILS" : {
         "COMMUNITY_MANAGER_EMAIL" : "admin@habitica.com",
         "TECH_ASSISTANCE_EMAIL" : "admin@habitica.com",
         "PRESS_ENQUIRY_EMAIL" : "admin@habitica.com"
-    },
-    "LOGGLY" : {
-        "TOKEN" : "example-token",
-        "SUBDOMAIN" : "exmaple-subdomain"
-    },
-    "KAFKA": {
-      "GROUP_ID": "",
-      "CLOUDKARAFKA_BROKERS": "",
-      "CLOUDKARAFKA_USERNAME": "",
-      "CLOUDKARAFKA_PASSWORD": "",
-      "CLOUDKARAFKA_TOPIC_PREFIX": ""
     }
 }
diff --git a/test/api/v3/integration/chat/POST-chat.test.js b/test/api/v3/integration/chat/POST-chat.test.js
index 194008bb4..8388d835b 100644
--- a/test/api/v3/integration/chat/POST-chat.test.js
+++ b/test/api/v3/integration/chat/POST-chat.test.js
@@ -15,10 +15,6 @@ import { getMatchesByWordArray } from '../../../../../website/server/libs/string
 import bannedWords from '../../../../../website/server/libs/bannedWords';
 import guildsAllowingBannedWords from '../../../../../website/server/libs/guildsAllowingBannedWords';
 import * as email from '../../../../../website/server/libs/email';
-import { IncomingWebhook } from '@slack/client';
-import nconf from 'nconf';
-
-const BASE_URL = nconf.get('BASE_URL');
 
 describe('POST /chat', () => {
   let user, groupWithChat, member, additionalMember;
@@ -228,7 +224,6 @@ describe('POST /chat', () => {
   context('banned slur', () => {
     beforeEach(() => {
       sandbox.spy(email, 'sendTxn');
-      sandbox.stub(IncomingWebhook.prototype, 'send');
     });
 
     afterEach(() => {
@@ -247,26 +242,6 @@ describe('POST /chat', () => {
       expect(email.sendTxn).to.be.calledOnce;
       expect(email.sendTxn.args[0][1]).to.eql('slur-report-to-mods');
 
-      // Slack message to mods
-      expect(IncomingWebhook.prototype.send).to.be.calledOnce;
-      /* eslint-disable camelcase */
-      expect(IncomingWebhook.prototype.send).to.be.calledWith({
-        text: `${user.profile.name} (${user.id}) tried to post a slur`,
-        attachments: [{
-          fallback: 'Slur Message',
-          color: 'danger',
-          author_name: `${user.profile.name} - ${user.auth.local.email} - ${user._id}`,
-          title: 'Slur in Test Guild',
-          title_link: `${BASE_URL}/groups/guild/${groupWithChat.id}`,
-          text: testSlurMessage,
-          // footer: sandbox.match(/<.*?groupId=group-id&chatId=chat-id\|Flag this message>/),
-          mrkdwn_in: [
-            'text',
-          ],
-        }],
-      });
-      /* eslint-enable camelcase */
-
       // Chat privileges are revoked
       await expect(user.post(`/groups/${groupWithChat._id}/chat`, { message: testMessage})).to.eventually.be.rejected.and.eql({
         code: 401,
@@ -300,26 +275,6 @@ describe('POST /chat', () => {
       expect(email.sendTxn).to.be.calledThrice;
       expect(email.sendTxn.args[2][1]).to.eql('slur-report-to-mods');
 
-      // Slack message to mods
-      expect(IncomingWebhook.prototype.send).to.be.calledOnce;
-      /* eslint-disable camelcase */
-      expect(IncomingWebhook.prototype.send).to.be.calledWith({
-        text: `${members[0].profile.name} (${members[0].id}) tried to post a slur`,
-        attachments: [{
-          fallback: 'Slur Message',
-          color: 'danger',
-          author_name: `${members[0].profile.name} - ${members[0].auth.local.email} - ${members[0]._id}`,
-          title: 'Slur in Party - (private party)',
-          title_link: undefined,
-          text: testSlurMessage,
-          // footer: sandbox.match(/<.*?groupId=group-id&chatId=chat-id\|Flag this message>/),
-          mrkdwn_in: [
-            'text',
-          ],
-        }],
-      });
-      /* eslint-enable camelcase */
-
       // Chat privileges are revoked
       await expect(members[0].post(`/groups/${groupWithChat._id}/chat`, { message: testMessage})).to.eventually.be.rejected.and.eql({
         code: 401,
diff --git a/test/api/v3/integration/user/DELETE-user.test.js b/test/api/v3/integration/user/DELETE-user.test.js
index ea9b79f92..a5fc40cfe 100644
--- a/test/api/v3/integration/user/DELETE-user.test.js
+++ b/test/api/v3/integration/user/DELETE-user.test.js
@@ -17,8 +17,6 @@ import {
 } from '../../../../../website/server/libs/password';
 import * as email from '../../../../../website/server/libs/email';
 
-const DELETE_CONFIRMATION = 'DELETE';
-
 describe('DELETE /user', () => {
   let user;
   let password = 'password'; // from habitrpg/test/helpers/api-integration/v3/object-generators.js
@@ -289,62 +287,4 @@ describe('DELETE /user', () => {
       });
     });
   });
-
-  context('user with Facebook auth', async () => {
-    beforeEach(async () => {
-      user = await generateUser({
-        auth: {
-          facebook: {
-            id: 'facebook-id',
-          },
-        },
-      });
-    });
-
-    it('returns an error if confirmation phrase is wrong', async () => {
-      await expect(user.del('/user', {
-        password: 'just-do-it',
-      })).to.eventually.be.rejected.and.eql({
-        code: 401,
-        error: 'NotAuthorized',
-        message: t('incorrectDeletePhrase', {magicWord: 'DELETE'}),
-      });
-    });
-
-    it('returns an error if confirmation phrase is not supplied', async () => {
-      await expect(user.del('/user', {
-        password: '',
-      })).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: t('missingPassword'),
-      });
-    });
-
-    it('deletes a Facebook user', async () => {
-      await user.del('/user', {
-        password: DELETE_CONFIRMATION,
-      });
-      await expect(checkExistence('users', user._id)).to.eventually.eql(false);
-    });
-  });
-
-  context('user with Google auth', async () => {
-    beforeEach(async () => {
-      user = await generateUser({
-        auth: {
-          google: {
-            id: 'google-id',
-          },
-        },
-      });
-    });
-
-    it('deletes a Google user', async () => {
-      await user.del('/user', {
-        password: DELETE_CONFIRMATION,
-      });
-      await expect(checkExistence('users', user._id)).to.eventually.eql(false);
-    });
-  });
 });
diff --git a/test/api/v3/integration/user/POST-user_sleep.test.js b/test/api/v3/integration/user/POST-user_sleep.test.js
index 292b77e9d..0e9773150 100644
--- a/test/api/v3/integration/user/POST-user_sleep.test.js
+++ b/test/api/v3/integration/user/POST-user_sleep.test.js
@@ -1,7 +1,6 @@
 import {
   generateUser,
 } from '../../../../helpers/api-integration/v3';
-import { mockAnalyticsService as analytics } from '../../../../../website/server/libs/analyticsService';
 
 describe('POST /user/sleep', () => {
   let user;
@@ -23,15 +22,4 @@ describe('POST /user/sleep', () => {
     await user.sync();
     expect(user.preferences.sleep).to.be.false;
   });
-
-  it('sends sleep status to analytics service', async () => {
-    sandbox.spy(analytics, 'track');
-
-    await user.post('/user/sleep');
-    await user.sync();
-    expect(analytics.track).to.be.calledOnce;
-    expect(analytics.track).to.be.calledWith('sleep', sandbox.match.has('status', user.preferences.sleep));
-
-    sandbox.restore();
-  });
 });
diff --git a/test/api/v3/integration/user/auth/POST-register_local.test.js b/test/api/v3/integration/user/auth/POST-register_local.test.js
index 643ef3d9c..6bc46c2d5 100644
--- a/test/api/v3/integration/user/auth/POST-register_local.test.js
+++ b/test/api/v3/integration/user/auth/POST-register_local.test.js
@@ -423,40 +423,6 @@ describe('POST /user/auth/local/register', () => {
     });
   });
 
-  context('attach to facebook user', () => {
-    let user;
-    let email = 'some@email.net';
-    let username = 'some-username';
-    let password = 'some-password';
-    beforeEach(async () => {
-      user = await generateUser();
-    });
-    it('checks onlySocialAttachLocal', async () => {
-      await expect(user.post('/user/auth/local/register', {
-        email,
-        username,
-        password,
-        confirmPassword: password,
-      })).to.eventually.be.rejected.and.eql({
-        code: 401,
-        error: 'NotAuthorized',
-        message: t('onlySocialAttachLocal'),
-      });
-    });
-    it('succeeds', async () => {
-      await user.update({ 'auth.facebook.id': 'some-fb-id', 'auth.local': { ok: true } });
-      await user.post('/user/auth/local/register', {
-        username,
-        email,
-        password,
-        confirmPassword: password,
-      });
-      await user.sync();
-      expect(user.auth.local.username).to.eql(username);
-      expect(user.auth.local.email).to.eql(email);
-    });
-  });
-
   context('login is already taken', () => {
     let username, email, api;
 
diff --git a/test/api/v3/unit/libs/cron.test.js b/test/api/v3/unit/libs/cron.test.js
index 30149a1f6..08ccd55b9 100644
--- a/test/api/v3/unit/libs/cron.test.js
+++ b/test/api/v3/unit/libs/cron.test.js
@@ -6,7 +6,6 @@ import { recoverCron, cron } from '../../../../../website/server/libs/cron';
 import { model as User } from '../../../../../website/server/models/user';
 import * as Tasks from '../../../../../website/server/models/task';
 import common from '../../../../../website/common';
-import analytics from '../../../../../website/server/libs/analyticsService';
 
 // const scoreTask = common.ops.scoreTask;
 
@@ -29,39 +28,28 @@ describe('cron', () => {
         },
       },
     });
-
-    sinon.spy(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   it('updates user.preferences.timezoneOffsetAtLastCron', () => {
     let timezoneOffsetFromUserPrefs = 1;
 
-    cron({user, tasksByType, daysMissed, analytics, timezoneOffsetFromUserPrefs});
+    cron({user, tasksByType, daysMissed, timezoneOffsetFromUserPrefs});
 
     expect(user.preferences.timezoneOffsetAtLastCron).to.equal(timezoneOffsetFromUserPrefs);
   });
 
   it('resets user.items.lastDrop.count', () => {
     user.items.lastDrop.count = 4;
-    cron({user, tasksByType, daysMissed, analytics});
+    cron({user, tasksByType, daysMissed});
     expect(user.items.lastDrop.count).to.equal(0);
   });
 
   it('increments user cron count', () => {
     let cronCountBefore = user.flags.cronCount;
-    cron({user, tasksByType, daysMissed, analytics});
+    cron({user, tasksByType, daysMissed});
     expect(user.flags.cronCount).to.be.greaterThan(cronCountBefore);
   });
 
-  it('calls analytics', () => {
-    cron({user, tasksByType, daysMissed, analytics});
-    expect(analytics.track.callCount).to.equal(1);
-  });
-
   describe('end of the month perks', () => {
     beforeEach(() => {
       user.purchased.plan.customerId = 'subscribedId';
@@ -70,14 +58,14 @@ describe('cron', () => {
 
     it('resets plan.gemsBought on a new month', () => {
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(0);
     });
 
     it('resets plan.gemsBought on a new month if user does not have purchased.plan.dateUpdated', () => {
       user.purchased.plan.gemsBought = 10;
       user.purchased.plan.dateUpdated = undefined;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(0);
     });
 
@@ -86,7 +74,7 @@ describe('cron', () => {
       user.purchased.plan.dateUpdated = moment().startOf('month').toDate();
 
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(10);
 
       clock.restore();
@@ -94,26 +82,26 @@ describe('cron', () => {
 
     it('resets plan.dateUpdated on a new month', () => {
       let currentMonth = moment().startOf('month');
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(moment(user.purchased.plan.dateUpdated).startOf('month').isSame(currentMonth)).to.eql(true);
     });
 
     it('increments plan.consecutive.count', () => {
       user.purchased.plan.consecutive.count = 0;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.count).to.equal(1);
     });
 
     it('increments plan.consecutive.count by more than 1 if user skipped months between logins', () => {
       user.purchased.plan.dateUpdated = moment().subtract(2, 'months').toDate();
       user.purchased.plan.consecutive.count = 0;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.count).to.equal(2);
     });
 
     it('decrements plan.consecutive.offset when offset is greater than 0', () => {
       user.purchased.plan.consecutive.offset = 2;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.offset).to.equal(1);
     });
 
@@ -123,7 +111,7 @@ describe('cron', () => {
       user.purchased.plan.consecutive.count = 5;
       user.purchased.plan.consecutive.trinkets = 1;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.purchased.plan.consecutive.trinkets).to.equal(1);
     });
@@ -131,13 +119,13 @@ describe('cron', () => {
     it('does not increment plan.consecutive.gemCapExtra when user has reached the gemCap limit', () => {
       user.purchased.plan.consecutive.gemCapExtra = 25;
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(25);
     });
 
     it('does not reset plan stats if we are before the last day of the cancelled month', () => {
       user.purchased.plan.dateTerminated = moment(new Date()).add({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.customerId).to.exist;
     });
 
@@ -147,7 +135,7 @@ describe('cron', () => {
       user.purchased.plan.consecutive.count = 5;
       user.purchased.plan.consecutive.offset = 1;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.purchased.plan.customerId).to.not.exist;
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(0);
@@ -182,7 +170,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(1);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(0);
@@ -194,7 +182,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(2);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(0);
@@ -206,7 +194,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(3);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -218,7 +206,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(4, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(4);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -228,7 +216,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(10, 'months').add(2, 'days').toDate());
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(10);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(3);
@@ -261,7 +249,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the first paid period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(1);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -271,7 +259,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the middle of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(2);
         expect(user3.purchased.plan.consecutive.offset).to.equal(1);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -281,7 +269,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(3);
         expect(user3.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -291,7 +279,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the second paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(4, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(4);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -301,7 +289,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the second month of the second period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(5, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(5);
         expect(user3.purchased.plan.consecutive.offset).to.equal(1);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -311,7 +299,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the second period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(6, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(6);
         expect(user3.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -321,7 +309,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the third paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(7, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(7);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(3);
@@ -331,7 +319,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(10, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(10);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -364,7 +352,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the first paid period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(1);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -374,7 +362,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(6, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(6);
         expect(user6.purchased.plan.consecutive.offset).to.equal(0);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -384,7 +372,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the second paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(7, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(7);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -394,7 +382,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the third paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(13, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(13);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(6);
@@ -404,7 +392,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(19, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(19);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(8);
@@ -438,7 +426,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the first paid period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(1);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -448,7 +436,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(12, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(12);
         expect(user12.purchased.plan.consecutive.offset).to.equal(0);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -458,7 +446,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the second paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(13, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(13);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(8);
@@ -468,7 +456,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the third paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(25, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(25);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(12);
@@ -478,7 +466,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(37, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(37);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(16);
@@ -512,7 +500,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the gift subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(1);
         expect(user3g.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -522,7 +510,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the second month of the gift subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(2);
         expect(user3g.purchased.plan.consecutive.offset).to.equal(1);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -532,7 +520,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the third month of the gift subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(3);
         expect(user3g.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -542,7 +530,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the month after the gift subscription has ended', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(4, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(0); // subscription has been erased by now
         expect(user3g.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -575,7 +563,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits in the first month since the fix for #4819 goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(9);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(5);
@@ -585,7 +573,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the second month after the fix goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(10);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(4);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(5);
@@ -595,7 +583,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the third month after the fix goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(11);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(3);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(5);
@@ -605,7 +593,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits in the seventh month after the fix goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(7, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(15);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(7);
@@ -622,7 +610,7 @@ describe('cron', () => {
 
     it('resets plan.gemsBought on a new month', () => {
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(0);
     });
 
@@ -631,51 +619,51 @@ describe('cron', () => {
       user.purchased.plan.dateUpdated = moment().startOf('month').toDate();
 
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(10);
 
       clock.restore();
     });
 
     it('does not reset plan.dateUpdated on a new month', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.dateUpdated).to.be.empty;
     });
 
     it('does not increment plan.consecutive.count', () => {
       user.purchased.plan.consecutive.count = 0;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.count).to.equal(0);
     });
 
     it('does not decrement plan.consecutive.offset when offset is greater than 0', () => {
       user.purchased.plan.consecutive.offset = 1;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.offset).to.equal(1);
     });
 
     it('does not increment plan.consecutive.trinkets when user has reached a month that is a multiple of 3', () => {
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.trinkets).to.equal(0);
     });
 
     it('does not increment plan.consecutive.gemCapExtra when user has reached a month that is a multiple of 3', () => {
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(0);
     });
 
     it('does not increment plan.consecutive.gemCapExtra when user has reached the gemCap limit', () => {
       user.purchased.plan.consecutive.gemCapExtra = 25;
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(25);
     });
 
     it('does nothing to plan stats if we are before the last day of the cancelled month', () => {
       user.purchased.plan.dateTerminated = moment(new Date()).add({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.customerId).to.not.exist;
     });
 
@@ -685,7 +673,7 @@ describe('cron', () => {
       user.purchased.plan.consecutive.count = 5;
       user.purchased.plan.consecutive.offset = 1;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.purchased.plan.customerId).to.exist;
       expect(user.purchased.plan.consecutive.gemCapExtra).to.exist;
@@ -699,11 +687,6 @@ describe('cron', () => {
       user.preferences.sleep = true;
     });
 
-    it('calls analytics', () => {
-      cron({user, tasksByType, daysMissed, analytics});
-      expect(analytics.track.callCount).to.equal(1);
-    });
-
     it('clears user buffs', () => {
       user.stats.buffs = {
         str: 1,
@@ -714,7 +697,7 @@ describe('cron', () => {
         streaks: true,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.equal(0);
       expect(user.stats.buffs.int).to.equal(0);
@@ -739,7 +722,7 @@ describe('cron', () => {
 
       let healthBefore = user.stats.hp;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.dailys[0].completed).to.be.false;
       expect(user.stats.hp).to.equal(healthBefore);
@@ -758,7 +741,7 @@ describe('cron', () => {
       tasksByType.dailys.push(task);
       tasksByType.dailys[0].completed = true;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.dailys[0].isDue).to.be.exist;
     });
@@ -778,14 +761,14 @@ describe('cron', () => {
 
     it('should make uncompleted todos redder', () => {
       let valueBefore = tasksByType.todos[0].value;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.todos[0].value).to.be.lessThan(valueBefore);
     });
 
     it('should add history of completed todos to user history', () => {
       tasksByType.todos[0].completed = true;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.history.todos).to.be.lengthOf(1);
     });
@@ -814,7 +797,7 @@ describe('cron', () => {
       expect(tasksByType.todos).to.be.lengthOf(2);
       expect(user.tasksOrder.todos).to.be.lengthOf(3);
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       // user.tasksOrder.todos should be filtered while tasks by type remains unchanged
       expect(tasksByType.todos).to.be.lengthOf(2);
@@ -843,7 +826,7 @@ describe('cron', () => {
       }).reverse();
       let original = user.tasksOrder.todos; // Preserve the original order
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       let listsAreEqual = true;
       user.tasksOrder.todos.forEach((taskId, index) => {
@@ -881,7 +864,7 @@ describe('cron', () => {
       tasksByType.dailys[0].frequency = 'daily';
       tasksByType.dailys[0].everyX = 5;
       tasksByType.dailys[0].startDate = moment().add(1, 'days').toDate();
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].isDue).to.be.false;
     });
 
@@ -889,25 +872,25 @@ describe('cron', () => {
       tasksByType.dailys[0].frequency = 'daily';
       tasksByType.dailys[0].everyX = 5;
       tasksByType.dailys[0].startDate = moment().add(1, 'days').toDate();
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].nextDue.length).to.eql(6);
     });
 
     it('should add history', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].history).to.be.lengthOf(1);
     });
 
     it('should set tasks completed to false', () => {
       tasksByType.dailys[0].completed = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].completed).to.be.false;
     });
 
     it('should reset task checklist for completed dailys', () => {
       tasksByType.dailys[0].checklist.push({title: 'test', completed: false});
       tasksByType.dailys[0].completed = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].checklist[0].completed).to.be.false;
     });
 
@@ -915,7 +898,7 @@ describe('cron', () => {
       daysMissed = 10;
       tasksByType.dailys[0].checklist.push({title: 'test', completed: false});
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].checklist[0].completed).to.be.false;
     });
 
@@ -924,7 +907,7 @@ describe('cron', () => {
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.hp).to.be.lessThan(hpBefore);
     });
@@ -937,7 +920,7 @@ describe('cron', () => {
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cronOverride({user, tasksByType, daysMissed, analytics});
+      cronOverride({user, tasksByType, daysMissed});
 
       expect(user.stats.hp).to.equal(hpBefore);
     });
@@ -948,7 +931,7 @@ describe('cron', () => {
       user.stats.buffs.stealth = 2;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.hp).to.equal(hpBefore);
     });
@@ -957,13 +940,13 @@ describe('cron', () => {
       daysMissed = 1;
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       let hpDifferenceOfFullyIncompleteDaily = hpBefore - user.stats.hp;
 
       hpBefore = user.stats.hp;
       tasksByType.dailys[0].checklist.push({title: 'test', completed: true});
       tasksByType.dailys[0].checklist.push({title: 'test2', completed: false});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       let hpDifferenceOfPartiallyIncompleteDaily = hpBefore - user.stats.hp;
 
       expect(hpDifferenceOfPartiallyIncompleteDaily).to.be.lessThan(hpDifferenceOfFullyIncompleteDaily);
@@ -973,7 +956,7 @@ describe('cron', () => {
       daysMissed = 1;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      let progress = cron({user, tasksByType, daysMissed, analytics});
+      let progress = cron({user, tasksByType, daysMissed});
 
       expect(progress.down).to.equal(-1);
     });
@@ -992,7 +975,7 @@ describe('cron', () => {
       tasksByType.dailys[1].everyX = 2;
       tasksByType.dailys[1].frequency = 'daily';
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.hp).to.equal(48);
     });
@@ -1014,7 +997,7 @@ describe('cron', () => {
       tasksByType.habits[0].value = 1;
       tasksByType.habits[0].down = false;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.habits[0].value).to.be.lessThan(1);
     });
@@ -1023,7 +1006,7 @@ describe('cron', () => {
       tasksByType.habits[0].value = 1;
       tasksByType.habits[0].up = false;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.habits[0].value).to.be.lessThan(1);
     });
@@ -1033,7 +1016,7 @@ describe('cron', () => {
       tasksByType.habits[0].up = true;
       tasksByType.habits[0].down = true;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.habits[0].value).to.equal(1);
     });
@@ -1054,7 +1037,7 @@ describe('cron', () => {
         tasksByType.habits[0].counterUp = 1;
         tasksByType.habits[0].counterDown = 1;
 
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1065,7 +1048,7 @@ describe('cron', () => {
         tasksByType.habits[0].counterUp = 1;
         tasksByType.habits[0].counterDown = 1;
 
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1077,14 +1060,14 @@ describe('cron', () => {
         tasksByType.habits[0].counterDown = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
 
         // should reset
         daysMissed = 8;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1106,7 +1089,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1118,7 +1101,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(monday);
 
         // should reset after user CDS
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1140,7 +1123,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1148,7 +1131,7 @@ describe('cron', () => {
         // User missed one cron, which will subtract User clock back to Monday 1am UTC + 2
         // should reset
         daysMissed = 2;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1170,7 +1153,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1192,7 +1175,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1204,14 +1187,14 @@ describe('cron', () => {
         tasksByType.habits[0].counterDown = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
 
         // should reset
         daysMissed = 32;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1234,7 +1217,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1256,7 +1239,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1264,7 +1247,7 @@ describe('cron', () => {
         // User missed one day, which will subtract User clock back to 5/1/17 2am UTC + 3
         // should reset
         daysMissed = 2;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1295,7 +1278,7 @@ describe('cron', () => {
     it('stores a new entry in user.history.exp', () => {
       user.stats.lvl = 2;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.history.exp).to.have.lengthOf(1);
       expect(user.history.exp[0].value).to.equal(150);
@@ -1306,7 +1289,7 @@ describe('cron', () => {
       tasksByType.dailys[0].completed = true;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.achievements.perfect).to.equal(1);
     });
@@ -1316,7 +1299,7 @@ describe('cron', () => {
       tasksByType.dailys[0].completed = true;
       tasksByType.dailys[0].startDate = moment(new Date()).add({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.achievements.perfect).to.equal(0);
     });
@@ -1328,7 +1311,7 @@ describe('cron', () => {
 
       let previousBuffs = user.stats.buffs.toObject();
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.be.greaterThan(previousBuffs.str);
       expect(user.stats.buffs.int).to.be.greaterThan(previousBuffs.int);
@@ -1350,7 +1333,7 @@ describe('cron', () => {
         streaks: true,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.equal(0);
       expect(user.stats.buffs.int).to.equal(0);
@@ -1374,7 +1357,7 @@ describe('cron', () => {
         streaks: true,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.equal(0);
       expect(user.stats.buffs.int).to.equal(0);
@@ -1393,7 +1376,7 @@ describe('cron', () => {
 
       let previousBuffs = user.stats.buffs.toObject();
 
-      cronOverride({user, tasksByType, daysMissed, analytics});
+      cronOverride({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.be.greaterThan(previousBuffs.str);
       expect(user.stats.buffs.int).to.be.greaterThan(previousBuffs.int);
@@ -1410,7 +1393,7 @@ describe('cron', () => {
       let mpBefore = user.stats.mp;
       tasksByType.dailys[0].completed = true;
       stubbedStatsComputed.returns(Object.assign(statsComputedRes, {maxMP: 100}));
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.stats.mp).to.be.greaterThan(mpBefore);
 
       common.statsComputed.restore();
@@ -1421,7 +1404,7 @@ describe('cron', () => {
       const stubbedStatsComputed = sinon.stub(common, 'statsComputed');
       user.stats.mp = 120;
       stubbedStatsComputed.returns(Object.assign(statsComputedRes, {maxMP: 100}));
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.stats.mp).to.equal(common.statsComputed(user).maxMP);
 
       common.statsComputed.restore();
@@ -1452,14 +1435,14 @@ describe('cron', () => {
     });
 
     it('resets user progress', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.party.quest.progress.up).to.equal(0);
       expect(user.party.quest.progress.down).to.equal(0);
       expect(user.party.quest.progress.collectedItems).to.equal(0);
     });
 
     it('applies the user progress', () => {
-      let progress = cron({user, tasksByType, daysMissed, analytics});
+      let progress = cron({user, tasksByType, daysMissed});
       expect(progress.down).to.equal(-1);
     });
   });
@@ -1477,7 +1460,7 @@ describe('cron', () => {
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.notifications.length).to.be.greaterThan(0);
       expect(user.notifications[1].type).to.equal('CRON');
@@ -1501,7 +1484,7 @@ describe('cron', () => {
       let hpBefore1 = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.notifications.length).to.be.greaterThan(0);
       expect(user.notifications[1].type).to.equal('CRON');
@@ -1516,7 +1499,7 @@ describe('cron', () => {
 
       user.lastCron = moment(new Date()).subtract({days: 2});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.notifications.length - notifsBefore2).to.equal(0);
       expect(user.notifications[0].type).to.not.equal('CRON');
@@ -1559,7 +1542,7 @@ describe('cron', () => {
     });
 
     xit('does not clear pms under 200', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.inbox.messages[lastMessageId]).to.exist;
     });
 
@@ -1574,7 +1557,7 @@ describe('cron', () => {
         flagCount: 0,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.inbox.messages[messageId]).to.not.exist;
     });
@@ -1582,23 +1565,23 @@ describe('cron', () => {
 
   describe('login incentives', () => {
     it('increments incentive counter each cron', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
       user.lastCron = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(2);
     });
 
     it('pushes a notification of the day\'s incentive each cron', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.notifications.length).to.be.greaterThan(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
     });
 
     it('replaces previous notifications', () => {
-      cron({user, tasksByType, daysMissed, analytics});
-      cron({user, tasksByType, daysMissed, analytics});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
+      cron({user, tasksByType, daysMissed});
+      cron({user, tasksByType, daysMissed});
 
       let filteredNotifications = user.notifications.filter(n => n.type === 'LOGIN_INCENTIVE');
 
@@ -1607,18 +1590,18 @@ describe('cron', () => {
 
     it('increments loginIncentives by 1 even if days are skipped in between', () => {
       daysMissed = 3;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
     });
 
     it('increments loginIncentives by 1 even if user has Dailies paused', () => {
       user.preferences.sleep = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
     });
 
     it('awards user bard robes if login incentive is 1', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
       expect(user.items.gear.owned.armor_special_bardRobes).to.eql(true);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1626,7 +1609,7 @@ describe('cron', () => {
 
     it('awards user incentive backgrounds if login incentive is 2', () => {
       user.loginIncentives = 1;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(2);
       expect(user.purchased.background.blue).to.eql(true);
       expect(user.purchased.background.green).to.eql(true);
@@ -1638,7 +1621,7 @@ describe('cron', () => {
 
     it('awards user Bard Hat if login incentive is 3', () => {
       user.loginIncentives = 2;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(3);
       expect(user.items.gear.owned.head_special_bardHat).to.eql(true);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1646,7 +1629,7 @@ describe('cron', () => {
 
     it('awards user RoyalPurple Hatching Potion if login incentive is 4', () => {
       user.loginIncentives = 3;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(4);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1654,7 +1637,7 @@ describe('cron', () => {
 
     it('awards user a Chocolate, Meat and Pink Contton Candy if login incentive is 5', () => {
       user.loginIncentives = 4;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(5);
 
       expect(user.items.food.Chocolate).to.eql(1);
@@ -1666,7 +1649,7 @@ describe('cron', () => {
 
     it('awards user moon quest if login incentive is 7', () => {
       user.loginIncentives = 6;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(7);
       expect(user.items.quests.moon1).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1674,7 +1657,7 @@ describe('cron', () => {
 
     it('awards user RoyalPurple Hatching Potion if login incentive is 10', () => {
       user.loginIncentives = 9;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(10);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1682,7 +1665,7 @@ describe('cron', () => {
 
     it('awards user a Strawberry, Patato and Blue Contton Candy if login incentive is 14', () => {
       user.loginIncentives = 13;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(14);
 
       expect(user.items.food.Strawberry).to.eql(1);
@@ -1694,7 +1677,7 @@ describe('cron', () => {
 
     it('awards user a bard instrument if login incentive is 18', () => {
       user.loginIncentives = 17;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(18);
       expect(user.items.gear.owned.weapon_special_bardInstrument).to.eql(true);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1702,7 +1685,7 @@ describe('cron', () => {
 
     it('awards user second moon quest if login incentive is 22', () => {
       user.loginIncentives = 21;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(22);
       expect(user.items.quests.moon2).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1710,7 +1693,7 @@ describe('cron', () => {
 
     it('awards user a RoyalPurple hatching potion if login incentive is 26', () => {
       user.loginIncentives = 25;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(26);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1718,7 +1701,7 @@ describe('cron', () => {
 
     it('awards user Fish, Milk, Rotten Meat and Honey if login incentive is 30', () => {
       user.loginIncentives = 29;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(30);
 
       expect(user.items.food.Fish).to.eql(1);
@@ -1731,7 +1714,7 @@ describe('cron', () => {
 
     it('awards user a RoyalPurple hatching potion if login incentive is 35', () => {
       user.loginIncentives = 34;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(35);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1739,7 +1722,7 @@ describe('cron', () => {
 
     it('awards user the third moon quest if login incentive is 40', () => {
       user.loginIncentives = 39;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(40);
       expect(user.items.quests.moon3).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1747,7 +1730,7 @@ describe('cron', () => {
 
     it('awards user a RoyalPurple hatching potion if login incentive is 45', () => {
       user.loginIncentives = 44;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(45);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1755,7 +1738,7 @@ describe('cron', () => {
 
     it('awards user a saddle if login incentive is 50', () => {
       user.loginIncentives = 49;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(50);
       expect(user.items.food.Saddle).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
diff --git a/test/api/v3/unit/libs/email.test.js b/test/api/v3/unit/libs/email.test.js
index ebfa2ac6e..7cf643df4 100644
--- a/test/api/v3/unit/libs/email.test.js
+++ b/test/api/v3/unit/libs/email.test.js
@@ -91,21 +91,6 @@ describe('emails', () => {
       expect(data).to.have.property('canSend', true);
     });
 
-    it('returns correct user data [facebook users]', () => {
-      let attachEmail = requireAgain(pathToEmailLib);
-      let getUserInfo = attachEmail.getUserInfo;
-      let user = getUser();
-      delete user.profile.name;
-      delete user.auth.local;
-
-      let data = getUserInfo(user, ['name', 'email', '_id', 'canSend']);
-
-      expect(data).to.have.property('name', user.auth.facebook.displayName);
-      expect(data).to.have.property('email', user.auth.facebook.emails[0].value);
-      expect(data).to.have.property('_id', user._id);
-      expect(data).to.have.property('canSend', true);
-    });
-
     it('has fallbacks for missing data', () => {
       let attachEmail = requireAgain(pathToEmailLib);
       let getUserInfo = attachEmail.getUserInfo;
diff --git a/test/api/v3/unit/libs/payments/payments.test.js b/test/api/v3/unit/libs/payments/payments.test.js
index 85e6d9167..12fb07c1c 100644
--- a/test/api/v3/unit/libs/payments/payments.test.js
+++ b/test/api/v3/unit/libs/payments/payments.test.js
@@ -2,8 +2,6 @@ import moment from 'moment';
 
 import * as sender from '../../../../../../website/server/libs/email';
 import * as api from '../../../../../../website/server/libs/payments/payments';
-import analytics from '../../../../../../website/server/libs/analyticsService';
-import notifications from '../../../../../../website/server/libs/pushNotifications';
 import { model as User } from '../../../../../../website/server/models/user';
 import { translate as t } from '../../../../../helpers/api-v3-integration.helper';
 import {
@@ -28,9 +26,6 @@ describe('payments/index', () => {
 
     sandbox.stub(sender, 'sendTxn');
     sandbox.stub(user, 'sendMessage');
-    sandbox.stub(analytics, 'trackPurchase');
-    sandbox.stub(analytics, 'track');
-    sandbox.stub(notifications, 'sendNotification');
 
     data = {
       user,
@@ -224,28 +219,6 @@ describe('payments/index', () => {
 
       it('sends a push notification about the gift', async () => {
         await api.createSubscription(data);
-        expect(notifications.sendNotification).to.be.calledOnce;
-      });
-
-      it('tracks subscription purchase as gift', async () => {
-        await api.createSubscription(data);
-
-        expect(analytics.trackPurchase).to.be.calledOnce;
-        expect(analytics.trackPurchase).to.be.calledWith({
-          uuid: user._id,
-          groupId: undefined,
-          itemPurchased: 'Subscription',
-          sku: 'payment method-subscription',
-          purchaseType: 'subscribe',
-          paymentMethod: data.paymentMethod,
-          quantity: 1,
-          gift: true,
-          purchaseValue: 15,
-          headers: {
-            'x-client': 'habitica-web',
-            'user-agent': '',
-          },
-        });
       });
     });
 
@@ -301,14 +274,6 @@ describe('payments/index', () => {
         expect(user.purchased.plan.gemsBought).to.eql(10);
       });
 
-      it('sets lastBillingDate if payment method is "Amazon Payments"', async () => {
-        data.paymentMethod = 'Amazon Payments';
-
-        await api.createSubscription(data);
-
-        expect(user.purchased.plan.lastBillingDate).to.exist;
-      });
-
       it('increases the user\'s transaction count', async () => {
         expect(user.purchased.txnCount).to.eql(0);
 
@@ -323,27 +288,6 @@ describe('payments/index', () => {
         expect(sender.sendTxn).to.be.calledOnce;
         expect(sender.sendTxn).to.be.calledWith(data.user, 'subscription-begins');
       });
-
-      it('tracks subscription purchase', async () => {
-        await api.createSubscription(data);
-
-        expect(analytics.trackPurchase).to.be.calledOnce;
-        expect(analytics.trackPurchase).to.be.calledWith({
-          uuid: user._id,
-          groupId: undefined,
-          itemPurchased: 'Subscription',
-          sku: 'payment method-subscription',
-          purchaseType: 'subscribe',
-          paymentMethod: data.paymentMethod,
-          quantity: 1,
-          gift: false,
-          purchaseValue: 15,
-          headers: {
-            'x-client': 'habitica-web',
-            'user-agent': '',
-          },
-        });
-      });
     });
 
     context('Block subscription perks', () => {
@@ -632,11 +576,6 @@ describe('payments/index', () => {
         expect(user.sendMessage).to.be.calledWith(recipient, { receiverMsg: msg, senderMsg: msg });
       });
 
-      it('sends a push notification if user did not gift to self', async () => {
-        await api.buyGems(data);
-        expect(notifications.sendNotification).to.be.calledOnce;
-      });
-
       it('sends gem donation message in each participant\'s language', async () => {
         // TODO using english for both users because other languages are not loaded
         // for api.buyGems
diff --git a/test/api/v3/unit/middlewares/cronMiddleware.js b/test/api/v3/unit/middlewares/cronMiddleware.js
index 12209b1a8..1ea9d2e61 100644
--- a/test/api/v3/unit/middlewares/cronMiddleware.js
+++ b/test/api/v3/unit/middlewares/cronMiddleware.js
@@ -9,7 +9,6 @@ import moment from 'moment';
 import { model as User } from '../../../../../website/server/models/user';
 import { model as Group } from '../../../../../website/server/models/group';
 import * as Tasks from '../../../../../website/server/models/task';
-import analyticsService from '../../../../../website/server/libs/analyticsService';
 import * as cronLib from '../../../../../website/server/libs/cron';
 import { v4 as generateUUID } from 'uuid';
 
@@ -38,7 +37,6 @@ describe('cron middleware', () => {
     user.save()
       .then(savedUser => {
         res.locals.user = savedUser;
-        res.analytics = analyticsService;
         done();
       })
       .catch(done);
diff --git a/test/common/ops/buy/buy.js b/test/common/ops/buy/buy.js
index ab72d1f2b..4e751b750 100644
--- a/test/common/ops/buy/buy.js
+++ b/test/common/ops/buy/buy.js
@@ -11,7 +11,6 @@ import content from '../../../../website/common/script/content/index';
 
 describe('shared.ops.buy', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser({
@@ -27,12 +26,6 @@ describe('shared.ops.buy', () => {
       },
       stats: { gp: 200 },
     });
-
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   it('returns error when key is not provided', (done) => {
@@ -47,10 +40,8 @@ describe('shared.ops.buy', () => {
 
   it('recovers 15 hp', () => {
     user.stats.hp = 30;
-    buy(user, {params: {key: 'potion'}}, analytics);
+    buy(user, {params: {key: 'potion'}});
     expect(user.stats.hp).to.eql(45);
-
-    expect(analytics.track).to.be.calledOnce;
   });
 
   it('adds equipment to inventory', () => {
diff --git a/test/common/ops/buy/buyArmoire.js b/test/common/ops/buy/buyArmoire.js
index b711bc342..aa4ddd17d 100644
--- a/test/common/ops/buy/buyArmoire.js
+++ b/test/common/ops/buy/buyArmoire.js
@@ -31,10 +31,9 @@ describe('shared.ops.buyArmoire', () => {
   let YIELD_EQUIPMENT = 0.5;
   let YIELD_FOOD = 0.7;
   let YIELD_EXP = 0.9;
-  let analytics = {track () {}};
 
-  function buyArmoire (_user, _req, _analytics) {
-    const buyOp = new BuyArmoireOperation(_user, _req, _analytics);
+  function buyArmoire (_user, _req) {
+    const buyOp = new BuyArmoireOperation(_user, _req);
 
     return buyOp.purchase();
   }
@@ -52,12 +51,10 @@ describe('shared.ops.buyArmoire', () => {
     user.items.food = {};
 
     sandbox.stub(randomVal, 'trueRandom');
-    sinon.stub(analytics, 'track');
   });
 
   afterEach(() => {
     randomVal.trueRandom.restore();
-    analytics.track.restore();
   });
 
   context('failure conditions', () => {
@@ -150,7 +147,7 @@ describe('shared.ops.buyArmoire', () => {
 
       expect(_.size(user.items.gear.owned)).to.equal(2);
 
-      buyArmoire(user, {}, analytics);
+      buyArmoire(user, {});
 
       expect(_.size(user.items.gear.owned)).to.equal(3);
 
@@ -158,7 +155,6 @@ describe('shared.ops.buyArmoire', () => {
 
       expect(armoireCount).to.eql(_.size(getFullArmoire()) - 2);
       expect(user.stats.gp).to.eql(100);
-      expect(analytics.track).to.be.calledOnce;
     });
   });
 });
diff --git a/test/common/ops/buy/buyGem.js b/test/common/ops/buy/buyGem.js
index fc3d00f70..4ae96a55b 100644
--- a/test/common/ops/buy/buyGem.js
+++ b/test/common/ops/buy/buyGem.js
@@ -1,6 +1,5 @@
 /* eslint-disable camelcase */
 
-import sinon from 'sinon'; // eslint-disable-line no-shadow
 import {
   generateUser,
 } from '../../../helpers/common.helper';
@@ -11,15 +10,14 @@ import i18n from '../../../../website/common/script/i18n';
 import {BuyGemOperation} from '../../../../website/common/script/ops/buy/buyGem';
 import planGemLimits from '../../../../website/common/script/libs/planGemLimits';
 
-function buyGem (user, req, analytics) {
-  let buyOp = new BuyGemOperation(user, req, analytics);
+function buyGem (user, req) {
+  let buyOp = new BuyGemOperation(user, req);
 
   return buyOp.purchase();
 }
 
 describe('shared.ops.buyGem', () => {
   let user;
-  let analytics = {track () {}};
   let goldPoints = 40;
   let gemsBought = 40;
   let userGemAmount = 10;
@@ -35,23 +33,16 @@ describe('shared.ops.buyGem', () => {
         },
       },
     });
-
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('Gems', () => {
     it('purchases gems', () => {
-      let [, message] = buyGem(user, {params: {type: 'gems', key: 'gem'}}, analytics);
+      let [, message] = buyGem(user, {params: {type: 'gems', key: 'gem'}});
 
       expect(message).to.equal(i18n.t('plusGem', {count: 1}));
       expect(user.balance).to.equal(userGemAmount + 0.25);
       expect(user.purchased.plan.gemsBought).to.equal(1);
       expect(user.stats.gp).to.equal(goldPoints - planGemLimits.convRate);
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('purchases gems with a different language than the default', () => {
diff --git a/test/common/ops/buy/buyHealthPotion.js b/test/common/ops/buy/buyHealthPotion.js
index 9f04c4d6b..01fcc829d 100644
--- a/test/common/ops/buy/buyHealthPotion.js
+++ b/test/common/ops/buy/buyHealthPotion.js
@@ -10,10 +10,9 @@ import i18n from '../../../../website/common/script/i18n';
 
 describe('shared.ops.buyHealthPotion', () => {
   let user;
-  let analytics = {track () {}};
 
-  function buyHealthPotion (_user, _req, _analytics) {
-    const buyOp = new BuyHealthPotionOperation(_user, _req, _analytics);
+  function buyHealthPotion (_user, _req) {
+    const buyOp = new BuyHealthPotionOperation(_user, _req);
 
     return buyOp.purchase();
   }
@@ -32,19 +31,13 @@ describe('shared.ops.buyHealthPotion', () => {
       },
       stats: { gp: 200 },
     });
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('Potion', () => {
     it('recovers 15 hp', () => {
       user.stats.hp = 30;
-      buyHealthPotion(user, {}, analytics);
+      buyHealthPotion(user, {});
       expect(user.stats.hp).to.eql(45);
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('does not increase hp above 50', () => {
diff --git a/test/common/ops/buy/buyMarketGear.js b/test/common/ops/buy/buyMarketGear.js
index 48ce22ea1..03ae1884f 100644
--- a/test/common/ops/buy/buyMarketGear.js
+++ b/test/common/ops/buy/buyMarketGear.js
@@ -11,15 +11,14 @@ import {
 } from '../../../../website/common/script/libs/errors';
 import i18n from '../../../../website/common/script/i18n';
 
-function buyGear (user, req, analytics) {
-  let buyOp = new BuyMarketGearOperation(user, req, analytics);
+function buyGear (user, req) {
+  let buyOp = new BuyMarketGearOperation(user, req);
 
   return buyOp.purchase();
 }
 
 describe('shared.ops.buyMarketGear', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser({
@@ -38,20 +37,18 @@ describe('shared.ops.buyMarketGear', () => {
 
     sinon.stub(shared, 'randomVal');
     sinon.stub(shared.fns, 'predictableRandom');
-    sinon.stub(analytics, 'track');
   });
 
   afterEach(() => {
     shared.randomVal.restore();
     shared.fns.predictableRandom.restore();
-    analytics.track.restore();
   });
 
   context('Gear', () => {
     it('adds equipment to inventory', () => {
       user.stats.gp = 31;
 
-      buyGear(user, {params: {key: 'armor_warrior_1'}}, analytics);
+      buyGear(user, {params: {key: 'armor_warrior_1'}});
 
       expect(user.items.gear.owned).to.eql({
         weapon_warrior_0: true,
@@ -64,7 +61,6 @@ describe('shared.ops.buyMarketGear', () => {
         eyewear_special_whiteTopFrame: true,
         eyewear_special_yellowTopFrame: true,
       });
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('deducts gold from user', () => {
diff --git a/test/common/ops/buy/buyMysterySet.js b/test/common/ops/buy/buyMysterySet.js
index 5334d3e67..61ec0c10f 100644
--- a/test/common/ops/buy/buyMysterySet.js
+++ b/test/common/ops/buy/buyMysterySet.js
@@ -13,7 +13,6 @@ import i18n from '../../../../website/common/script/i18n';
 
 describe('shared.ops.buyMysterySet', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser({
@@ -25,11 +24,6 @@ describe('shared.ops.buyMysterySet', () => {
         },
       },
     });
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('Mystery Sets', () => {
@@ -79,7 +73,7 @@ describe('shared.ops.buyMysterySet', () => {
     context('successful purchases', () => {
       it('buys Steampunk Accessories Set', () => {
         user.purchased.plan.consecutive.trinkets = 1;
-        buyMysterySet(user, {params: {key: '301404'}}, analytics);
+        buyMysterySet(user, {params: {key: '301404'}});
 
         expect(user.purchased.plan.consecutive.trinkets).to.eql(0);
         expect(user.items.gear.owned).to.have.property('weapon_warrior_0', true);
@@ -87,7 +81,6 @@ describe('shared.ops.buyMysterySet', () => {
         expect(user.items.gear.owned).to.have.property('armor_mystery_301404', true);
         expect(user.items.gear.owned).to.have.property('head_mystery_301404', true);
         expect(user.items.gear.owned).to.have.property('eyewear_mystery_301404', true);
-        expect(analytics.track).to.be.called;
       });
     });
   });
diff --git a/test/common/ops/buy/buyQuest.js b/test/common/ops/buy/buyQuest.js
index 390b65ee0..37c450702 100644
--- a/test/common/ops/buy/buyQuest.js
+++ b/test/common/ops/buy/buyQuest.js
@@ -11,21 +11,15 @@ import i18n from '../../../../website/common/script/i18n';
 
 describe('shared.ops.buyQuest', () => {
   let user;
-  let analytics = {track () {}};
 
-  function buyQuest (_user, _req, _analytics) {
-    const buyOp = new BuyQuestWithGoldOperation(_user, _req, _analytics);
+  function buyQuest (_user, _req) {
+    const buyOp = new BuyQuestWithGoldOperation(_user, _req);
 
     return buyOp.purchase();
   }
 
   beforeEach(() => {
     user = generateUser();
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   it('buys a Quest scroll', () => {
@@ -34,12 +28,11 @@ describe('shared.ops.buyQuest', () => {
       params: {
         key: 'dilatoryDistress1',
       },
-    }, analytics);
+    });
     expect(user.items.quests).to.eql({
       dilatoryDistress1: 1,
     });
     expect(user.stats.gp).to.equal(5);
-    expect(analytics.track).to.be.calledOnce;
   });
 
   it('buys a Quest scroll with the right quantity if a string is passed for quantity', () => {
@@ -48,13 +41,13 @@ describe('shared.ops.buyQuest', () => {
       params: {
         key: 'dilatoryDistress1',
       },
-    }, analytics);
+    });
     buyQuest(user, {
       params: {
         key: 'dilatoryDistress1',
       },
       quantity: '3',
-    }, analytics);
+    });
 
     expect(user.items.quests).to.eql({
       dilatoryDistress1: 4,
@@ -69,7 +62,7 @@ describe('shared.ops.buyQuest', () => {
           key: 'dilatoryDistress1',
         },
         quantity: 'a',
-      }, analytics);
+      });
     } catch (err) {
       expect(err).to.be.an.instanceof(BadRequest);
       expect(err.message).to.equal(i18n.t('invalidQuantity'));
diff --git a/test/common/ops/buy/buySpecialSpell.js b/test/common/ops/buy/buySpecialSpell.js
index 97aade05a..9010212c6 100644
--- a/test/common/ops/buy/buySpecialSpell.js
+++ b/test/common/ops/buy/buySpecialSpell.js
@@ -12,15 +12,9 @@ import content from '../../../../website/common/script/content/index';
 
 describe('shared.ops.buySpecialSpell', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser();
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   it('throws an error if params.key is missing', (done) => {
@@ -70,7 +64,7 @@ describe('shared.ops.buySpecialSpell', () => {
       params: {
         key: 'thankyou',
       },
-    }, analytics);
+    });
 
     expect(user.stats.gp).to.equal(1);
     expect(user.items.special.thankyou).to.equal(1);
@@ -81,6 +75,5 @@ describe('shared.ops.buySpecialSpell', () => {
     expect(message).to.equal(i18n.t('messageBought', {
       itemText: item.text(),
     }));
-    expect(analytics.track).to.be.calledOnce;
   });
 });
diff --git a/test/common/ops/buy/hourglassPurchase.js b/test/common/ops/buy/hourglassPurchase.js
index 3684f7d41..e49a007ba 100644
--- a/test/common/ops/buy/hourglassPurchase.js
+++ b/test/common/ops/buy/hourglassPurchase.js
@@ -11,15 +11,9 @@ import {
 
 describe('common.ops.hourglassPurchase', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser();
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('failure conditions', () => {
@@ -132,12 +126,11 @@ describe('common.ops.hourglassPurchase', () => {
     it('buys a pet', () => {
       user.purchased.plan.consecutive.trinkets = 2;
 
-      let [, message] = hourglassPurchase(user, {params: {type: 'pets', key: 'MantisShrimp-Base'}}, analytics);
+      let [, message] = hourglassPurchase(user, {params: {type: 'pets', key: 'MantisShrimp-Base'}});
 
       expect(message).to.eql(i18n.t('hourglassPurchase'));
       expect(user.purchased.plan.consecutive.trinkets).to.eql(1);
       expect(user.items.pets).to.eql({'MantisShrimp-Base': 5});
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('buys a mount', () => {
diff --git a/test/common/ops/buy/purchase.js b/test/common/ops/buy/purchase.js
index 900011daa..7cddc485c 100644
--- a/test/common/ops/buy/purchase.js
+++ b/test/common/ops/buy/purchase.js
@@ -16,19 +16,16 @@ describe('shared.ops.purchase', () => {
   const SEASONAL_FOOD = 'Meat';
   let user;
   let goldPoints = 40;
-  let analytics = {track () {}};
 
   before(() => {
     user = generateUser({'stats.class': 'rogue'});
   });
 
   beforeEach(() => {
-    sinon.stub(analytics, 'track');
     sinon.spy(pinnedGearUtils, 'removeItemByPath');
   });
 
   afterEach(() => {
-    analytics.track.restore();
     pinnedGearUtils.removeItemByPath.restore();
   });
 
@@ -130,11 +127,10 @@ describe('shared.ops.purchase', () => {
       let type = 'eggs';
       let key = 'Wolf';
 
-      purchase(user, {params: {type, key}}, analytics);
+      purchase(user, {params: {type, key}});
 
       expect(user.items[type][key]).to.equal(1);
       expect(pinnedGearUtils.removeItemByPath.notCalled).to.equal(true);
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('purchases hatchingPotions', () => {
diff --git a/webpack/config/index.js b/webpack/config/index.js
index ff54852be..c57519537 100644
--- a/webpack/config/index.js
+++ b/webpack/config/index.js
@@ -46,18 +46,6 @@ module.exports = {
         target: DEV_BASE_URL,
         changeOrigin: true,
       },
-      '/stripe': {
-        target: DEV_BASE_URL,
-        changeOrigin: true,
-      },
-      '/amazon': {
-        target: DEV_BASE_URL,
-        changeOrigin: true,
-      },
-      '/paypal': {
-        target: DEV_BASE_URL,
-        changeOrigin: true,
-      },
       '/logout': {
         target: DEV_BASE_URL,
         changeOrigin: true,
diff --git a/webpack/config/prod.env.js b/webpack/config/prod.env.js
index ca5c502e1..cf04a520a 100644
--- a/webpack/config/prod.env.js
+++ b/webpack/config/prod.env.js
@@ -12,21 +12,10 @@ setupNconf(configFile);
 
 // To avoid stringifying more data then we need,
 // items from `env` used on the client will have to be specified in this array
-// @TODO: Do we need? const CLIENT_VARS = ['language', 'isStaticPage', 'availableLanguages', 'translations',
-//                      'FACEBOOK_KEY', 'GOOGLE_CLIENT_ID', 'NODE_ENV', 'BASE_URL', 'GA_ID',
-//                      'AMAZON_PAYMENTS', 'STRIPE_PUB_KEY', 'AMPLITUDE_KEY',
-//                      'worldDmg', 'mods', 'IS_MOBILE', 'PUSHER:KEY', 'PUSHER:ENABLED'];
-
-const AMAZON_SELLER_ID = nconf.get('AMAZON_PAYMENTS:SELLER_ID') || nconf.get('AMAZON_PAYMENTS_SELLER_ID');
-const AMAZON_CLIENT_ID = nconf.get('AMAZON_PAYMENTS:CLIENT_ID') || nconf.get('AMAZON_PAYMENTS_CLIENT_ID');
 
 let env = {
   NODE_ENV: '"production"',
   // clientVars: CLIENT_VARS,
-  AMAZON_PAYMENTS: {
-    SELLER_ID: `"${AMAZON_SELLER_ID}"`,
-    CLIENT_ID: `"${AMAZON_CLIENT_ID}"`,
-  },
   EMAILS: {
     COMMUNITY_MANAGER_EMAIL: `"${nconf.get('EMAILS:COMMUNITY_MANAGER_EMAIL')}"`,
     TECH_ASSISTANCE_EMAIL: `"${nconf.get('EMAILS:TECH_ASSISTANCE_EMAIL')}"`,
@@ -34,7 +23,7 @@ let env = {
   },
 };
 
-'NODE_ENV BASE_URL GA_ID STRIPE_PUB_KEY FACEBOOK_KEY GOOGLE_CLIENT_ID AMPLITUDE_KEY PUSHER:KEY PUSHER:ENABLED LOGGLY_CLIENT_TOKEN'
+'NODE_ENV BASE_URL'
   .split(' ')
   .forEach(key => {
     env[key] = `"${nconf.get(key)}"`;
diff --git a/website/client/app.vue b/website/client/app.vue
index 3f9031a07..86d715144 100644
--- a/website/client/app.vue
+++ b/website/client/app.vue
@@ -10,7 +10,6 @@ div
         p {{currentTip}}
   #app(:class='{"casting-spell": castingSpell}')
     banned-account-modal
-    amazon-payments-modal(v-if='!isStaticPage')
     snackbars
     router-view(v-if="!isUserLoggedIn || isStaticPage")
     template(v-else)
@@ -185,12 +184,9 @@ import AppFooter from './components/appFooter';
 import notificationsDisplay from './components/notifications';
 import snackbars from './components/snackbars/notifications';
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import BuyModal from './components/shops/buyModal.vue';
 import SelectMembersModal from 'client/components/selectMembersModal.vue';
 import notifications from 'client/mixins/notifications';
-import { setup as setupPayments } from 'client/libs/payments';
-import amazonPaymentsModal from 'client/components/payments/amazonModal';
 import spellsMixin from 'client/mixins/spells';
 
 import svgClose from 'assets/svg/close.svg';
@@ -209,7 +205,6 @@ export default {
     snackbars,
     BuyModal,
     SelectMembersModal,
-    amazonPaymentsModal,
     bannedAccountModal,
   },
   data () {
@@ -373,11 +368,6 @@ export default {
       document.title = title;
     });
 
-    this.$nextTick(() => {
-      // Load external scripts after the app has been rendered
-      Analytics.load();
-    });
-
     if (this.isUserLoggedIn && !this.isStaticPage) {
       // Load the user and the user tasks
       Promise.all([
@@ -385,8 +375,6 @@ export default {
         this.$store.dispatch('tasks:fetchUserTasks'),
       ]).then(() => {
         this.$store.state.isUserLoaded = true;
-        Analytics.setUser();
-        Analytics.updateUser();
 
         this.hideLoadingScreen();
 
@@ -398,8 +386,6 @@ export default {
         }
 
         this.$nextTick(() => {
-          // Load external scripts after the app has been rendered
-          setupPayments();
         });
       }).catch((err) => {
         console.error('Impossible to fetch user. Clean up localStorage and refresh.', err); // eslint-disable-line no-console
@@ -448,8 +434,6 @@ export default {
         if (data.fromRoot) return;
         const modalStack = this.$store.state.modalStack;
 
-        this.trackGemPurchase(modalId, data);
-
         // Add new modal to the stack
         const prev = modalStack[modalStack.length - 1];
         const prevId = prev ? prev.modalId : undefined;
@@ -504,18 +488,6 @@ export default {
 
       return true;
     },
-    trackGemPurchase (modalId, data) {
-      // Track opening of gems modal unless it's been already tracked
-      // For example the gems button in the menu already tracks the event by itself
-      if (modalId === 'buy-gems' && data.alreadyTracked !== true) {
-        Analytics.track({
-          hitType: 'event',
-          eventCategory: 'button',
-          eventAction: 'click',
-          eventLabel: 'Gems > Wallet',
-        });
-      }
-    },
     resetItemToBuy ($event) {
       // @TODO: Do we need this? I think selecting a new item
       // overwrites. @negue might know
diff --git a/website/client/components/achievements/achievementFooter.vue b/website/client/components/achievements/achievementFooter.vue
index 862c19099..9b5328c7c 100644
--- a/website/client/components/achievements/achievementFooter.vue
+++ b/website/client/components/achievements/achievementFooter.vue
@@ -1,16 +1,5 @@
 <template lang="pug">
 .modal-footer(style='margin-top:0', ng-init='loadWidgets()')
-  .container-fluid.share-buttons
-    .row
-      .col-12.text-center
-        a.twitter-share-button.share-button(:href='twitterLink', target='_blank')
-          .social-icon.twitter.svg-icon(v-html='icons.twitter')
-          | {{ $t('tweet') }}
-        a.fb-share-button.share-button(:href='facebookLink', target='_blank')
-          .social-icon.facebook.svg-icon(v-html='icons.facebook')
-          | {{ $t('share') }}
-        // @TODO: Still want this? .col-4
-          a.tumblr-share-button(:data-href='socialLevelLink', data-notes='none')
 </template>
 
 <style scoped>
@@ -27,53 +16,4 @@
     text-align: center;
     color: #fff;
   }
-
-  .fb-share-button {
-    background-color: #2995cd;
-  }
-
-  .twitter-share-button {
-    margin-right: .5em;
-    background-color: #3bcad7;
-  }
-
-  .social-icon {
-    width: 16px;
-    display: inline-block;
-    vertical-align: bottom;
-    margin-right: .5em;
-  }
-
-  .social-icon.facebook svg {
-    width: 7.5px;
-    margin-bottom: .2em;
-  }
-
-  .social-icon.twitter {
-    margin-bottom: .2em;
-  }
 </style>
-
-<script>
-// @TODO:
-let BASE_URL = 'https://habitica.com';
-import twitter from 'assets/svg/twitter.svg';
-import facebook from 'assets/svg/facebook.svg';
-
-export default {
-  data () {
-    let tweet = this.$t('achievementShare');
-
-    return {
-      icons: Object.freeze({
-        twitter,
-        facebook,
-      }),
-      tweet,
-      achievementLink: `${BASE_URL}/social/achievement`,
-      twitterLink: `https://twitter.com/intent/tweet?text=${tweet}&via=habitica&url=${BASE_URL}/social/achievement&count=none`,
-      facebookLink: `https://www.facebook.com/sharer/sharer.php?text=${tweet}&u=${BASE_URL}/social/achievement`,
-    };
-  },
-};
-</script>
diff --git a/website/client/components/achievements/levelUp.vue b/website/client/components/achievements/levelUp.vue
index 0f815deec..cd47be7a0 100644
--- a/website/client/components/achievements/levelUp.vue
+++ b/website/client/components/achievements/levelUp.vue
@@ -12,18 +12,6 @@
       // @TODO: Keep this? .checkbox
         input(type='checkbox', v-model='user.preferences.suppressModals.levelUp', @change='changeLevelupSuppress()')
         label(style='display:inline-block') {{ $t('dontShowAgain') }}
-
-    .container-fluid.share-buttons
-      .row
-        .col-12.text-center
-          a.twitter-share-button.share-button(:href='twitterLink', target='_blank')
-            .social-icon.twitter.svg-icon(v-html='icons.twitter')
-            | {{ $t('tweet') }}
-          a.fb-share-button.share-button(:href='facebookLink', target='_blank')
-            .social-icon.facebook.svg-icon(v-html='icons.facebook')
-            | {{ $t('share') }}
-        // @TODO: Still want this? .col-4
-          a.tumblr-share-button(:data-href='socialLevelLink', data-notes='none')
 </template>
 
 <style lang="scss">
@@ -79,31 +67,6 @@
       text-align: center;
       color: #fff;
     }
-
-    .fb-share-button {
-      background-color: #2995cd;
-    }
-
-    .twitter-share-button {
-      margin-right: .5em;
-      background-color: #3bcad7;
-    }
-
-    .social-icon {
-      width: 16px;
-      display: inline-block;
-      vertical-align: bottom;
-      margin-right: .5em;
-    }
-
-    .social-icon.facebook svg {
-      width: 7.5px;
-      margin-bottom: .2em;
-    }
-
-    .social-icon.twitter {
-      margin-bottom: .2em;
-    }
   }
 </style>
 
@@ -118,10 +81,6 @@ import Avatar from '../avatar';
 import { mapState } from 'client/libs/store';
 import {maxHealth} from '../../../common/script/index';
 import styleHelper from 'client/mixins/styleHelper';
-import twitter from 'assets/svg/twitter.svg';
-import facebook from 'assets/svg/facebook.svg';
-
-let BASE_URL = 'https://habitica.com';
 
 export default {
   mixins: [styleHelper],
@@ -129,18 +88,9 @@ export default {
     Avatar,
   },
   data () {
-    let tweet = this.$t('levelUpShare');
     return {
-      icons: Object.freeze({
-        twitter,
-        facebook,
-      }),
       statsAllocationBoxIsOpen: true,
       maxHealth,
-      tweet,
-      socialLevelLink: `${BASE_URL}/social/level-up`,
-      twitterLink: `https://twitter.com/intent/tweet?text=${tweet}&via=habitica&url=${BASE_URL}/social/level-up&count=none`,
-      facebookLink: `https://www.facebook.com/sharer/sharer.php?text=${tweet}&u=${BASE_URL}/social/level-up`,
     };
   },
   mounted () {
diff --git a/website/client/components/achievements/lowHealth.vue b/website/client/components/achievements/lowHealth.vue
index 7e9798ecd..ccc293868 100644
--- a/website/client/components/achievements/lowHealth.vue
+++ b/website/client/components/achievements/lowHealth.vue
@@ -58,7 +58,6 @@
 <script>
 import Avatar from '../avatar';
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import percent from '../../../common/script/libs/percent';
 import {maxHealth} from '../../../common/script/index';
 
@@ -82,14 +81,6 @@ export default {
       return `${Math.ceil(this.user.stats.hp)} / ${this.maxHealth}`;
     },
   },
-  mounted () {
-    Analytics.track({
-      hitType: 'event',
-      eventCategory: 'button',
-      eventAction: 'click',
-      eventLabel: 'Health Warning',
-    });
-  },
   methods: {
     close () {
       this.$root.$emit('bv::hide::modal', 'low-health');
diff --git a/website/client/components/achievements/wonChallenge.vue b/website/client/components/achievements/wonChallenge.vue
index de65914ea..ab38d5546 100644
--- a/website/client/components/achievements/wonChallenge.vue
+++ b/website/client/components/achievements/wonChallenge.vue
@@ -13,13 +13,6 @@
       p {{ $t('congratulations') }}
       br
       button.btn.btn-primary(@click='close()') {{ $t('hurray') }}
-    .modal-footer
-      .col-3
-        a.twitter-share-button(href='https://twitter.com/intent/tweet?text=#{tweet}&via=habitica&url=#{env.BASE_URL}/social/won-challenge&count=none') {{ $t('tweet') }}
-      .col-4(style='margin-left:.8em')
-        .fb-share-button(data-href='#{env.BASE_URL}/social/won-challenge', data-layout='button')
-      .col-4(style='margin-left:.8em')
-        a.tumblr-share-button(data-href='#{env.BASE_URL}/social/won-challenge', data-notes='none')
 </template>
 
 <style scoped>
@@ -51,12 +44,6 @@ export default {
   computed: {
     ...mapState({user: 'user.data'}),
   },
-  data () {
-    let tweet = this.$t('wonChallengeShare');
-    return {
-      tweet,
-    };
-  },
   methods: {
     close () {
       this.$root.$emit('bv::hide::modal', 'won-challenge');
diff --git a/website/client/components/appFooter.vue b/website/client/components/appFooter.vue
index baed4e411..8af845ee0 100644
--- a/website/client/components/appFooter.vue
+++ b/website/client/components/appFooter.vue
@@ -4,11 +4,6 @@
   //modify-inventory(v-if="isUserLoaded")
   footer.col-12(:class="{expanded: isExpandedFooter}")
     .row(v-if="isExpandedFooter")
-      .col-12.col-md-2
-        h3
-          a(href='https://itunes.apple.com/us/app/habitica/id994882113?ls=1&mt=8', target='_blank') {{ $t('mobileIOS') }}
-        h3
-          a(href='https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica', target='_blank') {{ $t('mobileAndroid') }}
       .col-12.col-md-2
         h3 {{ $t('footerCompany') }}
         ul
@@ -41,8 +36,6 @@
             a(href='https://trello.com/c/odmhIqyW/440-read-first-table-of-contents', target='_blank') {{ $t('requestFeature') }}
           li(v-html='$t("communityExtensions")')
           li(v-html='$t("communityForum")')
-          li
-            a(href='https://www.facebook.com/Habitica', target='_blank') {{ $t('communityFacebook') }}
           li
             a(href='https://www.reddit.com/r/habitrpg/', target='_blank') {{ $t('communityReddit') }}
       .col-12.col-md-6
@@ -58,14 +51,6 @@
                 a(href='http://habitica.wikia.com/wiki/Guidance_for_Blacksmiths', target='_blank') {{ $t('guidanceForBlacksmiths') }}
               li
                 a(href='http://devs.habitica.com/', target='_blank') {{ $t('devBlog') }}
-          .col-6.social
-            h3 {{ $t('footerSocial') }}
-            a.social-circle(href='https://twitter.com/habitica', target='_blank')
-              .social-icon.svg-icon(v-html='icons.twitter')
-            // TODO: Not ready yet. a.social-circle(href='https://www.instagram.com/habitica/', target='_blank')
-              .social-icon.svg-icon.instagram(v-html='icons.instagram')
-            a.social-circle(href='https://www.facebook.com/Habitica', target='_blank')
-              .social-icon.facebook.svg-icon(v-html='icons.facebook')
         .row
           .col-12.col-md-10 {{ $t('donateText3') }}
           .col-12.col-md-2
@@ -150,37 +135,6 @@
     margin-bottom: .5em;
   }
 
-  .social {
-    h3 {
-      text-align: right;
-    }
-  }
-
-  .social-circle {
-    width: 40px;
-    height: 40px;
-    border-radius: 50%;
-    background-color: #c3c0c7;
-    display: inline-block;
-    margin-left: 1em;
-    float: right;
-
-    .social-icon {
-      color: #e1e0e3;
-      width: 16px;
-      margin: 0 auto;
-      margin-top: 1em;
-    }
-
-    .facebook {
-      margin-top: .7em;
-    }
-
-    .instagram {
-      margin-top: .85em;
-    }
-  }
-
   .logo {
     width: 24px;
     height: 24px;
@@ -215,11 +169,6 @@
 </style>
 
 <style lang="scss">
-  .facebook svg {
-    width: 10px;
-    margin: 0 auto;
-  }
-
   footer {
     &.expanded {
       padding-left: 6em;
@@ -244,31 +193,22 @@
 import axios from 'axios';
 import moment from 'moment';
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 
 import gryphon from 'assets/svg/gryphon.svg';
-import twitter from 'assets/svg/twitter.svg';
-import facebook from 'assets/svg/facebook.svg';
-import instagram from 'assets/svg/instagram.svg';
 import heart from 'assets/svg/heart.svg';
 
 import modifyInventory from './modifyInventory';
-import buyGemsModal from './payments/buyGemsModal';
 
 const IS_PRODUCTION = process.env.NODE_ENV === 'production'; // eslint-disable-line no-process-env
 
 export default {
   components: {
     modifyInventory,
-    buyGemsModal,
   },
   data () {
     return {
       icons: Object.freeze({
         gryphon,
-        twitter,
-        facebook,
-        instagram,
         heart,
       }),
       debugMenuShown: false,
@@ -367,12 +307,6 @@ export default {
       this.$root.$emit('bv::show::modal', 'modify-inventory');
     },
     donate () {
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Gems > Donate',
-      });
       this.$root.$emit('bv::show::modal', 'buy-gems', {alreadyTracked: true});
     },
   },
diff --git a/website/client/components/auth/registerLoginReset.vue b/website/client/components/auth/registerLoginReset.vue
index 12a9dad12..bbb9af252 100644
--- a/website/client/components/auth/registerLoginReset.vue
+++ b/website/client/components/auth/registerLoginReset.vue
@@ -13,15 +13,6 @@
         .svg-icon.gryphon
       div
         .svg-icon.habitica-logo(v-html="icons.habiticaIcon")
-    .form-group.row.text-center
-      .col-12.col-md-6
-        .btn.btn-secondary.social-button(@click='socialAuth("facebook")')
-          .svg-icon.social-icon(v-html="icons.facebookIcon")
-          .text {{registering ? $t('signUpWithSocial', {social: 'Facebook'}) : $t('loginWithSocial', {social: 'Facebook'})}}
-      .col-12.col-md-6
-        .btn.btn-secondary.social-button(@click='socialAuth("google")')
-          .svg-icon.social-icon(v-html="icons.googleIcon")
-          span {{registering ? $t('signUpWithSocial', {social: 'Google'}) : $t('loginWithSocial', {social: 'Google'})}}
     .form-group(v-if='registering')
       label(for='usernameInput', v-once) {{$t('username')}}
       input#usernameInput.form-control(type='text', :placeholder='$t("usernamePlaceholder")', v-model='username')
@@ -204,24 +195,6 @@
       font-size: 14px;
       color: $white;
     }
-
-    .social-button {
-      width: 100%;
-      text-align: center;
-
-      .text {
-        display: inline-block;
-      }
-    }
-
-    .social-icon {
-      margin-right: 1em;
-      width: 18px;
-      height: 18px;
-      display: inline-block;
-      vertical-align: top;
-      margin-top: .2em;
-    }
   }
 
   #top-background {
@@ -279,12 +252,9 @@
 
 <script>
 import axios from 'axios';
-import hello from 'hellojs';
 
 import gryphon from 'assets/svg/gryphon.svg';
 import habiticaIcon from 'assets/svg/habitica-logo.svg';
-import facebookSquareIcon from 'assets/svg/facebook-square.svg';
-import googleIcon from 'assets/svg/google.svg';
 
 export default {
   data () {
@@ -303,8 +273,6 @@ export default {
     data.icons = Object.freeze({
       gryphon,
       habiticaIcon,
-      facebookIcon: facebookSquareIcon,
-      googleIcon,
     });
 
     return data;
@@ -323,13 +291,6 @@ export default {
       return false;
     },
   },
-  mounted () {
-    hello.init({
-      facebook: process.env.FACEBOOK_KEY, // eslint-disable-line
-      // windows: WINDOWS_CLIENT_ID,
-      google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line
-    });
-  },
   watch: {
     $route: {
       handler () {
@@ -427,38 +388,6 @@ export default {
       // ALSO it's the only way to make sure language data is reloaded and correct for the logged in user
       window.location.href = redirectTo;
     },
-    // @TODO: Abstract hello in to action or lib
-    async socialAuth (network) {
-      try {
-        await hello(network).logout();
-      } catch (e) {} // eslint-disable-line
-
-      const url = window.location.href;
-
-      let auth = await hello(network).login({
-        scope: 'email',
-        // explicitly pass the redirect url or it might redirect to /home
-        redirect_uri: url, // eslint-disable-line camelcase
-      });
-
-      await this.$store.dispatch('auth:socialAuth', {
-        auth,
-      });
-
-      let redirectTo;
-
-      if (this.$route.query.redirectTo) {
-        redirectTo = this.$route.query.redirectTo;
-      } else {
-        redirectTo = '/';
-      }
-
-      // @TODO do not reload entire page
-      // problem is that app.vue created hook should be called again
-      // after user is logged in / just signed up
-      // ALSO it's the only way to make sure language data is reloaded and correct for the logged in user
-      window.location.href = redirectTo;
-    },
     handleSubmit () {
       if (this.registering) {
         this.register();
diff --git a/website/client/components/challenges/challengeModal.vue b/website/client/components/challenges/challengeModal.vue
index bcfc54d95..96f4fa9e3 100644
--- a/website/client/components/challenges/challengeModal.vue
+++ b/website/client/components/challenges/challengeModal.vue
@@ -54,8 +54,6 @@
       .row.footer-wrap
         .col-12.text-center.submit-button-wrapper
           .alert.alert-warning(v-if='insufficientGemsForTavernChallenge') You do not have enough gems to create a Tavern challenge
-          // @TODO if buy gems button is added, add analytics tracking to it
-          // see https://github.com/HabitRPG/habitica/blob/develop/website/views/options/social/challenges.jade#L134
           button.btn.btn-primary(v-if='creating && !cloning', @click='createChallenge()', :disabled='loading') {{$t('createChallengeAddTasks')}}
           button.btn.btn-primary(v-once, v-if='cloning', @click='createChallenge()', :disabled='loading') {{$t('createChallengeCloneTasks')}}
           button.btn.btn-primary(v-once, v-if='!creating && !cloning', @click='updateChallenge()') {{$t('updateChallenge')}}
diff --git a/website/client/components/group-plans/billing.vue b/website/client/components/group-plans/billing.vue
index f9b886d54..5f2f449af 100644
--- a/website/client/components/group-plans/billing.vue
+++ b/website/client/components/group-plans/billing.vue
@@ -11,10 +11,6 @@
         td
           h3 {{ $t('paymentDetails') }}
           p(v-if='group.purchased.plan.planId') {{ $t('groupSubscriptionPrice') }}
-      tr(v-if='group.purchased.plan.extraMonths')
-        td
-          span.glyphicon.glyphicon-credit-card
-          | {{ $t('purchasedGroupPlanPlanExtraMonths', purchasedGroupPlanPlanExtraMonths) }}
       tr(v-if='group.purchased.plan.consecutive.count || group.purchased.plan.consecutive.offset')
         td
           span.glyphicon.glyphicon-forward
@@ -26,8 +22,6 @@
   .col-12.col-md-6.offset-md-3
     button.btn.btn-success(class='btn-success', v-if='group.purchased.plan.dateTerminated', @click='upgradeGroup()')
       | {{ $t('upgrade') }}
-    .btn.btn-primary(v-if='!group.purchased.plan.dateTerminated && group.purchased.plan.paymentMethod === "Stripe"',
-      @click='showStripeEdit({groupId: group.id})') {{ $t('subUpdateCard') }}
     .btn.btn-sm.btn-danger(v-if='!group.purchased.plan.dateTerminated',
       @click='cancelSubscription({group: group})') {{ $t('cancelGroupSub') }}
 </template>
@@ -35,10 +29,9 @@
 <script>
 import moment from 'moment';
 import { mapState } from 'client/libs/store';
-import paymentsMixin from 'client/mixins/payments';
 
 export default {
-  mixins: [paymentsMixin],
+  mixins: [],
   props: ['groupId'],
   data () {
     return {
diff --git a/website/client/components/groups/createPartyModal.vue b/website/client/components/groups/createPartyModal.vue
index 74beb78f0..e81c274b2 100644
--- a/website/client/components/groups/createPartyModal.vue
+++ b/website/client/components/groups/createPartyModal.vue
@@ -28,12 +28,6 @@ b-modal#create-party-modal(title="Empty", size='lg', hide-footer=true)
         .option-item(v-once)
           .svg-icon(v-html="icons.qrCode")
           | {{$t('qrCode')}}
-        .option-item(v-once)
-          .svg-icon.facebook(v-html="icons.facebook")
-          | Facebook
-        .option-item(v-once)
-          .svg-icon(v-html="icons.twitter")
-          | Twitter
 </template>
 
 <style>
@@ -121,11 +115,6 @@ b-modal#create-party-modal(title="Empty", size='lg', hide-footer=true)
         display: inline-block;
         vertical-align: bottom;
       }
-
-      .facebook svg {
-        width: 15px;
-        height: 15px;
-      }
     }
 
     .option-item:hover {
@@ -138,13 +127,10 @@ b-modal#create-party-modal(title="Empty", size='lg', hide-footer=true)
 
 <script>
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 
 import copyIcon from 'assets/svg/copy.svg';
 import greyBadgeIcon from 'assets/svg/grey-badge.svg';
 import qrCodeIcon from 'assets/svg/qrCode.svg';
-import facebookIcon from 'assets/svg/facebook.svg';
-import twitterIcon from 'assets/svg/twitter.svg';
 
 export default {
   data () {
@@ -153,8 +139,6 @@ export default {
         copy: copyIcon,
         greyBadge: greyBadgeIcon,
         qrCode: qrCodeIcon,
-        facebook: facebookIcon,
-        twitter: twitterIcon,
       }),
       shareUserIdShown: false,
     };
@@ -164,12 +148,6 @@ export default {
   },
   methods: {
     shareUserId () {
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Health Warning',
-      });
       this.shareUserIdShown = !this.shareUserIdShown;
     },
     async createParty () {
@@ -181,11 +159,6 @@ export default {
       this.$store.state.party.data = party;
       this.user.party._id = party._id;
 
-      Analytics.updateUser({
-        partyID: party._id,
-        partySize: 1,
-      });
-
       this.$root.$emit('bv::hide::modal', 'create-party-modal');
       this.$router.push('/party');
     },
diff --git a/website/client/components/groups/group.vue b/website/client/components/groups/group.vue
index ff5372f73..647d4ad5b 100644
--- a/website/client/components/groups/group.vue
+++ b/website/client/components/groups/group.vue
@@ -321,7 +321,6 @@ import extend from 'lodash/extend';
 import groupUtilities from 'client/mixins/groupsUtilities';
 import styleHelper from 'client/mixins/styleHelper';
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import membersModal from './membersModal';
 import startQuestModal from './startQuestModal';
 import questDetailsModal from './questDetailsModal';
@@ -633,13 +632,6 @@ export default {
       await this.$store.dispatch('guilds:join', {groupId: this.group._id, type: 'guild'});
     },
     clickLeave () {
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Leave Party',
-      });
-
       // @TODO: Get challenges and ask to keep or remove
       if (!confirm('Are you sure you want to leave?')) return;
       let keep = true;
@@ -656,7 +648,6 @@ export default {
 
       if (this.isParty) {
         data.type = 'party';
-        Analytics.updateUser({partySize: null, partyID: null});
         this.$store.state.partyMembers = [];
       }
 
@@ -671,13 +662,6 @@ export default {
       this.$router.push('/group-plans');
     },
     clickStartQuest () {
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Start a Quest',
-      });
-
       let hasQuests = find(this.user.items.quests, (quest) => {
         return quest > 0;
       });
diff --git a/website/client/components/groups/groupFormModal.vue b/website/client/components/groups/groupFormModal.vue
index 3ff0d4127..d719f2c7d 100644
--- a/website/client/components/groups/groupFormModal.vue
+++ b/website/client/components/groups/groupFormModal.vue
@@ -363,13 +363,6 @@ export default {
         alert(this.$t('notEnoughGems'));
         return;
         // @TODO return $rootScope.openModal('buyGems', {track:"Gems > Gems > Create Group"});
-        // @TODO when modal is implemented, enable analytics
-        /* Analytics.track({
-          hitType: 'event',
-          eventCategory: 'button',
-          eventAction: 'click',
-          eventLabel: 'Health Warning',
-        }); */
       }
 
       let errors = [];
diff --git a/website/client/components/groups/groupPlan.vue b/website/client/components/groups/groupPlan.vue
index 848f14dd0..84ed4a636 100644
--- a/website/client/components/groups/groupPlan.vue
+++ b/website/client/components/groups/groupPlan.vue
@@ -45,16 +45,6 @@ div
               .number 3
               .name Each Individual Group Member
 
-          .box.payment-providers
-            h3 Choose your payment method
-            .box.payment-button(@click='pay(PAYMENTS.STRIPE)')
-              div
-                .svg-icon.credit-card-icon(v-html="icons.group")
-                p.credit-card Credit Card
-              p Powered by Stripe
-            .box.payment-button(@click='pay(PAYMENTS.AMAZON)')
-              .svg-icon.amazon-pay-icon(v-html="icons.amazonpay")
-
     .container.col-6.offset-3.create-option(v-if='!upgradingGroup._id')
       .row
         h1.col-12.text-center.purple-header Create your Group today!
@@ -97,14 +87,6 @@ div
         button.btn.btn-secondary.form-control(@click='createGroup()', :value="$t('createGroupPlan')")
       .form-group
         button.btn.btn-primary.btn-lg.btn-block(@click="createGroup()", :disabled="!newGroupIsReady") {{ $t('createGroupPlan') }}
-    .col-12(v-if='activePage === PAGES.PAY')
-      .payment-providers
-        h3 Choose your payment method
-        .box.payment-button(@click='pay(PAYMENTS.STRIPE)')
-          p Credit Card
-          p Powered by Stripe
-        .box.payment-button(@click='pay(PAYMENTS.AMAZON)')
-          | Amazon Pay
 </template>
 
 <style lang="scss" scoped>
@@ -142,26 +124,6 @@ div
     .payment-providers {
       width: 350px;
     }
-
-    .credit-card {
-      font-size: 20px;
-      font-weight: bold;
-      margin-bottom: 0;
-      margin-top: .5em;
-      display: inline-block;
-    }
-
-    .credit-card-icon {
-      width: 25px;
-      display: inline-block;
-      margin-right: .5em;
-    }
-
-    .amazon-pay-icon {
-      width: 150px;
-      margin: 0 auto;
-      margin-top: .5em;
-    }
   }
 
   .header {
@@ -321,20 +283,16 @@ div
 </style>
 
 <script>
-import paymentsMixin from '../../mixins/payments';
 import { mapState } from 'client/libs/store';
 import group from 'assets/svg/group.svg';
-import amazonpay from 'assets/svg/amazonpay.svg';
 import positiveIcon from 'assets/svg/positive.svg';
 
 export default {
-  mixins: [paymentsMixin],
+  mixins: [],
   data () {
     return {
-      amazonPayments: {},
       icons: Object.freeze({
         group,
-        amazonpay,
         positiveIcon,
       }),
       PAGES: {
@@ -342,10 +300,6 @@ export default {
         UPGRADE_GROUP: 'upgrade-group',
         PAY: 'pay',
       },
-      PAYMENTS: {
-        AMAZON: 'amazon',
-        STRIPE: 'stripe',
-      },
       paymentMethod: '',
       newGroup: {
         type: 'guild',
@@ -396,14 +350,6 @@ export default {
       } else {
         paymentData.groupToCreate = this.newGroup;
       }
-
-      this.paymentMethod = paymentMethod;
-      if (this.paymentMethod === this.PAYMENTS.STRIPE) {
-        this.showStripe(paymentData);
-      } else if (this.paymentMethod === this.PAYMENTS.AMAZON) {
-        paymentData.type = 'subscription';
-        this.amazonPaymentsInit(paymentData);
-      }
     },
   },
 };
diff --git a/website/client/components/groups/inviteModal.vue b/website/client/components/groups/inviteModal.vue
index 8638ebf1b..8d8869f00 100644
--- a/website/client/components/groups/inviteModal.vue
+++ b/website/client/components/groups/inviteModal.vue
@@ -54,7 +54,6 @@ import { mapState } from 'client/libs/store';
 import filter from 'lodash/filter';
 import map from 'lodash/map';
 import notifications from 'client/mixins/notifications';
-import * as Analytics from 'client/libs/analytics';
 
 export default {
   mixins: [notifications],
@@ -65,14 +64,6 @@ export default {
       emails: [],
     };
   },
-  mounted () {
-    Analytics.track({
-      hitType: 'event',
-      eventCategory: 'button',
-      eventAction: 'click',
-      eventLabel: 'Invite Friends',
-    });
-  },
   computed: {
     ...mapState({user: 'user.data'}),
     inviter () {
diff --git a/website/client/components/groups/questDetailsModal.vue b/website/client/components/groups/questDetailsModal.vue
index e02522102..4173eeda7 100644
--- a/website/client/components/groups/questDetailsModal.vue
+++ b/website/client/components/groups/questDetailsModal.vue
@@ -140,8 +140,6 @@ import quests from 'common/script/content/quests';
 import copyIcon from 'assets/svg/copy.svg';
 import greyBadgeIcon from 'assets/svg/grey-badge.svg';
 import qrCodeIcon from 'assets/svg/qrCode.svg';
-import facebookIcon from 'assets/svg/facebook.svg';
-import twitterIcon from 'assets/svg/twitter.svg';
 import starIcon from 'assets/svg/star.svg';
 import goldIcon from 'assets/svg/gold.svg';
 import difficultyStarIcon from 'assets/svg/difficulty-star.svg';
@@ -162,8 +160,6 @@ export default {
         copy: copyIcon,
         greyBadge: greyBadgeIcon,
         qrCode: qrCodeIcon,
-        facebook: facebookIcon,
-        twitter: twitterIcon,
         starIcon,
         goldIcon,
         difficultyStarIcon,
diff --git a/website/client/components/groups/startQuestModal.vue b/website/client/components/groups/startQuestModal.vue
index 66bee4afe..456a968d1 100644
--- a/website/client/components/groups/startQuestModal.vue
+++ b/website/client/components/groups/startQuestModal.vue
@@ -106,15 +106,12 @@
 
 <script>
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 
 import quests from 'common/script/content/quests';
 
 import copyIcon from 'assets/svg/copy.svg';
 import greyBadgeIcon from 'assets/svg/grey-badge.svg';
 import qrCodeIcon from 'assets/svg/qrCode.svg';
-import facebookIcon from 'assets/svg/facebook.svg';
-import twitterIcon from 'assets/svg/twitter.svg';
 import starIcon from 'assets/svg/star.svg';
 import goldIcon from 'assets/svg/gold.svg';
 import difficultyStarIcon from 'assets/svg/difficulty-star.svg';
@@ -137,8 +134,6 @@ export default {
         copy: copyIcon,
         greyBadge: greyBadgeIcon,
         qrCode: qrCodeIcon,
-        facebook: facebookIcon,
-        twitter: twitterIcon,
         starIcon,
         goldIcon,
         difficultyStarIcon,
@@ -169,11 +164,6 @@ export default {
     async questInit () {
       this.loading = true;
 
-      Analytics.updateUser({
-        partyID: this.group._id,
-        partySize: this.group.memberCount,
-      });
-
       let groupId = this.group._id || this.user.party._id;
 
       const key = this.selectedQuest;
diff --git a/website/client/components/header/index.vue b/website/client/components/header/index.vue
index e679b2c5c..42a054a41 100644
--- a/website/client/components/header/index.vue
+++ b/website/client/components/header/index.vue
@@ -34,26 +34,11 @@ div
         span.small-text(v-html="$t('inviteFriendsParty')")
         br
         button.btn.btn-primary(@click='openPartyModal()') {{ partyMembers && partyMembers.length > 1 ? $t('startAParty') : $t('inviteFriends') }}
-  a.useMobileApp(v-if="isAndroidMobile()", v-once, href="https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica") {{ $t('useMobileApps') }}
-  a.useMobileApp(v-if="isIOSMobile()", v-once, href="https://itunes.apple.com/us/app/habitica-gamified-task-manager/id994882113?mt=8") {{ $t('useMobileApps') }}
 </template>
 
 <style lang="scss" scoped>
   @import '~client/assets/scss/colors.scss';
 
-  .useMobileApp {
-    background: red;
-    color: white;
-    z-index: 10;
-    width: 100%;
-    margin: 10px 5px 0 0;
-    height: 64px;
-    text-align: center;
-
-    display: flex;
-    align-items: center;
-  }
-
   #app-header {
     margin-top: 56px;
     padding-left: 24px;
@@ -145,12 +130,6 @@ export default {
     ...mapActions({
       getPartyMembers: 'party:getMembers',
     }),
-    isAndroidMobile () {
-      return navigator.userAgent.match(/Android/i);
-    },
-    isIOSMobile () {
-      return navigator.userAgent.match(/iPhone|iPad|iPod/i);
-    },
     expandMember (memberId) {
       if (this.expandedMember === memberId) {
         this.expandedMember = null;
diff --git a/website/client/components/header/menu.vue b/website/client/components/header/menu.vue
index 09400e80d..46d92df23 100644
--- a/website/client/components/header/menu.vue
+++ b/website/client/components/header/menu.vue
@@ -284,7 +284,6 @@ div
 
 <script>
 import { mapState, mapGetters } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import { goToModForm } from 'client/libs/modform';
 
 import gemIcon from 'assets/svg/gem.svg';
@@ -354,14 +353,6 @@ export default {
     },
     showBuyGemsModal (startingPage) {
       this.$store.state.gemModalOptions.startingPage = startingPage;
-
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Gems > Toolbar',
-      });
-
       this.$root.$emit('bv::show::modal', 'buy-gems', {alreadyTracked: true});
     },
   },
diff --git a/website/client/components/header/userDropdown.vue b/website/client/components/header/userDropdown.vue
index 747c48a4b..21b6693c1 100644
--- a/website/client/components/header/userDropdown.vue
+++ b/website/client/components/header/userDropdown.vue
@@ -63,7 +63,6 @@ menu-dropdown.item-user(:right="true")
 
 <script>
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import userIcon from 'assets/svg/user.svg';
 import MenuDropdown from '../ui/customMenuDropdown';
 import axios from 'axios';
@@ -105,14 +104,6 @@ export default {
     },
     showBuyGemsModal (startingPage) {
       this.$store.state.gemModalOptions.startingPage = startingPage;
-
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Gems > User Dropdown',
-      });
-
       this.$root.$emit('bv::show::modal', 'buy-gems', {alreadyTracked: true});
     },
     logout () {
diff --git a/website/client/components/settings/deleteModal.vue b/website/client/components/settings/deleteModal.vue
index 24a9d6fac..248ebadc9 100644
--- a/website/client/components/settings/deleteModal.vue
+++ b/website/client/components/settings/deleteModal.vue
@@ -15,17 +15,6 @@
         button.btn.btn-primary(@click='close()') {{ $t('neverMind') }}
         button.btn.btn-danger(@click='deleteAccount()', :disabled='!password') {{ $t('deleteDo') }}
         .modal-header
-    .social-delete(v-if='!user.auth.local.email')
-      h4 {{ $t('deleteAccount') }}
-      .modal-body
-        p {{ $t('deleteSocialAccountText', {magicWord: 'DELETE'}) }}
-        br
-        .row
-          .col-md-6
-            input.form-control(type='text', v-model='password')
-      .modal-footer
-        button.btn.btn-secondary(@click='close()') {{ $t('neverMind') }}
-        button.btn.btn-danger(:disabled='!password', @click='deleteAccount()') {{ $t('deleteDo') }}
 </template>
 
 <script>
diff --git a/website/client/components/settings/notifications.vue b/website/client/components/settings/notifications.vue
index b92f6de0e..fc0b22c24 100644
--- a/website/client/components/settings/notifications.vue
+++ b/website/client/components/settings/notifications.vue
@@ -3,14 +3,6 @@
   .col-12
     h1 {{ $t('notifications') }}
   .col-12
-    .checkbox
-      label
-        input(type='checkbox', v-model='user.preferences.pushNotifications.unsubscribeFromAll',
-        @change='set("pushNotifications", "unsubscribeFromAll")')
-        span {{ $t('unsubscribeAllPush') }}
-
-    br
-
     .checkbox
       label
         input(type='checkbox', v-model='user.preferences.emailNotifications.unsubscribeFromAll',
@@ -24,17 +16,12 @@
       td
       th
         span {{ $t('email') }}
-      th
-        span {{ $t('push') }}
     tr(v-for='notification in notificationsIds')
       td
         span {{ $t(notification) }}
       td
         input(type='checkbox', v-model='user.preferences.emailNotifications[notification]',
           @change='set("emailNotifications", notification)')
-      td
-        input(type='checkbox', v-model='user.preferences.pushNotifications[notification]',
-          @change='set("pushNotifications", notification)')
         hr
 </template>
 
diff --git a/website/client/components/settings/site.vue b/website/client/components/settings/site.vue
index 5cddf7bc3..eb9e36888 100644
--- a/website/client/components/settings/site.vue
+++ b/website/client/components/settings/site.vue
@@ -109,12 +109,6 @@
       h2 {{ $t('registration') }}
       .panel-body
         div
-          ul.list-inline
-            li(v-for='network in SOCIAL_AUTH_NETWORKS')
-              button.btn.btn-primary.mb-2(v-if='!user.auth[network.key].id', @click='socialAuth(network.key, user)') {{ $t('registerWithSocial', {network: network.name}) }}
-              button.btn.btn-primary.mb-2(disabled='disabled', v-if='!hasBackupAuthOption(network.key) && user.auth[network.key].id') {{ $t('registeredWithSocial', {network: network.name}) }}
-              button.btn.btn-danger(@click='deleteSocialAuth(network)', v-if='hasBackupAuthOption(network.key) && user.auth[network.key].id') {{ $t('detachSocial', {network: network.name}) }}
-          hr
           div(v-if='!user.auth.local.username')
             p {{ $t('addLocalAuth') }}
             p {{ $t('usernameLimitations') }}
@@ -184,7 +178,6 @@
 </style>
 
 <script>
-import hello from 'hellojs';
 import moment from 'moment';
 import axios from 'axios';
 import { mapState } from 'client/libs/store';
@@ -192,7 +185,6 @@ import { mapState } from 'client/libs/store';
 import restoreModal from './restoreModal';
 import resetModal from './resetModal';
 import deleteModal from './deleteModal';
-import { SUPPORTED_SOCIAL_NETWORKS } from '../../../common/script/constants';
 import changeClass from  '../../../common/script/ops/changeClass';
 import notificationsMixin from '../../mixins/notifications';
 // @TODO: this needs our window.env fix
@@ -218,7 +210,6 @@ export default {
     }
 
     return {
-      SOCIAL_AUTH_NETWORKS: [],
       party: {},
       // Made available by the server as a script
       availableFormats: ['MM/dd/yyyy', 'dd/MM/yyyy', 'yyyy/MM/dd'],
@@ -236,16 +227,9 @@ export default {
     };
   },
   mounted () {
-    this.SOCIAL_AUTH_NETWORKS = SUPPORTED_SOCIAL_NETWORKS;
     // @TODO: We may need to request the party here
     this.party = this.$store.state.party;
     this.newDayStart = this.user.preferences.dayStart;
-    hello.init({
-      facebook: process.env.FACEBOOK_KEY, // eslint-disable-line no-process-env
-      google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line no-process-env
-    }, {
-      redirect_uri: '', // eslint-disable-line
-    });
   },
   computed: {
     ...mapState({
@@ -303,19 +287,6 @@ export default {
     showBailey () {
       this.$root.$emit('bv::show::modal', 'new-stuff');
     },
-    hasBackupAuthOption (networkKeyToCheck) {
-      if (this.user.auth.local.username) {
-        return true;
-      }
-
-      return find(this.SOCIAL_AUTH_NETWORKS, (network) => {
-        if (network.key !== networkKeyToCheck) {
-          if (this.user.auth.hasOwnProperty(network.key)) {
-            return this.user.auth[network.key].id;
-          }
-        }
-      });
-    },
     calculateNextCron () {
       let nextCron = moment().hours(this.newDayStart).minutes(0).seconds(0).milliseconds(0);
 
@@ -361,19 +332,6 @@ export default {
     openDeleteModal () {
       this.$root.$emit('bv::show::modal', 'delete');
     },
-    async deleteSocialAuth (network) {
-      await axios.delete(`/api/v3/user/auth/social/${network.key}`);
-      this.text(this.$t('detachedSocial', {network: network.name}));
-    },
-    async socialAuth (network) {
-      let auth = await hello(network).login({scope: 'email'});
-
-      await this.$store.dispatch('auth:socialAuth', {
-        auth,
-      });
-
-      window.location.href = '/';
-    },
     async changeClassForUser (confirmationNeeded) {
       if (confirmationNeeded && !confirm(this.$t('changeClassConfirmCost'))) return;
       try {
diff --git a/website/client/components/settings/subscription.vue b/website/client/components/settings/subscription.vue
index e086f99f5..501203d6a 100644
--- a/website/client/components/settings/subscription.vue
+++ b/website/client/components/settings/subscription.vue
@@ -36,9 +36,6 @@
             h4 {{ $t('subscribed') }}
             p(v-if='hasPlan && !hasGroupPlan') {{ $t('purchasedPlanId', purchasedPlanIdInfo) }}
             p(v-if='hasGroupPlan') {{ $t('youHaveGroupPlan') }}
-          tr(v-if='user.purchased.plan.extraMonths'): td
-            span.glyphicon.glyphicon-credit-card
-            | &nbsp; {{ $t('purchasedPlanExtraMonths', purchasedPlanExtraMonthsDetails) }}
           tr(v-if='hasConsecutiveSubscription'): td
             span.glyphicon.glyphicon-forward
             | &nbsp; {{ $t('consecutiveSubscription') }}
@@ -67,21 +64,9 @@
               button.btn.btn-primary(type='button', @click='applyCoupon(subscription.coupon)') {{ $t("apply") }}
 
         div(v-if='hasSubscription')
-          .btn.btn-primary(v-if='canEditCardDetails', @click='showStripeEdit()') {{ $t('subUpdateCard') }}
           .btn.btn-sm.btn-danger(v-if='canCancelSubscription && !loading', @click='cancelSubscription()') {{ $t('cancelSub') }}
           small(v-if='!canCancelSubscription && !hasCanceledSubscription', v-html='getCancelSubInfo()')
 
-        .subscribe-pay(v-if='!hasSubscription || hasCanceledSubscription')
-          h3 {{ $t('subscribeUsing') }}
-          .row.text-center
-            .col-md-4
-              button.purchase.btn.btn-primary(@click='showStripe({subscription:subscription.key, coupon:subscription.coupon})', :disabled='!subscription.key') {{ $t('card') }}
-            .col-md-4
-              a.purchase(:href='paypalPurchaseLink', :disabled='!subscription.key', target='_blank')
-                img(src='https://www.paypalobjects.com/webstatic/en_US/i/buttons/pp-acceptance-small.png', :alt="$t('paypal')")
-            .col-md-4
-              a.btn.btn-secondary.purchase(@click="payWithAmazon()")
-                img(src='https://payments.amazon.com/gp/cba/button', :alt="$t('amazonPayments')")
     .row
       .col-6
         h2 {{ $t('giftSubscription') }}
@@ -112,11 +97,10 @@ import { mapState } from 'client/libs/store';
 
 import subscriptionBlocks from '../../../common/script/content/subscriptionBlocks';
 import planGemLimits from '../../../common/script/libs/planGemLimits';
-import paymentsMixin from '../../mixins/payments';
 import notificationsMixin from '../../mixins/notifications';
 
 export default {
-  mixins: [paymentsMixin, notificationsMixin],
+  mixins: [notificationsMixin],
   data () {
     return {
       loading: false,
@@ -127,14 +111,7 @@ export default {
       subscription: {
         key: 'basic_earned',
       },
-      // @TODO: Remove the need for this or move it to mixin
-      amazonPayments: {},
       paymentMethods: {
-        AMAZON_PAYMENTS: 'Amazon Payments',
-        STRIPE: 'Stripe',
-        GOOGLE: 'Google',
-        APPLE: 'Apple',
-        PAYPAL: 'Paypal',
         GIFT: 'Gift',
       },
     };
@@ -171,10 +148,7 @@ export default {
       return subscriptionBlocks;
     },
     canEditCardDetails () {
-      return Boolean(
-        !this.hasCanceledSubscription &&
-        this.user.purchased.plan.paymentMethod === this.paymentMethods.STRIPE
-      );
+      return Boolean(!this.hasCanceledSubscription);
     },
     hasSubscription () {
       return Boolean(this.user.purchased.plan.customerId);
@@ -232,28 +206,14 @@ export default {
     },
     canCancelSubscription () {
       return (
-        this.user.purchased.plan.paymentMethod !== this.paymentMethods.GOOGLE &&
-        this.user.purchased.plan.paymentMethod !== this.paymentMethods.APPLE &&
         !this.hasCanceledSubscription &&
         !this.hasGroupPlan
       );
     },
   },
   methods: {
-    payWithAmazon () {
-      this.amazonPaymentsInit({
-        type: 'subscription',
-        subscription: this.subscription.key,
-        coupon: this.subscription.coupon,
-      });
-    },
     async applyCoupon (coupon) {
-      const response = await axios.post(`/api/v3/coupons/validate/${coupon}`);
-
-      if (!response.data.data.valid) return;
-
-      this.text('Coupon applied!');
-      this.subscription.key = 'google_6mo';
+      await axios.post(`/api/v3/coupons/validate/${coupon}`);
     },
     getCancelSubInfo () {
       let payMethod = this.user.purchased.plan.paymentMethod || '';
diff --git a/website/client/components/shops/buyModal.vue b/website/client/components/shops/buyModal.vue
index f9fca3908..0465becff 100644
--- a/website/client/components/shops/buyModal.vue
+++ b/website/client/components/shops/buyModal.vue
@@ -256,7 +256,6 @@
 </style>
 
 <script>
-  import * as Analytics from 'client/libs/analytics';
   import spellsMixin from 'client/mixins/spells';
   import planGemLimits from 'common/script/libs/planGemLimits';
 
@@ -397,14 +396,6 @@
         this.hideDialog();
       },
       purchaseGems () {
-        if (this.item.key === 'rebirth_orb') {
-          Analytics.track({
-            hitType: 'event',
-            eventCategory: 'button',
-            eventAction: 'click',
-            eventLabel: 'Gems > Rebirth',
-          });
-        }
         this.$root.$emit('bv::show::modal', 'buy-gems');
       },
       togglePinned () {
diff --git a/website/client/components/static/app.vue b/website/client/components/static/app.vue
index cfcf1fa02..4dd4105b5 100644
--- a/website/client/components/static/app.vue
+++ b/website/client/components/static/app.vue
@@ -1,11 +1,3 @@
 <template lang="pug">
   .container-fluid.text-center
-    .row
-      .col-md-6.offset-3
-        h1 {{ $t('checkOutMobileApps') }}
-        .promo_habitica(style='border-radius:25px;margin:auto;margin-bottom:30px')
-
-        a(href='https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-AC-global-none-all-co-pr-py-PartBadges-Oct1515-1&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-AC-global-none-all-co-pr-py-PartBadges-Oct1515-1')
-          img(alt='Get it on Google Play', src='https://play.google.com/intl/en_us/badges/images/apps/en-play-badge.png', style='width:139px;height:45px;image-rendering:auto;vertical-align:top')
-        a(href='https://geo.itunes.apple.com/us/app/habitica/id994882113?mt=8', style='display:inline-block;overflow:hidden;background:url(http://linkmaker.itunes.apple.com/images/badges/en-us/badge_appstore-lrg.svg#svgView) no-repeat;background-size:100%;width:152px;height:45px;margin-left:20px;image-rendering:auto')
 </template>
diff --git a/website/client/components/static/header.vue b/website/client/components/static/header.vue
index 667172b64..68d62bd34 100644
--- a/website/client/components/static/header.vue
+++ b/website/client/components/static/header.vue
@@ -21,8 +21,6 @@
       ul.navbar-nav.mr-auto(v-else)
         router-link.nav-item(tag='li', to='/register')
           a.nav-link(v-once) {{ $t('getStarted') }}
-        li.nav-item
-          a.nav-link(@click='scrollToMobileApp') {{ $t('mobileApps') }}
         li.nav-item.dropdown
           a.nav-link.dropdown-toggle(v-once) {{ $t('learnMore') }}
           .dropdown-menu
@@ -154,7 +152,6 @@
 <script>
 import logo from 'assets/svg/logo.svg';
 import purpleLogo from 'assets/svg/purple-logo.svg';
-import * as Analytics from 'client/libs/analytics';
 
 export default {
   data () {
@@ -177,21 +174,8 @@ export default {
         return;
       }
 
-      // @TODO duplicate of code in home.vue
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Play',
-      });
-
       this.$router.push('/register');
     },
-    scrollToMobileApp () {
-      document.querySelector('#level-up-anywhere').scrollIntoView({
-        behavior: 'smooth',
-      });
-    },
   },
 };
 </script>
diff --git a/website/client/components/static/home.vue b/website/client/components/static/home.vue
index d51688366..a3426dedd 100644
--- a/website/client/components/static/home.vue
+++ b/website/client/components/static/home.vue
@@ -13,15 +13,6 @@
             p.section-main {{$t('timeToGetThingsDone', {userCountInMillions})}}
           .col-12.col-sm-6.col-md-6.col-lg-6
             h3.text-center {{$t('singUpForFree')}}
-            div.text-center
-              button.social-button(@click='socialAuth("facebook")')
-                .svg-icon.social-icon(v-html="icons.facebookIcon")
-                span {{$t('signUpWithSocial', {social: 'Facebook'})}}
-              button.social-button(@click='socialAuth("google")')
-                .svg-icon.social-icon(v-html="icons.googleIcon")
-                span {{$t('signUpWithSocial', {social: 'Google'})}}
-            .strike
-              span {{$t('or')}}
             .form(@keyup.enter="register()")
               p.form-text {{$t('usernameLimitations')}}
               input.form-control(type='text', placeholder='Login Name', v-model='username', :class='{"input-valid": username.length > 3}')
@@ -80,19 +71,6 @@
       .container-fluid
         .pixel-horizontal-2.svg-icon(v-html='icons.pixelHorizontal2')
 
-    #level-up-anywhere.purple-3
-      .container
-        .row
-          .col-12.col-sm-6.col-md-6.col-lg-6
-            .iphones
-          .col-12.col-sm-6.col-md-6.col-lg-6.text-column
-            h2 {{ $t('levelUpAnywhere') }}
-            p {{ $t('levelUpAnywhereDesc') }}
-            a.app.svg-icon(v-html='icons.googlePlay', href='https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica', target='_blank')
-            a.app.svg-icon(v-html='icons.iosAppStore', href='https://itunes.apple.com/us/app/habitica-gamified-task-manager/id994882113?mt=8', target='_blank')
-      .container-fluid
-        .pixel-horizontal-3.svg-icon(v-html='icons.pixelHorizontal3')
-
     #call-to-action.purple-4
       .container.featured
         .row.text-center
@@ -212,37 +190,6 @@
       font-size: 24px;
     }
 
-    .social-button {
-      border-radius: 2px;
-      border: solid 2px #bda8ff;
-      width: 48%;
-      min-height: 40px;
-      padding: .5em;
-      background: transparent;
-      margin-right: .5em;
-      color: #bda8ff;
-      transition: .5s;
-
-      span {
-        transition: none;
-      }
-    }
-
-    .social-button:hover {
-      cursor: pointer;
-      border-color: #fff;
-      color: #fff;
-    }
-
-    .social-icon {
-      margin-right: 1em;
-      width: 18px;
-      height: 18px;
-      display: inline-block;
-      vertical-align: top;
-      margin-top: .2em;
-    }
-
     .strike {
       display: block;
       text-align: center;
@@ -373,29 +320,6 @@
     }
   }
 
-  #level-up-anywhere {
-    .app {
-      display: inline-block;
-      width: 135px;
-      margin-right: .5em;
-    }
-
-    .app {
-      cursor: pointer;
-    }
-
-    .iphones {
-      width: 436px;
-      height: 520px;
-      background-size: 100%;
-      background-image: url('~assets/images/home/mobile-preview@3x.png');
-    }
-
-    .text-column {
-      padding-top: 9em;
-    }
-  }
-
   #call-to-action {
     .row {
       margin-top: 1em;
@@ -523,16 +447,9 @@
 </style>
 
 <script>
-  import hello from 'hellojs';
-  import googlePlay from 'assets/images/home/google-play-badge.svg';
-  import iosAppStore from 'assets/images/home/ios-app-store.svg';
-  import iphones from 'assets/images/home/iphones.svg';
   import spacer from 'assets/images/home/spacer.svg';
   import pixelHorizontal from 'assets/images/home/pixel-horizontal.svg';
   import pixelHorizontal2 from 'assets/images/home/pixel-horizontal-2.svg';
-  import pixelHorizontal3 from 'assets/images/home/pixel-horizontal-3.svg';
-  import facebookSquareIcon from 'assets/svg/facebook-square.svg';
-  import googleIcon from 'assets/svg/google.svg';
   import cnet from 'assets/svg/cnet.svg';
   import fastCompany from 'assets/svg/fast-company.svg';
   import discover from 'assets/images/home/discover.svg';
@@ -541,21 +458,14 @@
   import lifehacker from 'assets/images/home/lifehacker.svg';
   import makeuseof from 'assets/images/home/make-use-of.svg';
   import thenewyorktimes from 'assets/images/home/the-new-york-times.svg';
-  import * as Analytics from 'client/libs/analytics';
 
   export default {
     data () {
       return {
         icons: Object.freeze({
-          googlePlay,
-          iosAppStore,
-          iphones,
           spacer,
           pixelHorizontal,
           pixelHorizontal2,
-          pixelHorizontal3,
-          facebookIcon: facebookSquareIcon,
-          googleIcon,
           cnet,
           fastCompany,
           discover,
@@ -572,20 +482,6 @@
         email: '',
       };
     },
-    mounted () {
-      Analytics.track({
-        hitType: 'pageview',
-        eventCategory: 'page',
-        eventAction: 'landing page',
-        page: '/static/home',
-      });
-
-      hello.init({
-        facebook: process.env.FACEBOOK_KEY, // eslint-disable-line
-        // windows: WINDOWS_CLIENT_ID,
-        google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line
-      });
-    },
     computed: {
       emailValid () {
         if (this.email.length <= 3) return false;
@@ -644,35 +540,8 @@
         window.location.href = redirectTo;
       },
       playButtonClick () {
-        Analytics.track({
-          hitType: 'event',
-          eventCategory: 'button',
-          eventAction: 'click',
-          eventLabel: 'Play',
-        });
         this.$router.push('/register');
       },
-      // @TODO: Abstract hello in to action or lib
-      async socialAuth (network) {
-        try {
-          await hello(network).logout();
-        } catch (e) {} // eslint-disable-line
-
-
-        const url = window.location.href;
-
-        let auth = await hello(network).login({
-          scope: 'email',
-          // explicitly pass the redirect url or it might redirect to /home
-          redirect_uri: url, // eslint-disable-line camelcase
-        });
-
-        await this.$store.dispatch('auth:socialAuth', {
-          auth,
-        });
-
-        window.location.href = '/';
-      },
     },
   };
 </script>
diff --git a/website/client/components/static/staticWrapper.vue b/website/client/components/static/staticWrapper.vue
index 34ff15ca5..e5dd03e02 100644
--- a/website/client/components/static/staticWrapper.vue
+++ b/website/client/components/static/staticWrapper.vue
@@ -90,7 +90,7 @@ div
       color: #bda8ff;
     }
 
-    .social-circle, .btn-contribute {
+    .btn-contribute {
       background: #36205d;
       color: #bda8ff;
 
diff --git a/website/client/components/tasks/task.vue b/website/client/components/tasks/task.vue
index b64d7b7c7..ab831a8c9 100644
--- a/website/client/components/tasks/task.vue
+++ b/website/client/components/tasks/task.vue
@@ -492,7 +492,6 @@ import moment from 'moment';
 import axios from 'axios';
 import scoreTask from 'common/script/ops/scoreTask';
 import Vue from 'vue';
-import * as Analytics from 'client/libs/analytics';
 
 import positiveIcon from 'assets/svg/positive.svg';
 import negativeIcon from 'assets/svg/negative.svg';
@@ -708,7 +707,6 @@ export default {
 
       if (task.group.approval.required) task.group.approval.requested = true;
 
-      Analytics.updateUser();
       const response = await axios.post(`/api/v3/tasks/${task._id}/score/${direction}`);
       const tmp = response.data.data._tmp || {}; // used to notify drops, critical hits and other bonuses
       const crit = tmp.crit;
diff --git a/website/client/components/userMenu/profile.vue b/website/client/components/userMenu/profile.vue
index 0d6aa3b1c..bfb40a095 100644
--- a/website/client/components/userMenu/profile.vue
+++ b/website/client/components/userMenu/profile.vue
@@ -75,14 +75,12 @@ div
               .progress
                 .progress-bar(role='progressbar', :aria-valuenow='incentivesProgress', aria-valuemin='0', aria-valuemax='100', :style='{width: incentivesProgress + "%"}')
                   span.sr-only {{ incentivesProgress }}% {{$t('complete')}}
-          // @TODO: Implement in V2 .social
 
       .row(v-if='editing')
         h1 {{$t('editProfile')}}
         .col-12
           .alert.alert-info.alert-sm(v-html='$t("communityGuidelinesWarning", managerEmail)')
 
-          // TODO use photo-upload instead: https://groups.google.com/forum/?fromgroups=#!topic/derbyjs/xMmADvxBOak
           .form-group
             label {{ $t('displayName') }}
             input.form-control(type='text', :placeholder="$t('fullName')", v-model='editingProfile.name')
@@ -93,15 +91,6 @@ div
             label {{ $t('about') }}
             textarea.form-control(rows=5, :placeholder="$t('displayBlurbPlaceholder')", v-model='editingProfile.blurb')
             // include ../../shared/formatting-help
-          //- .form-group
-          //-   label Facebook
-          //-   input.form-control(type='text', placeholder="Paste your link here", v-model='editingProfile.facebook')
-          //- .form-group
-          //-   label Instagram
-          //-   input.form-control(type='text', placeholder="Paste your link here", v-model='editingProfile.instagram')
-          //- .form-group
-          //-   label Twitter
-          //-   input.form-control(type='text', placeholder="Paste your link here", v-model='editingProfile.twitter')
 
         .col-12.text-center
           button.btn.btn-primary(@click='save()') {{ $t("save") }}
@@ -310,7 +299,6 @@ import { mapState } from 'client/libs/store';
 import cloneDeep from 'lodash/cloneDeep';
 
 import MemberDetails from '../memberDetails';
-import sendGemsModal from 'client/components/payments/sendGemsModal';
 import markdown from 'client/directives/markdown';
 import achievementsLib from '../../../common/script/libs/achievements';
 // @TODO: EMAILS.COMMUNITY_MANAGER_EMAIL
@@ -335,7 +323,6 @@ export default {
     markdown,
   },
   components: {
-    sendGemsModal,
     MemberDetails,
     profileStats,
   },
diff --git a/website/client/index.html b/website/client/index.html
index f4fc23215..9271fce67 100644
--- a/website/client/index.html
+++ b/website/client/index.html
@@ -6,7 +6,7 @@
     <title>Habitica - Gamify Your Life</title>
     <meta name="description" content="Habitica is a free habit and productivity app that treats your real life like a game. Habitica can help you achieve your goals to become healthy and happy.">
     <meta name="keywords" content="Habits,Goals,Todo,Gamification,Health,Fitness,School,Work">
-    <link href="https://fonts.googleapis.com/css?family=Roboto+Condensed:400,400i,700,700i|Roboto:400,400i,700,700i" rel="stylesheet">
+    <link href="/static/fonts/fonts.css" rel="stylesheet">
     <link rel="shortcut icon" sizes="48x48" href="/static/icons/favicon.ico">
     <link rel="shortcut icon" sizes="192x192" href="/static/icons/favicon_192x192.png">
     <link rel="mask-icon" href="/static/icons/favicon.ico">
@@ -22,7 +22,6 @@
     <div id="app"></div>
     <!-- built files will be auto injected -->
 
-    <script type="text/javascript" src="//cloudfront.loggly.com/js/loggly.tracker-latest.min.js" async></script>
     <!-- Translations -->
     <script type='text/javascript' src='/api/v3/i18n/browser-script'></script>
   </body>
diff --git a/website/client/main.js b/website/client/main.js
index 7e86bb5d3..5180aded1 100644
--- a/website/client/main.js
+++ b/website/client/main.js
@@ -1,9 +1,5 @@
 import Vue from 'vue';
 import AppComponent from './app';
-import {
-  setup as setupAnalytics,
-} from 'client/libs/analytics';
-import { setUpLogging } from 'client/libs/logging';
 import router from './router';
 import getStore from './store';
 import StoreModule from './libs/store';
@@ -29,8 +25,6 @@ Vue.use(i18n, {i18nData: window && window['habitica-i18n']});
 Vue.use(StoreModule);
 Vue.use(BootstrapVue);
 
-setUpLogging();
-setupAnalytics(); // just create queues for analytics, no scripts loaded at this time
 const store = getStore();
 
 export default new Vue({
diff --git a/website/client/mixins/guide.js b/website/client/mixins/guide.js
index 0d5029fb7..f2e502586 100644
--- a/website/client/mixins/guide.js
+++ b/website/client/mixins/guide.js
@@ -1,6 +1,5 @@
 import times from 'lodash/times';
 import Intro from 'intro.js/';
-import * as Analytics from 'client/libs/analytics';
 
 export default {
   data () {
@@ -136,12 +135,6 @@ export default {
         case 'equipment':  return this.goto('equipment', 0);
       }
     },
-    hoyo (user) {
-      // @TODO: What is was the timeout for?
-      // @TODO move to analytics
-      window.amplitude.setUserId(user._id);
-      window.ga('set', {userId: user._id});
-    },
     goto (chapter, page, force) {
       if (chapter === 'intro' && this.user.flags.welcomed !== true)  {
         // @TODO: Add dispatch User.set({'flags.welcomed': true});
@@ -158,15 +151,6 @@ export default {
         opts.steps  = opts.steps.concat(this.chapters[chapter][p]);
       });
 
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'behavior',
-        eventAction: 'tutorial',
-        eventLabel: `${chapter}-web`,
-        eventValue: page + 1,
-        complete: true,
-      });
-
       // @TODO: Do we always need to initialize here?
       let intro = Intro.introJs();
       intro.setOptions({
@@ -197,22 +181,11 @@ export default {
       //     //   message: this.$t('checkinEarned'),
       //     //   nextRewardAt: 1,
       //     // };
-      //     // @TODO: Notification.showLoginIncentive(this.user, rewardData, Social.loadWidgets);
       //   }
 
       // Mark tour complete
       ups[`flags.tour.${chapter}`] = -2; // @TODO: Move magic numbers to enum
 
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'behavior',
-        eventAction: 'tutorial',
-        eventLabel: `${chapter}-web`,
-        eventValue: lastKnownStep,
-        complete: true,
-      });
-      // }
-
       this.$store.dispatch('user:set', ups);
     },
   },
diff --git a/website/client/router.js b/website/client/router.js
index 05c41e65c..b06fe97a4 100644
--- a/website/client/router.js
+++ b/website/client/router.js
@@ -1,7 +1,6 @@
 import Vue from 'vue';
 import VueRouter from 'vue-router';
 import getStore from 'client/store';
-// import * as Analytics from 'client/libs/analytics';
 
 // import EmptyView from './components/emptyView';
 
@@ -342,16 +341,6 @@ router.beforeEach(function routerGuard (to, from, next) {
     });
   }
 
-
-  /*
-  Analytics.track({
-    hitType: 'pageview',
-    eventCategory: 'navigation',
-    eventAction: 'navigate',
-    page: to.name || to.path,
-  });
-  */
-
   next();
 });
 
diff --git a/website/client/store/actions/auth.js b/website/client/store/actions/auth.js
index 5bbc2c9f5..176e9b934 100644
--- a/website/client/store/actions/auth.js
+++ b/website/client/store/actions/auth.js
@@ -1,7 +1,6 @@
 import axios from 'axios';
 
 const LOCALSTORAGE_AUTH_KEY = 'habit-mobile-settings';
-const LOCALSTORAGE_SOCIAL_AUTH_KEY = 'hello'; // Used by hello.js for social auth
 
 export async function register (store, params) {
   let url = '/api/v3/user/auth/local/register';
@@ -46,27 +45,7 @@ export async function login (store, params) {
   localStorage.setItem(LOCALSTORAGE_AUTH_KEY, userLocalData);
 }
 
-export async function socialAuth (store, params) {
-  let url = '/api/v3/user/auth/social';
-  let result = await axios.post(url, {
-    network: params.auth.network,
-    authResponse: params.auth.authResponse,
-  });
-
-  let user = result.data.data;
-
-  let userLocalData = JSON.stringify({
-    auth: {
-      apiId: user.id,
-      apiToken: user.apiToken,
-    },
-  });
-
-  localStorage.setItem(LOCALSTORAGE_AUTH_KEY, userLocalData);
-}
-
 export function logout () {
   localStorage.removeItem(LOCALSTORAGE_AUTH_KEY);
-  localStorage.removeItem(LOCALSTORAGE_SOCIAL_AUTH_KEY);
   window.location.href = '/logout';
 }
diff --git a/website/client/store/actions/chat.js b/website/client/store/actions/chat.js
index 5bb584093..6bfdc6402 100644
--- a/website/client/store/actions/chat.js
+++ b/website/client/store/actions/chat.js
@@ -1,5 +1,4 @@
 import axios from 'axios';
-import * as Analytics from 'client/libs/analytics';
 
 export async function getChat (store, payload) {
   let response = await axios.get(`/api/v3/groups/${payload.groupId}/chat`);
@@ -16,32 +15,6 @@ export async function postChat (store, payload) {
     url += `?previousMsg=${payload.previousMsg}`;
   }
 
-  if (group.type === 'party') {
-    Analytics.updateUser({
-      partyID: group.id,
-      partySize: group.memberCount,
-    });
-  }
-
-  if (group.privacy === 'public') {
-    Analytics.track({
-      hitType: 'event',
-      eventCategory: 'behavior',
-      eventAction: 'group chat',
-      groupType: group.type,
-      privacy: group.privacy,
-      groupName: group.name,
-    });
-  } else {
-    Analytics.track({
-      hitType: 'event',
-      eventCategory: 'behavior',
-      eventAction: 'group chat',
-      groupType: group.type,
-      privacy: group.privacy,
-    });
-  }
-
   let response = await axios.post(url, {
     message: payload.message,
   });
diff --git a/website/client/store/actions/guilds.js b/website/client/store/actions/guilds.js
index 564030e55..7bb5e1645 100644
--- a/website/client/store/actions/guilds.js
+++ b/website/client/store/actions/guilds.js
@@ -1,7 +1,6 @@
 import axios from 'axios';
 import omit from 'lodash/omit';
 import findIndex from 'lodash/findIndex';
-import * as Analytics from 'client/libs/analytics';
 
 export async function getPublicGuilds (store, payload) {
   let params = {
@@ -74,8 +73,6 @@ export async function join (store, payload) {
     if (invitationI !== -1) invitations.parties.splice(invitationI, 1);
 
     user.party._id = groupId;
-
-    Analytics.updateUser({partyID: groupId});
   }
 
   return response.data.data;
diff --git a/website/client/store/actions/quests.js b/website/client/store/actions/quests.js
index ff13c36ab..a9cdfbb2c 100644
--- a/website/client/store/actions/quests.js
+++ b/website/client/store/actions/quests.js
@@ -1,25 +1,9 @@
 import axios from 'axios';
-import * as Analytics from 'client/libs/analytics';
 
 // export async function initQuest (store) {
 // }
 
 export async function sendAction (store, payload) {
-  // @TODO: Maybe move this to server
-  let partyData = {
-    partyID: store.state.user.data.party._id,
-    partySize: store.state.partyMembers.data.length,
-  };
-
-  if (store.state.party && store.state.party.data) {
-    partyData = {
-      partyID: store.state.party.data._id,
-      partySize: store.state.party.data.memberCount,
-    };
-  }
-
-  Analytics.updateUser(partyData);
-
   let response = await axios.post(`/api/v3/groups/${payload.groupId}/${payload.action}`);
 
   // @TODO: Update user?
diff --git a/website/client/store/index.js b/website/client/store/index.js
index b47fce6de..4f33daf2a 100644
--- a/website/client/store/index.js
+++ b/website/client/store/index.js
@@ -51,7 +51,6 @@ export default function () {
       title: 'Habitica',
       isUserLoggedIn,
       isUserLoaded: false, // Means the user and the user's tasks are ready
-      isAmazonReady: false, // Whether the Amazon Payments lib can be used
       user: asyncResourceFactory(),
       credentials: isUserLoggedIn ? {
         API_ID: AUTH_SETTINGS.auth.apiId,
diff --git a/website/common/script/constants.js b/website/common/script/constants.js
index 1bc330846..ff0e5f1d6 100644
--- a/website/common/script/constants.js
+++ b/website/common/script/constants.js
@@ -10,11 +10,6 @@ export const MAX_SUMMARY_SIZE_FOR_GUILDS = 250;
 export const MAX_SUMMARY_SIZE_FOR_CHALLENGES = 250;
 export const MIN_SHORTNAME_SIZE_FOR_CHALLENGES = 3;
 
-export const SUPPORTED_SOCIAL_NETWORKS = [
-  {key: 'facebook', name: 'Facebook'},
-  {key: 'google', name: 'Google'},
-];
-
 export const GUILDS_PER_PAGE = 30; // number of guilds to return per page when using pagination
 
 export const PARTY_LIMIT_MEMBERS = 30;
diff --git a/website/common/script/content/spells.js b/website/common/script/content/spells.js
index d04bddd8e..62ebaed03 100644
--- a/website/common/script/content/spells.js
+++ b/website/common/script/content/spells.js
@@ -44,13 +44,13 @@ spells.wizard = {
     lvl: 11,
     target: 'task',
     notes: t('spellWizardFireballNotes'),
-    cast (user, target, req) {
+    cast (user, target) {
       let bonus = statsComputed(user).int * crit.crit(user, 'per');
       bonus *= Math.ceil((target.value < 0 ? 1 : target.value + 1) * 0.075);
       user.stats.exp += diminishingReturns(bonus, 75);
       if (!user.party.quest.progress.up) user.party.quest.progress.up = 0;
       user.party.quest.progress.up += Math.ceil(statsComputed(user).int * 0.1);
-      updateStats(user, user.stats, req);
+      updateStats(user, user.stats);
     },
   },
   mpheal: { // Ethereal Surge
@@ -168,12 +168,12 @@ spells.rogue = {
     lvl: 12,
     target: 'task',
     notes: t('spellRogueBackStabNotes'),
-    cast (user, target, req) {
+    cast (user, target) {
       let _crit = crit.crit(user, 'str', 0.3);
       let bonus = calculateBonus(target.value, statsComputed(user).str, _crit);
       user.stats.exp += diminishingReturns(bonus, 75, 50);
       user.stats.gp += diminishingReturns(bonus, 18, 75);
-      updateStats(user, user.stats, req);
+      updateStats(user, user.stats);
     },
   },
   toolsOfTrade: { // Tools of the Trade
diff --git a/website/common/script/content/subscriptionBlocks.js b/website/common/script/content/subscriptionBlocks.js
index f3131cb5a..719a69382 100644
--- a/website/common/script/content/subscriptionBlocks.js
+++ b/website/common/script/content/subscriptionBlocks.js
@@ -20,14 +20,6 @@ let subscriptionBlocks = {
     months: 6,
     price: 30,
   },
-  google_6mo: {
-    target: 'user',
-    canSubscribe: true,
-    months: 6,
-    price: 24,
-    discount: true,
-    original: 30,
-  },
   basic_12mo: {
     target: 'user',
     canSubscribe: true,
@@ -39,7 +31,7 @@ let subscriptionBlocks = {
     canSubscribe: true,
     months: 1,
     price: 9,
-    quantity: 3, // Default quantity for Stripe - The same as having 3 user subscriptions
+    quantity: 3,
   },
   group_plan_auto: {
     target: 'user',
diff --git a/website/common/script/fns/randomDrop.js b/website/common/script/fns/randomDrop.js
index deaf0127b..26283710a 100644
--- a/website/common/script/fns/randomDrop.js
+++ b/website/common/script/fns/randomDrop.js
@@ -25,7 +25,7 @@ function trueRandom () {
   return Math.random();
 }
 
-module.exports = function randomDrop (user, options, req = {}, analytics) {
+module.exports = function randomDrop (user, options, req = {}) {
   let acceptableDrops;
   let drop;
   let dropMultiplier;
@@ -111,16 +111,6 @@ module.exports = function randomDrop (user, options, req = {}, analytics) {
       }, req.language);
     }
 
-    if (analytics) {
-      analytics.track('dropped item', {
-        uuid: user._id,
-        itemKey: drop.key,
-        acquireMethod: 'Drop',
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
-
     user._tmp.drop = drop;
     user.items.lastDrop.date = Number(new Date());
     user.items.lastDrop.count++;
diff --git a/website/common/script/fns/updateStats.js b/website/common/script/fns/updateStats.js
index cfe331015..6da0b50fe 100644
--- a/website/common/script/fns/updateStats.js
+++ b/website/common/script/fns/updateStats.js
@@ -6,7 +6,7 @@ import {
 import { toNextLevel } from '../statHelpers';
 import autoAllocate from './autoAllocate';
 
-module.exports = function updateStats (user, stats, req = {}, analytics) {
+module.exports = function updateStats (user, stats) {
   let allocatedStatPoints;
   let totalStatPoints;
   let experienceToNextLevel;
@@ -89,15 +89,6 @@ module.exports = function updateStats (user, stats, req = {}, analytics) {
         user.items.quests[k] = 0;
       user.items.quests[k]++;
       if (user.markModified) user.markModified('flags.levelDrops');
-      if (analytics) {
-        analytics.track('acquire item', {
-          uuid: user._id,
-          itemKey: k,
-          acquireMethod: 'Level Drop',
-          category: 'behavior',
-          headers: req.headers,
-        });
-      }
       user._tmp.drop = {
         type: 'Quest',
         key: k,
diff --git a/website/common/script/index.js b/website/common/script/index.js
index 57eaa890c..5a9e61a0a 100644
--- a/website/common/script/index.js
+++ b/website/common/script/index.js
@@ -26,7 +26,6 @@ import {
   MAX_SUMMARY_SIZE_FOR_GUILDS,
   MAX_SUMMARY_SIZE_FOR_CHALLENGES,
   MIN_SHORTNAME_SIZE_FOR_CHALLENGES,
-  SUPPORTED_SOCIAL_NETWORKS,
   GUILDS_PER_PAGE,
   PARTY_LIMIT_MEMBERS,
 } from './constants';
@@ -37,7 +36,6 @@ api.constants = {
   MAX_SUMMARY_SIZE_FOR_GUILDS,
   MAX_SUMMARY_SIZE_FOR_CHALLENGES,
   MIN_SHORTNAME_SIZE_FOR_CHALLENGES,
-  SUPPORTED_SOCIAL_NETWORKS,
   GUILDS_PER_PAGE,
   PARTY_LIMIT_MEMBERS,
 };
diff --git a/website/common/script/ops/buy/abstractBuyOperation.js b/website/common/script/ops/buy/abstractBuyOperation.js
index 9b0a2d9fe..eac44cfc8 100644
--- a/website/common/script/ops/buy/abstractBuyOperation.js
+++ b/website/common/script/ops/buy/abstractBuyOperation.js
@@ -4,19 +4,16 @@ import {
   NotImplementedError,
   BadRequest,
 } from '../../libs/errors';
-import _merge from 'lodash/merge';
 import _get from 'lodash/get';
 
 export class AbstractBuyOperation {
   /**
    * @param {User} user - the User-Object
    * @param {Request} req - the Request-Object
-   * @param {analytics} analytics
    */
-  constructor (user, req, analytics) {
+  constructor (user, req) {
     this.user = user;
     this.req = req || {};
-    this.analytics = analytics;
 
     let quantity = _get(req, 'quantity');
 
@@ -54,10 +51,6 @@ export class AbstractBuyOperation {
     throw new NotImplementedError('executeChanges');
   }
 
-  analyticsData () {
-    throw new NotImplementedError('sendToAnalytics');
-  }
-
   purchase () {
     if (!this.multiplePurchaseAllowed() && this.quantity > 1) {
       throw new NotAuthorized(this.i18n('messageNotAbleToBuyInBulk'));
@@ -67,37 +60,13 @@ export class AbstractBuyOperation {
 
     let resultObj = this.executeChanges(this.user, this.item, this.req);
 
-    if (this.analytics) {
-      this.sendToAnalytics(this.analyticsData());
-    }
-
     return resultObj;
   }
-
-  analyticsLabel () {
-    return 'acquire item';
-  }
-
-  sendToAnalytics (additionalData = {}) {
-    // spread-operator produces an "unexpected token" error
-    let analyticsData = _merge(additionalData, {
-      // ...additionalData,
-      uuid: this.user._id,
-      category: 'behavior',
-      headers: this.req.headers,
-    });
-
-    if (this.multiplePurchaseAllowed()) {
-      analyticsData.quantityPurchased = this.quantity;
-    }
-
-    this.analytics.track(this.analyticsLabel(), analyticsData);
-  }
 }
 
 export class AbstractGoldItemOperation extends AbstractBuyOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   getItemValue (item) {
@@ -128,13 +97,4 @@ export class AbstractGoldItemOperation extends AbstractBuyOperation {
 
     user.stats.gp -= itemValue * this.quantity;
   }
-
-  analyticsData () {
-    return {
-      itemKey: this.getIemKey(this.item),
-      itemType: 'Market',
-      acquireMethod: 'Gold',
-      goldCost: this.getItemValue(this.item),
-    };
-  }
 }
diff --git a/website/common/script/ops/buy/buy.js b/website/common/script/ops/buy/buy.js
index f0ec31e5f..91d5a7826 100644
--- a/website/common/script/ops/buy/buy.js
+++ b/website/common/script/ops/buy/buy.js
@@ -18,7 +18,7 @@ import {BuyGemOperation} from './buyGem';
 
 // @TODO: when we are sure buy is the only function used, let's move the buy files to a folder
 
-module.exports = function buy (user, req = {}, analytics) {
+module.exports = function buy (user, req = {}) {
   let key = get(req, 'params.key');
   if (!key) throw new BadRequest(i18n.t('missingKeyParam', req.language));
 
@@ -32,22 +32,22 @@ module.exports = function buy (user, req = {}, analytics) {
 
   switch (type) {
     case 'armoire': {
-      const buyOp = new BuyArmoireOperation(user, req, analytics);
+      const buyOp = new BuyArmoireOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'mystery':
-      buyRes = buyMysterySet(user, req, analytics);
+      buyRes = buyMysterySet(user, req);
       break;
     case 'potion': {
-      const buyOp = new BuyHealthPotionOperation(user, req, analytics);
+      const buyOp = new BuyHealthPotionOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'gems': {
-      const buyOp = new BuyGemOperation(user, req, analytics);
+      const buyOp = new BuyGemOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
@@ -58,23 +58,23 @@ module.exports = function buy (user, req = {}, analytics) {
     case 'quests':
     case 'gear':
     case 'bundles':
-      buyRes = purchaseOp(user, req, analytics);
+      buyRes = purchaseOp(user, req);
       break;
     case 'pets':
     case 'mounts':
-      buyRes = hourglassPurchase(user, req, analytics);
+      buyRes = hourglassPurchase(user, req);
       break;
     case 'quest': {
-      const buyOp = new BuyQuestWithGoldOperation(user, req, analytics);
+      const buyOp = new BuyQuestWithGoldOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'special':
-      buyRes = buySpecialSpell(user, req, analytics);
+      buyRes = buySpecialSpell(user, req);
       break;
     default: {
-      const buyOp = new BuyMarketGearOperation(user, req, analytics);
+      const buyOp = new BuyMarketGearOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
diff --git a/website/common/script/ops/buy/buyArmoire.js b/website/common/script/ops/buy/buyArmoire.js
index 4d091a2c1..c3a6051f0 100644
--- a/website/common/script/ops/buy/buyArmoire.js
+++ b/website/common/script/ops/buy/buyArmoire.js
@@ -18,8 +18,8 @@ const YIELD_EQUIPMENT_THRESHOLD = 0.6;
 const YIELD_FOOD_THRESHOLD = 0.8;
 
 export class BuyArmoireOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
@@ -135,10 +135,4 @@ export class BuyArmoireOperation extends AbstractGoldItemOperation {
       },
     };
   }
-
-  analyticsData () {
-    let data = super.analyticsData();
-    data.itemKey = 'Armoire';
-    return data;
-  }
 }
diff --git a/website/common/script/ops/buy/buyGem.js b/website/common/script/ops/buy/buyGem.js
index 9655537d4..de1b9c6b6 100644
--- a/website/common/script/ops/buy/buyGem.js
+++ b/website/common/script/ops/buy/buyGem.js
@@ -9,8 +9,8 @@ import get from 'lodash/get';
 import planGemLimits from '../../libs/planGemLimits';
 
 export class BuyGemOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
@@ -68,14 +68,4 @@ export class BuyGemOperation extends AbstractGoldItemOperation {
       this.i18n('plusGem', {count: this.quantity}),
     ];
   }
-
-  analyticsLabel () {
-    return 'purchase gems';
-  }
-
-  analyticsData () {
-    let data = super.analyticsData();
-    data.itemKey = 'gem';
-    return data;
-  }
 }
diff --git a/website/common/script/ops/buy/buyHealthPotion.js b/website/common/script/ops/buy/buyHealthPotion.js
index cad055a97..5bd6cf4b5 100644
--- a/website/common/script/ops/buy/buyHealthPotion.js
+++ b/website/common/script/ops/buy/buyHealthPotion.js
@@ -6,8 +6,8 @@ import {
 import { AbstractGoldItemOperation} from './abstractBuyOperation';
 
 export class BuyHealthPotionOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
@@ -46,10 +46,4 @@ export class BuyHealthPotionOperation extends AbstractGoldItemOperation {
       message,
     ];
   }
-
-  analyticsData () {
-    let data = super.analyticsData();
-    data.itemKey = 'Potion';
-    return data;
-  }
 }
diff --git a/website/common/script/ops/buy/buyMarketGear.js b/website/common/script/ops/buy/buyMarketGear.js
index 06fe881e4..7a1adc492 100644
--- a/website/common/script/ops/buy/buyMarketGear.js
+++ b/website/common/script/ops/buy/buyMarketGear.js
@@ -15,8 +15,8 @@ import {removePinnedGearAddPossibleNewOnes} from '../pinnedGearUtils';
 import { AbstractGoldItemOperation } from './abstractBuyOperation';
 
 export class BuyMarketGearOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
diff --git a/website/common/script/ops/buy/buyMysterySet.js b/website/common/script/ops/buy/buyMysterySet.js
index 3a8b17a01..a6030275f 100644
--- a/website/common/script/ops/buy/buyMysterySet.js
+++ b/website/common/script/ops/buy/buyMysterySet.js
@@ -8,7 +8,7 @@ import {
   NotFound,
 } from '../../libs/errors';
 
-module.exports = function buyMysterySet (user, req = {}, analytics) {
+module.exports = function buyMysterySet (user, req = {}) {
   let key = get(req, 'params.key');
   if (!key) throw new BadRequest(i18n.t('missingKeyParam', req.language));
 
@@ -25,16 +25,6 @@ module.exports = function buyMysterySet (user, req = {}, analytics) {
 
   each(mysterySet.items, item => {
     user.items.gear.owned[item.key] = true;
-    if (analytics) {
-      analytics.track('acquire item', {
-        uuid: user._id,
-        itemKey: item.key,
-        itemType: 'Subscriber Gear',
-        acquireMethod: 'Hourglass',
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
   });
 
   user.purchased.plan.consecutive.trinkets--;
diff --git a/website/common/script/ops/buy/buyQuest.js b/website/common/script/ops/buy/buyQuest.js
index e30513347..5bcf30fb9 100644
--- a/website/common/script/ops/buy/buyQuest.js
+++ b/website/common/script/ops/buy/buyQuest.js
@@ -9,8 +9,8 @@ import get from 'lodash/get';
 import {AbstractGoldItemOperation} from './abstractBuyOperation';
 
 export class BuyQuestWithGoldOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
@@ -60,13 +60,4 @@ export class BuyQuestWithGoldOperation extends AbstractGoldItemOperation {
       }),
     ];
   }
-
-  analyticsData () {
-    return {
-      itemKey: this.key,
-      itemType: 'Market',
-      acquireMethod: 'Gold',
-      goldCost: this.getItemValue(this.item.goldValue),
-    };
-  }
 }
diff --git a/website/common/script/ops/buy/buySpecialSpell.js b/website/common/script/ops/buy/buySpecialSpell.js
index d6a8492c8..9dd6e7130 100644
--- a/website/common/script/ops/buy/buySpecialSpell.js
+++ b/website/common/script/ops/buy/buySpecialSpell.js
@@ -9,7 +9,7 @@ import {
   NotFound,
 } from '../../libs/errors';
 
-module.exports = function buySpecialSpell (user, req = {}, analytics) {
+module.exports = function buySpecialSpell (user, req = {}) {
   let key = get(req, 'params.key');
   let quantity = req.quantity || 1;
 
@@ -25,19 +25,6 @@ module.exports = function buySpecialSpell (user, req = {}, analytics) {
 
   user.items.special[key] += quantity;
 
-  if (analytics) {
-    analytics.track('acquire item', {
-      uuid: user._id,
-      itemKey: item.key,
-      itemType: 'Market',
-      goldCost: item.goldValue,
-      quantityPurchased: quantity,
-      acquireMethod: 'Gold',
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     pick(user, splitWhitespace('items stats')),
     i18n.t('messageBought', {
diff --git a/website/common/script/ops/buy/hourglassPurchase.js b/website/common/script/ops/buy/hourglassPurchase.js
index d9afc4b44..4f712db74 100644
--- a/website/common/script/ops/buy/hourglassPurchase.js
+++ b/website/common/script/ops/buy/hourglassPurchase.js
@@ -8,7 +8,7 @@ import {
   NotAuthorized,
 } from '../../libs/errors';
 
-module.exports = function purchaseHourglass (user, req = {}, analytics) {
+module.exports = function purchaseHourglass (user, req = {}) {
   let key = get(req, 'params.key');
   if (!key) throw new BadRequest(i18n.t('missingKeyParam', req.language));
 
@@ -41,17 +41,6 @@ module.exports = function purchaseHourglass (user, req = {}, analytics) {
     user.items.mounts[key] = true;
   }
 
-  if (analytics) {
-    analytics.track('acquire item', {
-      uuid: user._id,
-      itemKey: key,
-      itemType: type,
-      acquireMethod: 'Hourglass',
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     { items: user.items, purchasedPlanConsecutive: user.purchased.plan.consecutive },
     i18n.t('hourglassPurchase', req.language),
diff --git a/website/common/script/ops/buy/purchase.js b/website/common/script/ops/buy/purchase.js
index eb48ee72e..fd2a2f16b 100644
--- a/website/common/script/ops/buy/purchase.js
+++ b/website/common/script/ops/buy/purchase.js
@@ -65,7 +65,7 @@ function purchaseItem (user, item, price, type, key) {
 
 const acceptedTypes = ['eggs', 'hatchingPotions', 'food', 'quests', 'gear', 'bundles'];
 const singlePurchaseTypes = ['gear'];
-module.exports = function purchase (user, req = {}, analytics) {
+module.exports = function purchase (user, req = {}) {
   let type = get(req.params, 'type');
   let key = get(req.params, 'key');
 
@@ -103,19 +103,6 @@ module.exports = function purchase (user, req = {}, analytics) {
     purchaseItem(user, item, price, type, key);
   }
 
-  if (analytics) {
-    analytics.track('acquire item', {
-      uuid: user._id,
-      itemKey: key,
-      itemType: 'Market',
-      acquireMethod: 'Gems',
-      gemCost: price * 4,
-      quantityPurchased: quantity,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     pick(user, splitWhitespace('items balance')),
   ];
diff --git a/website/common/script/ops/buy/purchaseWithSpell.js b/website/common/script/ops/buy/purchaseWithSpell.js
index 7f0a08719..b2c5aa189 100644
--- a/website/common/script/ops/buy/purchaseWithSpell.js
+++ b/website/common/script/ops/buy/purchaseWithSpell.js
@@ -1,12 +1,12 @@
 import buy from './buy';
 import get from 'lodash/get';
 
-module.exports = function purchaseWithSpell (user, req = {}, analytics) {
+module.exports = function purchaseWithSpell (user, req = {}) {
   const type = get(req.params, 'type');
 
   if (type === 'spells') {
     req.type = 'special';
   }
 
-  return buy(user, req, analytics);
+  return buy(user, req);
 };
diff --git a/website/common/script/ops/changeClass.js b/website/common/script/ops/changeClass.js
index c1ce86c7b..7c82345fa 100644
--- a/website/common/script/ops/changeClass.js
+++ b/website/common/script/ops/changeClass.js
@@ -28,7 +28,7 @@ function resetClass (user, req = {}) {
   user.flags.classSelected = false;
 }
 
-module.exports = function changeClass (user, req = {}, analytics) {
+module.exports = function changeClass (user, req = {}) {
   let klass = get(req, 'query.class');
   // user.flags.classSelected is set to false after the user paid the 3 gems
   if (user.stats.lvl < 10) {
@@ -50,17 +50,6 @@ module.exports = function changeClass (user, req = {}, analytics) {
     if (klass === 'rogue')  user.items.gear.owned[`shield_${klass}_0`] = true;
 
     removePinnedItemsByOwnedGear(user);
-
-    if (analytics) {
-      analytics.track('change class', {
-        uuid: user._id,
-        class: klass,
-        acquireMethod: 'Gems',
-        gemCost: 3,
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
   } else {
     // if invalid class is specified, throw an error.
     throw new BadRequest(i18n.t('invalidClass', req.language));
diff --git a/website/common/script/ops/openMysteryItem.js b/website/common/script/ops/openMysteryItem.js
index 4773565b8..33411f549 100644
--- a/website/common/script/ops/openMysteryItem.js
+++ b/website/common/script/ops/openMysteryItem.js
@@ -13,7 +13,7 @@ function markNotificationAsRead (user) {
   if (index !== -1) user.notifications.splice(index, 1);
 }
 
-module.exports = function openMysteryItem (user, req = {}, analytics) {
+module.exports = function openMysteryItem (user, req = {}) {
   const mysteryItems = user.purchased.plan.mysteryItems;
   let item = mysteryItems.shift();
 
@@ -28,17 +28,6 @@ module.exports = function openMysteryItem (user, req = {}, analytics) {
 
   if (user.markModified) user.markModified('purchased.plan.mysteryItems');
 
-  if (analytics) {
-    analytics.track('open mystery item', {
-      uuid: user._id,
-      itemKey: item,
-      itemType: 'Subscriber Gear',
-      acquireMethod: 'Subscriber',
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     item,
     i18n.t('mysteryItemOpened', req.language),
diff --git a/website/common/script/ops/rebirth.js b/website/common/script/ops/rebirth.js
index 7531de25a..79ddbdbab 100644
--- a/website/common/script/ops/rebirth.js
+++ b/website/common/script/ops/rebirth.js
@@ -11,28 +11,13 @@ import { removePinnedGearByClass } from './pinnedGearUtils';
 
 const USERSTATSLIST = ['per', 'int', 'con', 'str', 'points', 'gp', 'exp', 'mp'];
 
-module.exports = function rebirth (user, tasks = [], req = {}, analytics) {
+module.exports = function rebirth (user, tasks = [], req = {}) {
   if (user.balance < 1.5 && user.stats.lvl < MAX_LEVEL) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
 
-  let analyticsData = {
-    uuid: user._id,
-    category: 'behavior',
-  };
-
   if (user.stats.lvl < MAX_LEVEL) {
     user.balance -= 1.5;
-    analyticsData.acquireMethod = 'Gems';
-    analyticsData.gemCost = 6;
-  } else {
-    analyticsData.gemCost = 0;
-    analyticsData.acquireMethod = '> 100';
-  }
-
-  if (analytics) {
-    analyticsData.headers = req.headers;
-    analytics.track('Rebirth', analyticsData);
   }
 
   let lvl = capByLevel(user.stats.lvl);
diff --git a/website/common/script/ops/releaseBoth.js b/website/common/script/ops/releaseBoth.js
index c306d9279..3231a3914 100644
--- a/website/common/script/ops/releaseBoth.js
+++ b/website/common/script/ops/releaseBoth.js
@@ -22,21 +22,6 @@ module.exports = function releaseBoth (user, req = {}) {
   let giveBeastMasterAchievement = true;
   let giveMountMasterAchievement = true;
 
-  // @TODO: We are only offering the free version now
-  // if (!user.achievements.triadBingo) {
-  //   if (analytics) {
-  //     analytics.track('release pets & mounts', {
-  //       uuid: user._id,
-  //       acquireMethod: 'Gems',
-  //       gemCost: 6,
-  //       category: 'behavior',
-  //       headers: req.headers,
-  //     });
-  //   }
-  //
-  //   user.balance -= 1.5;
-  // }
-
   let mountInfo = content.mountInfo[user.items.currentMount];
 
   if (mountInfo && mountInfo.type === 'drop') {
diff --git a/website/common/script/ops/releaseMounts.js b/website/common/script/ops/releaseMounts.js
index 4462d11f4..a5c92dcff 100644
--- a/website/common/script/ops/releaseMounts.js
+++ b/website/common/script/ops/releaseMounts.js
@@ -5,7 +5,7 @@ import {
   NotAuthorized,
 } from '../libs/errors';
 
-module.exports = function releaseMounts (user, req = {}, analytics) {
+module.exports = function releaseMounts (user, req = {}) {
   if (user.balance < 1) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
@@ -38,16 +38,6 @@ module.exports = function releaseMounts (user, req = {}, analytics) {
     user.achievements.mountMasterCount++;
   }
 
-  if (analytics) {
-    analytics.track('release mounts', {
-      uuid: user._id,
-      acquireMethod: 'Gems',
-      gemCost: 4,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     user.items.mounts,
     i18n.t('mountsReleased'),
diff --git a/website/common/script/ops/releasePets.js b/website/common/script/ops/releasePets.js
index 0124474a3..d9363e3df 100644
--- a/website/common/script/ops/releasePets.js
+++ b/website/common/script/ops/releasePets.js
@@ -5,7 +5,7 @@ import {
   NotAuthorized,
 } from '../libs/errors';
 
-module.exports = function releasePets (user, req = {}, analytics) {
+module.exports = function releasePets (user, req = {}) {
   if (user.balance < 1) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
@@ -38,16 +38,6 @@ module.exports = function releasePets (user, req = {}, analytics) {
     user.achievements.beastMasterCount++;
   }
 
-  if (analytics) {
-    analytics.track('release pets', {
-      uuid: user._id,
-      acquireMethod: 'Gems',
-      gemCost: 4,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     user.items.pets,
     i18n.t('petsReleased'),
diff --git a/website/common/script/ops/reroll.js b/website/common/script/ops/reroll.js
index 9f8da0c83..ffe9e2c5c 100644
--- a/website/common/script/ops/reroll.js
+++ b/website/common/script/ops/reroll.js
@@ -4,7 +4,7 @@ import {
   NotAuthorized,
 } from '../libs/errors';
 
-module.exports = function reroll (user, tasks = [], req = {}, analytics) {
+module.exports = function reroll (user, tasks = [], req = {}) {
   if (user.balance < 1) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
@@ -20,16 +20,6 @@ module.exports = function reroll (user, tasks = [], req = {}, analytics) {
     }
   });
 
-  if (analytics) {
-    analytics.track('Fortify Potion', {
-      uuid: user._id,
-      acquireMethod: 'Gems',
-      gemCost: 4,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     {user, tasks},
     i18n.t('fortifyComplete'),
diff --git a/website/common/script/ops/revive.js b/website/common/script/ops/revive.js
index b8ddb0b63..67eb51776 100644
--- a/website/common/script/ops/revive.js
+++ b/website/common/script/ops/revive.js
@@ -12,7 +12,7 @@ import predictableRandom from '../fns/predictableRandom';
 import { removePinnedGearByClass, addPinnedGearByClass, addPinnedGear } from './pinnedGearUtils';
 import getItemInfo from '../libs/getItemInfo';
 
-module.exports = function revive (user, req = {}, analytics) {
+module.exports = function revive (user, req = {}) {
   if (user.stats.hp > 0) {
     throw new NotAuthorized(i18n.t('cannotRevive', req.language));
   }
@@ -104,16 +104,6 @@ module.exports = function revive (user, req = {}, analytics) {
     message = i18n.t('messageLostItem', { itemText: item.text(req.language)}, req.language);
   }
 
-  if (analytics) {
-    analytics.track('Death', {
-      uuid: user._id,
-      lostItem,
-      gaLabel: lostItem,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     user.items,
     message,
diff --git a/website/common/script/ops/scoreTask.js b/website/common/script/ops/scoreTask.js
index 78e5e3945..28f554c48 100644
--- a/website/common/script/ops/scoreTask.js
+++ b/website/common/script/ops/scoreTask.js
@@ -295,6 +295,6 @@ module.exports = function scoreTask (options = {}, req = {}) {
     }
   }
 
-  updateStats(user, stats, req);
+  updateStats(user, stats);
   return [delta];
 };
diff --git a/website/common/script/ops/sleep.js b/website/common/script/ops/sleep.js
index e80f766b0..48a283ce2 100644
--- a/website/common/script/ops/sleep.js
+++ b/website/common/script/ops/sleep.js
@@ -1,14 +1,4 @@
-module.exports = function sleep (user, req = {}, analytics) {
+module.exports = function sleep (user) {
   user.preferences.sleep = !user.preferences.sleep;
-
-  if (analytics) {
-    analytics.track('sleep', {
-      uuid: user._id,
-      status: user.preferences.sleep,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [user.preferences.sleep];
 };
diff --git a/website/common/script/ops/unlock.js b/website/common/script/ops/unlock.js
index bbe4a7910..d89c3e920 100644
--- a/website/common/script/ops/unlock.js
+++ b/website/common/script/ops/unlock.js
@@ -15,7 +15,7 @@ import content from '../content/index';
 
 // If item is already purchased -> equip it
 // Otherwise unlock it
-module.exports = function unlock (user, req = {}, analytics) {
+module.exports = function unlock (user, req = {}) {
   let path = get(req.query, 'path');
 
   if (!path) {
@@ -113,18 +113,6 @@ module.exports = function unlock (user, req = {}, analytics) {
     }
 
     user.balance -= cost;
-
-    if (analytics) {
-      analytics.track('acquire item', {
-        uuid: user._id,
-        itemKey: path,
-        itemType: 'customization',
-        acquireMethod: 'Gems',
-        gemCost: cost / 0.25,
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
   }
 
   let response = [
diff --git a/website/server/controllers/api-v3/auth.js b/website/server/controllers/api-v3/auth.js
index 3d69b05c8..56965773c 100644
--- a/website/server/controllers/api-v3/auth.js
+++ b/website/server/controllers/api-v3/auth.js
@@ -1,6 +1,5 @@
 import validator from 'validator';
 import moment from 'moment';
-import passport from 'passport';
 import nconf from 'nconf';
 import {
   authWithHeaders,
@@ -18,8 +17,6 @@ import { model as EmailUnsubscription } from '../../models/emailUnsubscription';
 import { sendTxn as sendTxnEmail } from '../../libs/email';
 import { decrypt, encrypt } from '../../libs/encryption';
 import { send as sendEmail } from '../../libs/email';
-import pusher from '../../libs/pusher';
-import common from '../../../common';
 import { validatePasswordResetCodeAndFindUser, convertToBcrypt} from '../../libs/password';
 
 const BASE_URL = nconf.get('BASE_URL');
@@ -66,21 +63,9 @@ async function _handleGroupInvitation (user, invite) {
   }
 }
 
-function hasBackupAuth (user, networkToRemove) {
-  if (user.auth.local.username) {
-    return true;
-  }
-
-  let hasAlternateNetwork = common.constants.SUPPORTED_SOCIAL_NETWORKS.find((network) => {
-    return network.key !== networkToRemove && user.auth[network.key].id;
-  });
-
-  return hasAlternateNetwork;
-}
-
 /**
  * @api {post} /api/v3/user/auth/local/register Register
- * @apiDescription Register a new user with email, login name, and password or attach local auth to a social user
+ * @apiDescription Register a new user with email, login name, and password
  * @apiName UserRegisterLocal
  * @apiGroup User
  *
@@ -89,7 +74,7 @@ function hasBackupAuth (user, networkToRemove) {
  * @apiParam (Body) {String} password Password for the new user
  * @apiParam (Body) {String} confirmPassword Password confirmation
  *
- * @apiSuccess {Object} data The user object, if local auth was just attached to a social user then only user.auth.local
+ * @apiSuccess {Object} data The user object
  */
 api.registerLocal = {
   method: 'POST',
@@ -98,7 +83,7 @@ api.registerLocal = {
   })],
   url: '/user/auth/local/register',
   async handler (req, res) {
-    let existingUser = res.locals.user; // If adding local auth to social user
+    let existingUser = res.locals.user;
 
     req.checkBody({
       email: {
@@ -155,19 +140,8 @@ api.registerLocal = {
       },
     };
 
-    if (existingUser) {
-      let hasSocialAuth = common.constants.SUPPORTED_SOCIAL_NETWORKS.find(network => {
-        if (existingUser.auth.hasOwnProperty(network.key)) {
-          return existingUser.auth[network.key].id;
-        }
-      });
-      if (!hasSocialAuth) throw new NotAuthorized(res.t('onlySocialAttachLocal'));
-      existingUser.auth.local = newUser.auth.local;
-      newUser = existingUser;
-    } else {
-      newUser = new User(newUser);
-      newUser.registeredThrough = req.headers['x-client']; // Not saved, used to create the correct tasks based on the device used
-    }
+    newUser = new User(newUser);
+    newUser.registeredThrough = req.headers['x-client']; // Not saved, used to create the correct tasks based on the device used
 
     // we check for partyInvite for backward compatibility
     if (req.query.groupInvite || req.query.partyInvite) {
@@ -191,17 +165,6 @@ api.registerLocal = {
         if (!existingUser) sendTxnEmail(savedUser, 'welcome');
       });
 
-    if (!existingUser) {
-      res.analytics.track('register', {
-        category: 'acquisition',
-        type: 'local',
-        gaLabel: 'local',
-        uuid: savedUser._id,
-        headers: req.headers,
-        user: savedUser,
-      });
-    }
-
     return null;
   },
 };
@@ -274,177 +237,10 @@ api.loginLocal = {
       await user.save();
     }
 
-    res.analytics.track('login', {
-      category: 'behaviour',
-      type: 'local',
-      gaLabel: 'local',
-      uuid: user._id,
-      headers: req.headers,
-    });
-
     return _loginRes(user, ...arguments);
   },
 };
 
-function _passportProfile (network, accessToken) {
-  return new Promise((resolve, reject) => {
-    passport._strategies[network].userProfile(accessToken, (err, profile) => {
-      if (err) {
-        reject(err);
-      } else {
-        resolve(profile);
-      }
-    });
-  });
-}
-
-// Called as a callback by Facebook (or other social providers). Internal route
-api.loginSocial = {
-  method: 'POST',
-  middlewares: [authWithHeaders({
-    optional: true,
-  })],
-  url: '/user/auth/social', // this isn't the most appropriate url but must be the same as v2
-  async handler (req, res) {
-    let existingUser = res.locals.user;
-    let accessToken = req.body.authResponse.access_token;
-    let network = req.body.network;
-
-    let isSupportedNetwork = common.constants.SUPPORTED_SOCIAL_NETWORKS.find(supportedNetwork => {
-      return supportedNetwork.key === network;
-    });
-    if (!isSupportedNetwork) throw new BadRequest(res.t('unsupportedNetwork'));
-
-    let profile = await _passportProfile(network, accessToken);
-
-    let user = await User.findOne({
-      [`auth.${network}.id`]: profile.id,
-    }, {_id: 1, apiToken: 1, auth: 1}).exec();
-
-    // User already signed up
-    if (user) {
-      _loginRes(user, ...arguments);
-    } else { // Create new user
-      user = {
-        auth: {
-          [network]: profile,
-        },
-        preferences: {
-          language: req.language,
-        },
-      };
-      if (existingUser) {
-        existingUser.auth[network] = user.auth[network];
-        user = existingUser;
-      } else {
-        user = new User(user);
-        user.registeredThrough = req.headers['x-client']; // Not saved, used to create the correct tasks based on the device used
-      }
-
-      let savedUser = await user.save();
-
-      if (!existingUser) {
-        user.newUser = true;
-      }
-      _loginRes(user, ...arguments);
-
-      // Clean previous email preferences
-      if (savedUser.auth[network].emails && savedUser.auth[network].emails[0] && savedUser.auth[network].emails[0].value) {
-        EmailUnsubscription
-          .remove({email: savedUser.auth[network].emails[0].value.toLowerCase()})
-          .exec()
-          .then(() => {
-            if (!existingUser) sendTxnEmail(savedUser, 'welcome');
-          }); // eslint-disable-line max-nested-callbacks
-      }
-
-      if (!existingUser) {
-        res.analytics.track('register', {
-          category: 'acquisition',
-          type: network,
-          gaLabel: network,
-          uuid: savedUser._id,
-          headers: req.headers,
-          user: savedUser,
-        });
-      }
-
-      return null;
-    }
-  },
-};
-
-/*
- * @apiIgnore Private route
- * @api {post} /api/v3/user/auth/pusher Pusher.com authentication
- * @apiDescription Authentication for Pusher.com private and presence channels
- * @apiName UserAuthPusher
- * @apiGroup User
- *
- * @apiParam (Body) {String} socket_id A unique identifier for the specific client connection to Pusher
- * @apiParam (Body) {String} channel_name The name of the channel being subscribed to
- *
- * @apiSuccess {String} auth The authentication token
- */
-api.pusherAuth = {
-  method: 'POST',
-  middlewares: [authWithHeaders({
-    userFieldsToExclude: ['inbox'],
-  })],
-  url: '/user/auth/pusher',
-  async handler (req, res) {
-    let user = res.locals.user;
-
-    req.checkBody('socket_id').notEmpty();
-    req.checkBody('channel_name').notEmpty();
-
-    let validationErrors = req.validationErrors();
-    if (validationErrors) throw validationErrors;
-
-    let socketId = req.body.socket_id;
-    let channelName = req.body.channel_name;
-
-    // Channel names are in the form of {presence|private}-{group|...}-{resourceId}
-    let [channelType, resourceType, ...resourceId] = channelName.split('-');
-
-    if (['presence'].indexOf(channelType) === -1) { // presence is used only for parties, private for guilds
-      throw new BadRequest('Invalid Pusher channel type.');
-    }
-
-    if (resourceType !== 'group') { // only groups are supported
-      throw new BadRequest('Invalid Pusher resource type.');
-    }
-
-    resourceId = resourceId.join('-'); // the split at the beginning had split resourceId too
-    if (!validator.isUUID(String(resourceId))) {
-      throw new BadRequest('Invalid Pusher resource id, must be a UUID.');
-    }
-
-    // Only the user's party is supported for now
-    if (user.party._id !== resourceId) {
-      throw new NotFound('Resource id must be the user\'s party.');
-    }
-
-    let authResult;
-
-    // Max 100 members for presence channel - parties only
-    if (channelType === 'presence') {
-      let presenceData = {
-        user_id: user._id, // eslint-disable-line camelcase
-        // Max 1KB
-        user_info: {}, // eslint-disable-line camelcase
-      };
-
-      authResult = pusher.authenticate(socketId, channelName, presenceData);
-    } else {
-      authResult = pusher.authenticate(socketId, channelName);
-    }
-
-    // Not using res.respond because Pusher requires a different response format
-    res.status(200).json(authResult);
-  },
-};
-
 /**
  * @api {put} /api/v3/user/auth/update-username Update username
  * @apiDescription Update the username of a local user
@@ -704,35 +500,4 @@ api.resetPasswordSetNewOne = {
   },
 };
 
-/**
- * @api {delete} /api/v3/user/auth/social/:network Delete social authentication method
- * @apiDescription Remove a social authentication method (only facebook supported) from a user profile. The user must have local authentication enabled
- * @apiName UserDeleteSocial
- * @apiGroup User
- *
- * @apiSuccess {Object} data Empty object
- */
-api.deleteSocial = {
-  method: 'DELETE',
-  url: '/user/auth/social/:network',
-  middlewares: [authWithHeaders({
-    userFieldsToExclude: ['inbox'],
-  })],
-  async handler (req, res) {
-    let user = res.locals.user;
-    let network = req.params.network;
-    let isSupportedNetwork = common.constants.SUPPORTED_SOCIAL_NETWORKS.find(supportedNetwork => {
-      return supportedNetwork.key === network;
-    });
-    if (!isSupportedNetwork) throw new BadRequest(res.t('unsupportedNetwork'));
-    if (!hasBackupAuth(user, network)) throw new NotAuthorized(res.t('cantDetachSocial'));
-    let unset = {
-      [`auth.${network}`]: 1,
-    };
-    await User.update({_id: user._id}, {$unset: unset}).exec();
-
-    res.respond(200, {});
-  },
-};
-
 module.exports = api;
diff --git a/website/server/controllers/api-v3/challenges.js b/website/server/controllers/api-v3/challenges.js
index 46f39b022..05f1fb088 100644
--- a/website/server/controllers/api-v3/challenges.js
+++ b/website/server/controllers/api-v3/challenges.js
@@ -203,16 +203,6 @@ api.createChallenge = {
     };
     response.group = getChallengeGroupResponse(group);
 
-    res.analytics.track('challenge create', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: response._id,
-      groupID: group._id,
-      groupName: group.privacy === 'private' ? null : group.name,
-      groupType: group._id === TAVERN_ID ? 'tavern' : group.type,
-    });
-
     res.respond(201, response);
   },
 };
@@ -264,16 +254,6 @@ api.joinChallenge = {
     let chalLeader = await User.findById(response.leader).select(nameFields).exec();
     response.leader = chalLeader ? chalLeader.toJSON({minimize: true}) : null;
 
-    res.analytics.track('challenge join', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      groupID: group._id,
-      groupName: group.privacy === 'private' ? null : group.name,
-      groupType: group._id === TAVERN_ID ? 'tavern' : group.type,
-    });
-
     res.respond(200, response);
   },
 };
@@ -313,16 +293,6 @@ api.leaveChallenge = {
     // Unlink challenge's tasks from user's tasks and save the challenge
     await Promise.all([challenge.unlinkTasks(user, keep), challenge.save()]);
 
-    res.analytics.track('challenge leave', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      groupID: challenge.group._id,
-      groupName: challenge.group.privacy === 'private' ? null : challenge.group.name,
-      groupType: challenge.group._id === TAVERN_ID ? 'tavern' : challenge.group.type,
-    });
-
     res.respond(200, {});
   },
 };
@@ -725,16 +695,6 @@ api.deleteChallenge = {
     // Close channel in background, some ops are run in the background without `await`ing
     await challenge.closeChal({broken: 'CHALLENGE_DELETED'});
 
-    res.analytics.track('challenge delete', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      groupID: challenge.group._id,
-      groupName: challenge.group.privacy === 'private' ? null : challenge.group.name,
-      groupType: challenge.group._id === TAVERN_ID ? 'tavern' : challenge.group.type,
-    });
-
     res.respond(200, {});
   },
 };
@@ -776,17 +736,6 @@ api.selectChallengeWinner = {
     // Close channel in background, some ops are run in the background without `await`ing
     await challenge.closeChal({broken: 'CHALLENGE_CLOSED', winner});
 
-    res.analytics.track('challenge close', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      challengeWinnerID: winner._id,
-      groupID: challenge.group._id,
-      groupName: challenge.group.privacy === 'private' ? null : challenge.group.name,
-      groupType: challenge.group._id === TAVERN_ID ? 'tavern' : challenge.group.type,
-    });
-
     res.respond(200, {});
   },
 };
diff --git a/website/server/controllers/api-v3/chat.js b/website/server/controllers/api-v3/chat.js
index d3381e918..5707ec88b 100644
--- a/website/server/controllers/api-v3/chat.js
+++ b/website/server/controllers/api-v3/chat.js
@@ -9,8 +9,6 @@ import {
 } from '../../libs/errors';
 import { removeFromArray } from '../../libs/collectionManipulators';
 import { getUserInfo, getGroupUrl, sendTxn } from '../../libs/email';
-import slack from '../../libs/slack';
-import pusher from '../../libs/pusher';
 import { getAuthorEmailFromMessage } from '../../libs/chat';
 import { chatReporterFactory } from '../../libs/chatReporting/chatReporterFactory';
 import nconf from 'nconf';
@@ -146,14 +144,6 @@ api.postChat = {
 
       sendTxn(FLAG_REPORT_EMAILS, 'slur-report-to-mods', report);
 
-      // Slack the mods
-      slack.sendSlurNotification({
-        authorEmail,
-        author: user,
-        group,
-        message,
-      });
-
       throw new BadRequest(res.t('bannedSlurUsed'));
     }
 
@@ -188,13 +178,6 @@ api.postChat = {
 
     await Promise.all(toSave);
 
-    // @TODO: rethink if we want real-time
-    if (group.privacy === 'private' && group.type === 'party') {
-      // req.body.pusherSocketId is sent from official clients to identify the sender user's real time socket
-      // see https://pusher.com/docs/server_api_guide/server_excluding_recipients
-      pusher.trigger(`presence-group-${group._id}`, 'new-chat', newChatMessage, req.body.pusherSocketId);
-    }
-
     if (chatUpdated) {
       res.respond(200, {chat: chatRes.chat});
     } else {
diff --git a/website/server/controllers/api-v3/coupon.js b/website/server/controllers/api-v3/coupon.js
index bec35182b..0f9893cfd 100644
--- a/website/server/controllers/api-v3/coupon.js
+++ b/website/server/controllers/api-v3/coupon.js
@@ -56,7 +56,7 @@ api.getCoupons = {
  * @apiGroup Coupon
  * @apiPermission sudo
  *
- * @apiParam (Path) {String=wondercon,google_6mo} event The event for which the coupon should be generated
+ * @apiParam (Path) {String=wondercon} event The event for which the coupon should be generated
  * @apiParam (Query) {Number} count The number of coupon codes to generate
  *
  * @apiSuccess {Array} data Generated coupons
diff --git a/website/server/controllers/api-v3/groups.js b/website/server/controllers/api-v3/groups.js
index 2a97fb6de..ad5364c72 100644
--- a/website/server/controllers/api-v3/groups.js
+++ b/website/server/controllers/api-v3/groups.js
@@ -18,13 +18,7 @@ import {
 import { removeFromArray } from '../../libs/collectionManipulators';
 import { sendTxn as sendTxnEmail } from '../../libs/email';
 import { encrypt } from '../../libs/encryption';
-import { sendNotification as sendPushNotification } from '../../libs/pushNotifications';
-import pusher from '../../libs/pusher';
 import common from '../../../common';
-import payments from '../../libs/payments/payments';
-import stripePayments from '../../libs/payments/stripe';
-import amzLib from '../../libs/payments/amazon';
-import shared from '../../../common';
 import apiMessages from '../../libs/apiMessages';
 
 const MAX_EMAIL_INVITES_BY_USER = 200;
@@ -152,22 +146,6 @@ api.createGroup = {
       profile: {name: user.profile.name},
     };
 
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      owner: true,
-      groupType: savedGroup.type,
-      privacy: savedGroup.privacy,
-      headers: req.headers,
-    };
-
-    if (savedGroup.privacy === 'public') {
-      analyticsObject.groupName = savedGroup.name;
-    }
-
-    res.analytics.track('join group', analyticsObject);
-
     res.respond(201, response); // do not remove chat flags data as we've just created the group
   },
 };
@@ -202,54 +180,6 @@ api.createGroupPlan = {
     let results = await Promise.all([user.save(), group.save()]);
     let savedGroup = results[1];
 
-    // Analytics
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      owner: true,
-      groupType: savedGroup.type,
-      privacy: savedGroup.privacy,
-      headers: req.headers,
-    };
-    res.analytics.track('join group', analyticsObject);
-
-    if (req.body.paymentType === 'Stripe') {
-      let token = req.body.id;
-      let gift = req.query.gift ? JSON.parse(req.query.gift) : undefined;
-      let sub = req.query.sub ? shared.content.subscriptionBlocks[req.query.sub] : false;
-      let groupId = savedGroup._id;
-      let email = req.body.email;
-      let headers = req.headers;
-      let coupon = req.query.coupon;
-
-      await stripePayments.checkout({
-        token,
-        user,
-        gift,
-        sub,
-        groupId,
-        email,
-        headers,
-        coupon,
-      });
-    } else if (req.body.paymentType === 'Amazon') {
-      let billingAgreementId = req.body.billingAgreementId;
-      let sub = req.body.subscription ? shared.content.subscriptionBlocks[req.body.subscription] : false;
-      let coupon = req.body.coupon;
-      let groupId = savedGroup._id;
-      let headers = req.headers;
-
-      await amzLib.subscribe({
-        billingAgreementId,
-        sub,
-        coupon,
-        user,
-        groupId,
-        headers,
-      });
-    }
-
     // Instead of populate we make a find call manually because of https://github.com/Automattic/mongoose/issues/3833
     // await Q.ninvoke(savedGroup, 'populate', ['leader', nameFields]); // doc.populate doesn't return a promise
     let response = savedGroup.toJSON();
@@ -590,7 +520,6 @@ api.joinGroup = {
     if (group.memberCount === 0) group.leader = user._id; // If new user is only member -> set as leader
 
     if (group.hasNotCancelled())  {
-      await payments.addSubToGroupUser(user, group);
       await group.updateGroupPlan();
     }
 
@@ -643,22 +572,6 @@ api.joinGroup = {
       response.leader = leader.toJSON({minimize: true});
     }
 
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      owner: false,
-      groupType: group.type,
-      privacy: group.privacy,
-      headers: req.headers,
-    };
-
-    if (group.privacy === 'public') {
-      analyticsObject.groupName = group.name;
-    }
-
-    res.analytics.track('join group', analyticsObject);
-
     res.respond(200, response);
   },
 };
@@ -789,7 +702,7 @@ api.leaveGroup = {
     }
 
     await group.leave(user, req.query.keep, req.body.keepChallenges);
-    if (group.hasNotCancelled()) await group.updateGroupPlan(true);
+    if (group.hasNotCancelled()) await group.updateGroupPlan();
     _removeMessagesFromMember(user, group._id);
     await user.save();
 
@@ -798,11 +711,6 @@ api.leaveGroup = {
       user.guilds.splice(guildIndex, 1);
     }
 
-    let isMemberOfGroupPlan = await user.isMemberOfGroupPlan();
-    if (!isMemberOfGroupPlan) {
-      await payments.cancelGroupSubscriptionForUser(user, group);
-    }
-
     res.respond(200, {});
   },
 };
@@ -892,8 +800,7 @@ api.removeGroupMember = {
     if (isInGroup) {
       group.memberCount -= 1;
       if (group.hasNotCancelled())  {
-        await group.updateGroupPlan(true);
-        await payments.cancelGroupSubscriptionForUser(member, group, true);
+        await group.updateGroupPlan();
       }
 
       if (group.quest && group.quest.leader === member._id) {
@@ -909,12 +816,6 @@ api.removeGroupMember = {
         removeFromArray(member.guilds, group._id);
       }
       if (isInGroup === 'party') {
-        // Tell the realtime clients that a user is being removed
-        // If the user that is being removed is still connected, they'll get disconnected automatically
-        pusher.trigger(`presence-group-${group._id}`, 'user-removed', {
-          userId: user._id,
-        });
-
         member.party._id = undefined; // TODO remove quest information too? Use group.leave()?
       }
 
@@ -1015,19 +916,6 @@ async function _inviteByUUID (uuid, group, inviter, req, res) {
     sendTxnEmail(userToInvite, `invited-${groupTemplate}`, emailVars);
   }
 
-  if (userToInvite.preferences.pushNotifications[`invited${groupLabel}`] !== false) {
-    let identifier = group.type === 'guild' ? 'invitedGuild' : 'invitedParty';
-    sendPushNotification(
-      userToInvite,
-      {
-        title: group.name,
-        message: res.t(identifier),
-        identifier,
-        payload: {groupID: group._id, publicGuild},
-      }
-    );
-  }
-
   let userInvited = await userToInvite.save();
   if (group.type === 'guild') {
     return userInvited.invitations.guilds[userToInvite.invitations.guilds.length - 1];
@@ -1043,8 +931,6 @@ async function _inviteByEmail (invite, group, inviter, req, res) {
 
   let userToContact = await User.findOne({$or: [
     {'auth.local.email': invite.email},
-    {'auth.facebook.emails.value': invite.email},
-    {'auth.google.emails.value': invite.email},
   ]})
     .select({_id: true, 'preferences.emailNotifications': true})
     .exec();
diff --git a/website/server/controllers/api-v3/members.js b/website/server/controllers/api-v3/members.js
index a09cda938..ed65fff1c 100644
--- a/website/server/controllers/api-v3/members.js
+++ b/website/server/controllers/api-v3/members.js
@@ -18,7 +18,6 @@ import {
   getUserInfo,
   sendTxn as sendTxnEmail,
 } from '../../libs/email';
-import { sendNotification as sendPushNotification } from '../../libs/pushNotifications';
 import { achievements } from '../../../../website/common/';
 
 let api = {};
@@ -501,18 +500,6 @@ api.sendPrivateMessage = {
         {name: 'SENDER', content: getUserInfo(sender, ['name']).name},
       ]);
     }
-    if (receiver.preferences.pushNotifications.newPM !== false) {
-      sendPushNotification(
-        receiver,
-        {
-          title: res.t('newPM'),
-          message: res.t('newPMInfo', {name: getUserInfo(sender, ['name']).name, message}),
-          identifier: 'newPM',
-          category: 'newPM',
-          payload: {replyTo: sender._id},
-        }
-      );
-    }
 
     res.respond(200, {});
   },
@@ -591,15 +578,6 @@ api.transferGems = {
         {name: 'X_GEMS_GIFTED', content: gemAmount},
       ]);
     }
-    if (receiver.preferences.pushNotifications.giftedGems !== false) {
-      sendPushNotification(receiver,
-        {
-          title: res.t('giftedGems', receiverLang),
-          message: res.t('giftedGemsInfo', {amount: gemAmount, name: byUsername}, receiverLang),
-          identifier: 'giftedGems',
-          payload: {replyTo: sender._id},
-        });
-    }
 
     res.respond(200, {});
   },
diff --git a/website/server/controllers/api-v3/quests.js b/website/server/controllers/api-v3/quests.js
index b08585e89..183357074 100644
--- a/website/server/controllers/api-v3/quests.js
+++ b/website/server/controllers/api-v3/quests.js
@@ -1,6 +1,5 @@
 import _ from 'lodash';
 import { authWithHeaders } from '../../middlewares/auth';
-import analytics from '../../libs/analyticsService';
 import {
   model as Group,
   basicFields as basicGroupFields,
@@ -16,7 +15,6 @@ import {
   sendTxn as sendTxnEmail,
 } from '../../libs/email';
 import common from '../../../common';
-import { sendNotification as sendPushNotification } from '../../libs/pushNotifications';
 
 const questScrolls = common.content.quests;
 
@@ -80,7 +78,7 @@ api.inviteToQuest = {
       'party._id': group._id,
       _id: {$ne: user._id},
     })
-      .select('auth.facebook auth.local preferences.emailNotifications profile.name pushDevices')
+      .select('auth.local preferences.emailNotifications profile.name pushDevices')
       .exec();
 
     group.markModified('quest');
@@ -120,20 +118,6 @@ api.inviteToQuest = {
     // send out invites
     let inviterVars = getUserInfo(user, ['name', 'email']);
     let membersToEmail = members.filter(member => {
-      // send push notifications while filtering members before sending emails
-      if (member.preferences.pushNotifications.invitedQuest !== false) {
-        sendPushNotification(
-          member,
-          {
-            title: res.t('questInvitationTitle'),
-            message: res.t('questInvitationInfo', {quest: quest.text(req.language)}),
-            identifier: 'questInvitation',
-            category: 'questInvitation',
-          }
-
-        );
-      }
-
       return member.preferences.emailNotifications.invitedQuest !== false;
     });
     sendTxnEmail(membersToEmail, `invite-${quest.boss ? 'boss' : 'collection'}-quest`, [
@@ -141,17 +125,6 @@ api.inviteToQuest = {
       {name: 'INVITER', content: inviterVars.name},
       {name: 'PARTY_URL', content: '/party'},
     ]);
-
-    // track that the inviting user has accepted the quest
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: true,
-      response: 'accept',
-      gaLabel: 'accept',
-      questName: questKey,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
@@ -202,17 +175,6 @@ api.acceptQuest = {
     let savedGroup = await group.save();
 
     res.respond(200, savedGroup.quest);
-
-    // track that a user has accepted the quest
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: false,
-      response: 'accept',
-      gaLabel: 'accept',
-      questName: group.quest.key,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
@@ -264,16 +226,6 @@ api.rejectQuest = {
     let savedGroup = await group.save();
 
     res.respond(200, savedGroup.quest);
-
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: false,
-      response: 'reject',
-      gaLabel: 'reject',
-      questName: group.quest.key,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
@@ -325,16 +277,6 @@ api.forceStart = {
     ]);
 
     res.respond(200, savedGroup.quest);
-
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: user._id === group.quest.leader,
-      response: 'force-start',
-      gaLabel: 'force-start',
-      questName: group.quest.key,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
diff --git a/website/server/controllers/api-v3/tasks.js b/website/server/controllers/api-v3/tasks.js
index e00b08251..c2ee1d679 100644
--- a/website/server/controllers/api-v3/tasks.js
+++ b/website/server/controllers/api-v3/tasks.js
@@ -22,7 +22,6 @@ import {
 import common from '../../../common';
 import _ from 'lodash';
 import logger from '../../libs/logger';
-import moment from 'moment';
 
 const MAX_SCORE_NOTES_LENGTH = 256;
 
@@ -166,16 +165,6 @@ api.createUserTasks = {
     res.respond(201, tasks.length === 1 ? tasks[0] : tasks);
 
     tasks.forEach((task) => {
-      // Track when new users (first 7 days) create tasks
-      if (moment().diff(user.auth.timestamps.created, 'days') < 7) {
-        res.analytics.track('task create', {
-          uuid: user._id,
-          hitType: 'event',
-          category: 'behavior',
-          taskType: task.type,
-        });
-      }
-
       taskActivityWebhook.send(user, {
         type: 'created',
         task,
@@ -251,16 +240,6 @@ api.createChallengeTasks = {
 
     // If adding tasks to a challenge -> sync users
     if (challenge) challenge.addTasks(tasks);
-
-    tasks.forEach((task) => {
-      res.analytics.track('task create', {
-        uuid: user._id,
-        hitType: 'event',
-        category: 'behavior',
-        taskType: task.type,
-        challengeID: challenge._id,
-      });
-    });
   },
 };
 
@@ -606,7 +585,7 @@ api.scoreTask = {
 
     let [delta] = common.ops.scoreTask({task, user, direction}, req);
     // Drop system (don't run on the client, as it would only be discarded since ops are sent to the API, not the results)
-    if (direction === 'up') common.fns.randomDrop(user, {task, delta}, req, res.analytics);
+    if (direction === 'up') common.fns.randomDrop(user, {task, delta}, req);
 
     // If a todo was completed or uncompleted move it in or out of the user.tasksOrder.todos list
     // TODO move to common code?
@@ -675,17 +654,6 @@ api.scoreTask = {
         logger.error(e);
       }
     }
-
-    // Track when new users (first 7 days) score tasks
-    if (moment().diff(user.auth.timestamps.created, 'days') < 7) {
-      res.analytics.track('task score', {
-        uuid: user._id,
-        hitType: 'event',
-        category: 'behavior',
-        taskType: task.type,
-        direction,
-      });
-    }
   },
 };
 
diff --git a/website/server/controllers/api-v3/tasks/groups.js b/website/server/controllers/api-v3/tasks/groups.js
index 5065ebc0c..9ab7554c3 100644
--- a/website/server/controllers/api-v3/tasks/groups.js
+++ b/website/server/controllers/api-v3/tasks/groups.js
@@ -56,16 +56,6 @@ api.createGroupTasks = {
     let tasks = await createTasks(req, res, {user, group});
 
     res.respond(201, tasks.length === 1 ? tasks[0] : tasks);
-
-    tasks.forEach((task) => {
-      res.analytics.track('task create', {
-        uuid: user._id,
-        hitType: 'event',
-        category: 'behavior',
-        taskType: task.type,
-        groupID: group._id,
-      });
-    });
   },
 };
 
diff --git a/website/server/controllers/api-v3/user.js b/website/server/controllers/api-v3/user.js
index b1f51be84..78ee29951 100644
--- a/website/server/controllers/api-v3/user.js
+++ b/website/server/controllers/api-v3/user.js
@@ -18,12 +18,10 @@ import {
   getUserInfo,
   sendTxn as txnEmail,
 } from '../../libs/email';
-import Queue from '../../libs/queue';
 import nconf from 'nconf';
 import get from 'lodash/get';
 
 const TECH_ASSISTANCE_EMAIL = nconf.get('EMAILS:TECH_ASSISTANCE_EMAIL');
-const DELETE_CONFIRMATION = 'DELETE';
 
 /**
  * @apiDefine UserNotFound
@@ -402,8 +400,6 @@ api.deleteUser = {
     if (user.auth.local.hashed_password && user.auth.local.email) {
       let isValidPassword = await passwordUtils.compare(user, password);
       if (!isValidPassword) throw new NotAuthorized(res.t('wrongPassword'));
-    } else if ((user.auth.facebook.id || user.auth.google.id) && password !== DELETE_CONFIRMATION) {
-      throw new NotAuthorized(res.t('incorrectDeletePhrase', {magicWord: 'DELETE'}));
     }
 
     let feedback = req.body.feedback;
@@ -440,14 +436,6 @@ api.deleteUser = {
       ]);
     }
 
-    if (feedback) Queue.sendMessage({feedback, username: user.profile.name}, user._id);
-
-    res.analytics.track('account delete', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-    });
-
     res.respond(200, {});
   },
 };
@@ -489,8 +477,6 @@ api.getUserAnonymized = {
     delete user.apiToken;
     if (user.auth) {
       delete user.auth.local;
-      delete user.auth.facebook;
-      delete user.auth.google;
     }
     delete user.newMessages;
     delete user.profile;
@@ -553,7 +539,7 @@ api.sleep = {
   url: '/user/sleep',
   async handler (req, res) {
     let user = res.locals.user;
-    let sleepRes = common.ops.sleep(user, req, res.analytics);
+    let sleepRes = common.ops.sleep(user);
     await user.save();
     res.respond(200, ...sleepRes);
   },
@@ -613,7 +599,7 @@ api.buy = {
     let quantity = 1;
     if (req.body.quantity) quantity = req.body.quantity;
     req.quantity = quantity;
-    buyRes = common.ops.buy(user, req, res.analytics);
+    buyRes = common.ops.buy(user, req);
 
     await user.save();
     res.respond(200, ...buyRes);
@@ -661,7 +647,7 @@ api.buyGear = {
   url: '/user/buy-gear/:key',
   async handler (req, res) {
     let user = res.locals.user;
-    let buyGearRes = common.ops.buy(user, req, res.analytics);
+    let buyGearRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyGearRes);
   },
@@ -703,7 +689,7 @@ api.buyArmoire = {
     let user = res.locals.user;
     req.type = 'armoire';
     req.params.key = 'armoire';
-    let buyArmoireResponse = common.ops.buy(user, req, res.analytics);
+    let buyArmoireResponse = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyArmoireResponse);
   },
@@ -743,7 +729,7 @@ api.buyHealthPotion = {
     let user = res.locals.user;
     req.type = 'potion';
     req.params.key = 'potion';
-    let buyHealthPotionResponse = common.ops.buy(user, req, res.analytics);
+    let buyHealthPotionResponse = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyHealthPotionResponse);
   },
@@ -784,7 +770,7 @@ api.buyMysterySet = {
   async handler (req, res) {
     let user = res.locals.user;
     req.type = 'mystery';
-    let buyMysterySetRes = common.ops.buy(user, req, res.analytics);
+    let buyMysterySetRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyMysterySetRes);
   },
@@ -825,7 +811,7 @@ api.buyQuest = {
   async handler (req, res) {
     let user = res.locals.user;
     req.type = 'quest';
-    let buyQuestRes = common.ops.buy(user, req, res.analytics);
+    let buyQuestRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyQuestRes);
   },
@@ -1039,7 +1025,7 @@ api.changeClass = {
   url: '/user/change-class',
   async handler (req, res) {
     let user = res.locals.user;
-    let changeClassRes = common.ops.changeClass(user, req, res.analytics);
+    let changeClassRes = common.ops.changeClass(user, req);
     await user.save();
     res.respond(200, ...changeClassRes);
   },
@@ -1108,7 +1094,7 @@ api.purchase = {
     if (req.body.quantity) quantity = req.body.quantity;
     req.quantity = quantity;
 
-    let purchaseRes = common.ops.buy(user, req, res.analytics);
+    let purchaseRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...purchaseRes);
   },
@@ -1139,7 +1125,7 @@ api.userPurchaseHourglass = {
   url: '/user/purchase-hourglass/:type/:key',
   async handler (req, res) {
     let user = res.locals.user;
-    let purchaseHourglassRes = common.ops.buy(user, req, res.analytics);
+    let purchaseHourglassRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...purchaseHourglassRes);
   },
@@ -1233,7 +1219,7 @@ api.userOpenMysteryItem = {
   url: '/user/open-mystery-item',
   async handler (req, res) {
     let user = res.locals.user;
-    let openMysteryItemRes = common.ops.openMysteryItem(user, req, res.analytics);
+    let openMysteryItemRes = common.ops.openMysteryItem(user, req);
     await user.save();
     res.respond(200, ...openMysteryItemRes);
   },
@@ -1265,7 +1251,7 @@ api.userReleasePets = {
   url: '/user/release-pets',
   async handler (req, res) {
     let user = res.locals.user;
-    let releasePetsRes = common.ops.releasePets(user, req, res.analytics);
+    let releasePetsRes = common.ops.releasePets(user, req);
     await user.save();
     res.respond(200, ...releasePetsRes);
   },
@@ -1314,7 +1300,7 @@ api.userReleaseBoth = {
   url: '/user/release-both',
   async handler (req, res) {
     let user = res.locals.user;
-    let releaseBothRes = common.ops.releaseBoth(user, req, res.analytics);
+    let releaseBothRes = common.ops.releaseBoth(user, req);
     await user.save();
     res.respond(200, ...releaseBothRes);
   },
@@ -1350,7 +1336,7 @@ api.userReleaseMounts = {
   url: '/user/release-mounts',
   async handler (req, res) {
     let user = res.locals.user;
-    let releaseMountsRes = common.ops.releaseMounts(user, req, res.analytics);
+    let releaseMountsRes = common.ops.releaseMounts(user, req);
     await user.save();
     res.respond(200, ...releaseMountsRes);
   },
@@ -1423,7 +1409,7 @@ api.userUnlock = {
   url: '/user/unlock',
   async handler (req, res) {
     let user = res.locals.user;
-    let unlockRes = common.ops.unlock(user, req, res.analytics);
+    let unlockRes = common.ops.unlock(user, req);
     await user.save();
     res.respond(200, ...unlockRes);
   },
@@ -1449,7 +1435,7 @@ api.userRevive = {
   url: '/user/revive',
   async handler (req, res) {
     let user = res.locals.user;
-    let reviveRes = common.ops.revive(user, req, res.analytics);
+    let reviveRes = common.ops.revive(user, req);
     await user.save();
     res.respond(200, ...reviveRes);
   },
@@ -1495,7 +1481,7 @@ api.userRebirth = {
       ...Tasks.taskIsGroupOrChallengeQuery,
     }).exec();
 
-    let rebirthRes = common.ops.rebirth(user, tasks, req, res.analytics);
+    let rebirthRes = common.ops.rebirth(user, tasks, req);
 
     let toSave = tasks.map(task => task.save());
 
@@ -1653,7 +1639,7 @@ api.userReroll = {
       ...Tasks.taskIsGroupOrChallengeQuery,
     };
     let tasks = await Tasks.Task.find(query).exec();
-    let rerollRes = common.ops.reroll(user, tasks, req, res.analytics);
+    let rerollRes = common.ops.reroll(user, tasks, req);
 
     let promises = tasks.map(task => task.save());
     promises.push(user.save());
@@ -1704,12 +1690,6 @@ api.userReset = {
       user.save(),
     ]);
 
-    res.analytics.track('account reset', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-    });
-
     res.respond(200, ...resetRes);
   },
 };
diff --git a/website/server/controllers/top-level/dataexport.js b/website/server/controllers/top-level/dataexport.js
index 7943355bb..cf1e614ff 100644
--- a/website/server/controllers/top-level/dataexport.js
+++ b/website/server/controllers/top-level/dataexport.js
@@ -8,17 +8,7 @@ import _ from 'lodash';
 import csvStringify from '../../libs/csvStringify';
 import moment from 'moment';
 import js2xml from 'js2xmlparser';
-import Pageres from 'pageres';
-import nconf from 'nconf';
-import got from 'got';
 import md from 'habitica-markdown';
-import {
-  S3,
-} from '../../libs/aws';
-
-const S3_BUCKET = nconf.get('S3:bucket');
-
-const BASE_URL = nconf.get('BASE_URL');
 
 let api = {};
 
@@ -188,75 +178,6 @@ api.exportUserAvatarHtml = {
   },
 };
 
-/**
- * @api {get} /export/avatar-:uuid.png Render a user avatar as a PNG file
- * @apiName ExportUserAvatarPng
- * @apiGroup DataExport
- *
- * @apiParam (Path) {String} uuid The User ID of the user
- *
- * @apiSuccess {PNG} File A png file of the user's avatar.
- */
-api.exportUserAvatarPng = {
-  method: 'GET',
-  url: '/export/avatar-:memberId.png',
-  async handler (req, res) {
-    req.checkParams('memberId', res.t('memberIdRequired')).notEmpty().isUUID();
-
-    let validationErrors = req.validationErrors();
-    if (validationErrors) throw validationErrors;
-
-    let memberId = req.params.memberId;
-
-    let filename = `avatars/${memberId}.png`;
-    let s3url = `https://${S3_BUCKET}.s3.amazonaws.com/${filename}`;
-
-    let response;
-    try {
-      response = await got.head(s3url);
-    } catch (gotError) {
-      // If the file does not exist AWS S3 can return a 403 error
-      if (gotError.code !== 'ENOTFOUND' && gotError.statusCode !== 404 && gotError.statusCode !== 403) {
-        throw gotError;
-      }
-    }
-
-    // cache images for 30 minutes on aws, else upload a new one
-    if (response && response.statusCode === 200 && moment().diff(response.headers['last-modified'], 'minutes') < 30) {
-      return res.redirect(s3url);
-    }
-
-    let [stream] = await new Pageres()
-      .src(`${BASE_URL}/export/avatar-${memberId}.html`, ['140x147'], {
-        crop: true,
-        filename: filename.replace('.png', ''),
-      })
-      .run();
-
-    let s3upload = S3.upload({
-      Bucket: S3_BUCKET,
-      Key: filename,
-      ACL: 'public-read',
-      StorageClass: 'REDUCED_REDUNDANCY',
-      ContentType: 'image/png',
-      Expires: moment().add({minutes: 5}).toDate(),
-      Body: stream,
-    });
-
-    let s3res = await new Promise((resolve, reject) => {
-      s3upload.send((err, s3uploadRes) => {
-        if (err) {
-          reject(err);
-        } else {
-          resolve(s3uploadRes);
-        }
-      });
-    });
-
-    res.redirect(s3res.Location);
-  },
-};
-
 /**
  * @api {get} /export/inbox.html Export user private messages as HTML document
  * @apiName ExportUserPrivateMessages
diff --git a/website/server/libs/chatReporting/groupChatReporter.js b/website/server/libs/chatReporting/groupChatReporter.js
index ef39eb951..7aa58ea8f 100644
--- a/website/server/libs/chatReporting/groupChatReporter.js
+++ b/website/server/libs/chatReporting/groupChatReporter.js
@@ -6,7 +6,6 @@ import {
   NotFound,
 } from '../errors';
 import { getGroupUrl, sendTxn } from '../email';
-import slack from '../slack';
 import { model as Group } from '../../models/group';
 import { model as Chat } from '../../models/chat';
 
@@ -57,14 +56,6 @@ export default class GroupChatReporter extends ChatReporter {
       {name: 'GROUP_URL', content: groupUrl},
       {name: 'REPORTER_COMMENT', content: userComment || ''},
     ]));
-
-    slack.sendFlagNotification({
-      authorEmail: this.authorEmail,
-      flagger: this.user,
-      group,
-      message,
-      userComment,
-    });
   }
 
   async flagGroupMessage (group, message) {
diff --git a/website/server/libs/cron.js b/website/server/libs/cron.js
index c98ecf929..aa6e84a81 100644
--- a/website/server/libs/cron.js
+++ b/website/server/libs/cron.js
@@ -85,12 +85,12 @@ function grantEndOfTheMonthPerks (user, now) {
       // If offset is now less than 0, the user EITHER has a single-month recurring subscription and MIGHT be due for perks,
       // OR has a multi-month subscription that renewed some time in the previous calendar month and so they are due for a new set of perks
       // (strictly speaking, they should have been given the perks at the time that next payment was taken, but we don't have support for
-      // tracking payments like that - giving the perks when offset is < 0 is a workaround).
+      // tracking like that - giving the perks when offset is < 0 is a workaround).
 
       if (plan.consecutive.offset < 0) {
         if (plan.planId) {
           // NB gift subscriptions don't have a planID (which doesn't matter because we don't need to reapply perks for them and by this point they should have expired anyway)
-          let planIdRegExp = new RegExp('_([0-9]+)mo'); // e.g., matches 'google_6mo' / 'basic_12mo' and captures '6' / '12'
+          let planIdRegExp = new RegExp('_([0-9]+)mo'); // e.g., matches 'basic_12mo' and captures '6' / '12'
           let match = plan.planId.match(planIdRegExp);
           if (match !== null && match[0] !== null) {
             planMonthsLength = match[1]; // 3 for 3-month recurring subscription, etc
@@ -193,22 +193,6 @@ function performSleepTasks (user, tasksByType, now, daysMissed) {
   resetHabitCounters(user, tasksByType, now, daysMissed);
 }
 
-function trackCronAnalytics (analytics, user, _progress, options) {
-  analytics.track('Cron', {
-    category: 'behavior',
-    gaLabel: 'Cron Count',
-    gaValue: user.flags.cronCount,
-    uuid: user._id,
-    user,
-    resting: user.preferences.sleep,
-    cronCount: user.flags.cronCount,
-    progressUp: _.min([_progress.up, 900]),
-    progressDown: _progress.down,
-    headers: options.headers,
-    loginIncentives: user.loginIncentives,
-  });
-}
-
 function awardLoginIncentives (user) {
   if (user.loginIncentives > MAX_INCENTIVES) return;
   // A/B test 2016-12-21: Should we deliver notifications for upcoming incentives on days when users don't receive rewards?
@@ -261,7 +245,7 @@ function awardLoginIncentives (user) {
 
 // Perform various beginning-of-day reset actions.
 export function cron (options = {}) {
-  let {user, tasksByType, analytics, now = new Date(), daysMissed, timezoneOffsetFromUserPrefs} = options;
+  let {user, tasksByType, now = new Date(), daysMissed, timezoneOffsetFromUserPrefs} = options;
   let _progress = {down: 0, up: 0, collectedItems: 0};
 
   // Record pre-cron values of HP and MP to show notifications later
@@ -298,7 +282,6 @@ export function cron (options = {}) {
   // On cron, buffs are cleared and all dailies are reset without performing damage
   if (user.preferences.sleep === true) {
     performSleepTasks(user, tasksByType, now, daysMissed);
-    trackCronAnalytics(analytics, user, _progress, options);
     return;
   }
 
@@ -502,9 +485,7 @@ export function cron (options = {}) {
   //   user.markModified('inbox.messages');
   // }
 
-  // Analytics
   user.flags.cronCount++;
-  trackCronAnalytics(analytics, user, _progress, options);
 
   return _progress;
 }
diff --git a/website/server/libs/email.js b/website/server/libs/email.js
index 330f2d2ac..74a0c4a69 100644
--- a/website/server/libs/email.js
+++ b/website/server/libs/email.js
@@ -4,7 +4,6 @@ import { TAVERN_ID } from '../models/group';
 import { encrypt } from './encryption';
 import got from 'got';
 import logger from './logger';
-import common from '../../common';
 
 const IS_PROD = nconf.get('IS_PROD');
 const EMAIL_SERVER = {
@@ -39,8 +38,6 @@ export function getUserInfo (user, fields = []) {
     if (!info.name) {
       if (user.auth.local && user.auth.local.username) {
         info.name = user.auth.local.username;
-      } else if (user.auth.facebook) {
-        info.name = user.auth.facebook.displayName || user.auth.facebook.username;
       }
     }
   }
@@ -48,12 +45,6 @@ export function getUserInfo (user, fields = []) {
   if (fields.indexOf('email') !== -1) {
     if (user.auth.local && user.auth.local.email) {
       info.email = user.auth.local.email;
-    } else {
-      common.constants.SUPPORTED_SOCIAL_NETWORKS.forEach(network => {
-        if (user.auth[network.key] && user.auth[network.key].emails && user.auth[network.key].emails[0] && user.auth[network.key].emails[0].value) {
-          info.email = user.auth[network.key].emails[0].value;
-        }
-      });
     }
   }
 
diff --git a/website/server/libs/logger.js b/website/server/libs/logger.js
index 75d58c936..d5d95a634 100644
--- a/website/server/libs/logger.js
+++ b/website/server/libs/logger.js
@@ -1,6 +1,5 @@
 // Logger utility
 import winston from 'winston';
-import 'winston-loggly-bulk';
 import nconf from 'nconf';
 import _ from 'lodash';
 import {
@@ -21,12 +20,6 @@ if (IS_PROD) {
       colorize: false,
       prettyPrint: false,
     });
-    logger.add(winston.transports.Loggly, {
-      inputToken: nconf.get('LOGGLY:TOKEN'),
-      subdomain: nconf.get('LOGGLY:SUBDOMAIN'),
-      tags: ['Winston-NodeJS'],
-      json: true,
-    });
   }
 } else if (!IS_TEST || IS_TEST && ENABLE_LOGS_IN_TEST) { // Do not log anything when testing unless specified
   logger
diff --git a/website/server/libs/payments/payments.js b/website/server/libs/payments/payments.js
index ecc790c46..3798559a9 100644
--- a/website/server/libs/payments/payments.js
+++ b/website/server/libs/payments/payments.js
@@ -1,12 +1,9 @@
 import _ from 'lodash';
-import nconf from 'nconf';
-import analytics from '../analyticsService';
 import {
   getUserInfo,
   sendTxn as txnEmail,
 } from '../email';
 import moment from 'moment';
-import { sendNotification as sendPushNotification } from '../pushNotifications';
 import shared from '../../../common';
 import {
   model as Group,
@@ -17,9 +14,7 @@ import {
   NotAuthorized,
   NotFound,
 } from '../errors';
-import slack from '../slack';
 
-const TECH_ASSISTANCE_EMAIL = nconf.get('EMAILS:TECH_ASSISTANCE_EMAIL');
 const JOINED_GROUP_PLAN = 'joined group plan';
 
 let api = {};
@@ -28,8 +23,6 @@ api.constants = {
   UNLIMITED_CUSTOMER_ID: 'habitrpg', // Users with the customerId have an unlimted free subscription
   GROUP_PLAN_CUSTOMER_ID: 'group-plan',
   GROUP_PLAN_PAYMENT_METHOD: 'Group Plan',
-  GOOGLE_PAYMENT_METHOD: 'Google',
-  IOS_PAYMENT_METHOD: 'Apple',
 };
 
 function revealMysteryItems (user) {
@@ -89,8 +82,6 @@ api.addSubscriptionToGroupUsers = async function addSubscriptionToGroupUsers (gr
 api.addSubToGroupUser = async function addSubToGroupUser (member, group) {
   // These EMAIL_TEMPLATE constants are used to pass strings into templates that are
   // stored externally and so their values must not be changed.
-  const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GOOGLE = 'Google_subscription';
-  const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_IOS = 'iOS_subscription';
   const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GROUP_PLAN = 'group_plan_free_subscription';
   const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_LIFETIME_FREE = 'lifetime_free_subscription';
   const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_NORMAL = 'normal_subscription';
@@ -100,7 +91,6 @@ api.addSubToGroupUser = async function addSubToGroupUser (member, group) {
   // When changing customerIdsToIgnore or paymentMethodsToIgnore, the code blocks below for
   // the `group-member-join` email template will probably need to be changed.
   let customerIdsToIgnore = [this.constants.GROUP_PLAN_CUSTOMER_ID, this.constants.UNLIMITED_CUSTOMER_ID];
-  let paymentMethodsToIgnore = [this.constants.GOOGLE_PAYMENT_METHOD, this.constants.IOS_PAYMENT_METHOD];
   let previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_NONE;
   let leader = await User.findById(group.leader).exec();
 
@@ -135,29 +125,12 @@ api.addSubToGroupUser = async function addSubToGroupUser (member, group) {
   let memberPlan = member.purchased.plan;
   if (member.isSubscribed()) {
     let customerHasCancelledGroupPlan = memberPlan.customerId === this.constants.GROUP_PLAN_CUSTOMER_ID && !member.hasNotCancelled();
-    let ignorePaymentPlan = paymentMethodsToIgnore.indexOf(memberPlan.paymentMethod) !== -1;
     let ignoreCustomerId = customerIdsToIgnore.indexOf(memberPlan.customerId) !== -1;
 
-    if (ignorePaymentPlan) {
-      txnEmail({email: TECH_ASSISTANCE_EMAIL}, 'admin-user-subscription-details', [
-        {name: 'PROFILE_NAME', content: member.profile.name},
-        {name: 'UUID', content: member._id},
-        {name: 'EMAIL', content: getUserInfo(member, ['email']).email},
-        {name: 'PAYMENT_METHOD', content: memberPlan.paymentMethod},
-        {name: 'PURCHASED_PLAN', content: JSON.stringify(memberPlan)},
-        {name: 'ACTION_NEEDED', content: 'User has joined group plan and has been told to cancel their subscription then email us. Ensure they do that then give them free sub.'},
-        // TODO User won't get email instructions if they've opted out of all emails. See if we can make this email an exception and if not, report here whether they've opted out.
-      ]);
-    }
-
-    if ((ignorePaymentPlan || ignoreCustomerId) && !customerHasCancelledGroupPlan) {
+    if (ignoreCustomerId && !customerHasCancelledGroupPlan) {
       // member has been added to group plan but their subscription will not be changed
       // automatically so they need a special message in the email
-      if (memberPlan.paymentMethod === this.constants.GOOGLE_PAYMENT_METHOD) {
-        previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GOOGLE;
-      } else if (memberPlan.paymentMethod === this.constants.IOS_PAYMENT_METHOD) {
-        previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_IOS;
-      } else if (memberPlan.customerId === this.constants.UNLIMITED_CUSTOMER_ID) {
+      if (memberPlan.customerId === this.constants.UNLIMITED_CUSTOMER_ID) {
         previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_LIFETIME_FREE;
       } else if (memberPlan.customerId === this.constants.GROUP_PLAN_CUSTOMER_ID) {
         previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GROUP_PLAN;
@@ -278,9 +251,6 @@ api.createSubscription = async function createSubscription (data) {
   let today = new Date();
   let plan;
   let group;
-  let groupId;
-  let itemPurchased = 'Subscription';
-  let purchaseType = 'subscribe';
   let emailType = 'subscription-begins';
 
   //  If we are buying a group subscription
@@ -297,10 +267,7 @@ api.createSubscription = async function createSubscription (data) {
     }
 
     recipient = group;
-    itemPurchased = 'Group-Subscription';
-    purchaseType = 'group-subscribe';
     emailType = 'group-subscription-begins';
-    groupId = group._id;
     recipient.purchased.plan.quantity = data.sub.quantity;
 
     await this.addSubscriptionToGroupUsers(group);
@@ -332,9 +299,7 @@ api.createSubscription = async function createSubscription (data) {
       paymentMethod: data.paymentMethod,
       extraMonths: Number(plan.extraMonths) + _dateDiff(today, plan.dateTerminated),
       dateTerminated: null,
-      // Specify a lastBillingDate just for Amazon Payments
-      // Resetted every time the subscription restarts
-      lastBillingDate: data.paymentMethod === 'Amazon Payments' ? today : undefined,
+      lastBillingDate: undefined,
       nextPaymentProcessing: data.nextPaymentProcessing,
       nextBillingDate: data.nextBillingDate,
       additionalData: data.additionalData,
@@ -370,19 +335,6 @@ api.createSubscription = async function createSubscription (data) {
     txnEmail(data.user, emailType);
   }
 
-  analytics.trackPurchase({
-    uuid: data.user._id,
-    groupId,
-    itemPurchased,
-    sku: `${data.paymentMethod.toLowerCase()}-subscription`,
-    purchaseType,
-    paymentMethod: data.paymentMethod,
-    quantity: 1,
-    gift: Boolean(data.gift),
-    purchaseValue: block.price,
-    headers: data.headers,
-  });
-
   if (!group) data.user.purchased.txnCount++;
 
   if (data.gift) {
@@ -417,19 +369,6 @@ api.createSubscription = async function createSubscription (data) {
         {name: 'X_MONTHS_SUBSCRIPTION', content: months},
       ]);
     }
-
-    if (data.gift.member._id !== data.user._id) { // Only send push notifications if sending to a user other than yourself
-      if (data.gift.member.preferences.pushNotifications.giftedSubscription !== false) {
-        sendPushNotification(data.gift.member,
-          {
-            title: shared.i18n.t('giftedSubscription', languages[1]),
-            message: shared.i18n.t('giftedSubscriptionInfo', {months, name: byUserName}, languages[1]),
-            identifier: 'giftedSubscription',
-            payload: {replyTo: data.user._id},
-          }
-        );
-      }
-    }
   }
 
   if (group) {
@@ -439,30 +378,12 @@ api.createSubscription = async function createSubscription (data) {
   }
 
   if (data.gift) await data.gift.member.save();
-
-  slack.sendSubscriptionNotification({
-    buyer: {
-      id: data.user._id,
-      name: data.user.profile.name,
-      email: getUserInfo(data.user, ['email']).email,
-    },
-    recipient: data.gift ? {
-      id: data.gift.member._id,
-      name: data.gift.member.profile.name,
-      email: getUserInfo(data.gift.member, ['email']).email,
-    } : {},
-    paymentMethod: data.paymentMethod,
-    months: group ? 1 : months,
-    groupId,
-  });
 };
 
 // Cancels a subscription or group plan, setting termination to happen later
 api.cancelSubscription = async function cancelSubscription (data) {
   let plan;
   let group;
-  let cancelType = 'unsubscribe';
-  let groupId;
   let emailType;
   let emailMergeData = [];
   let sendEmail = true;
@@ -524,20 +445,6 @@ api.cancelSubscription = async function cancelSubscription (data) {
   }
 
   if (sendEmail) txnEmail(data.user, emailType, emailMergeData);
-
-  if (group) {
-    cancelType = 'group-unsubscribe';
-    groupId = group._id;
-  }
-
-  analytics.track(cancelType, {
-    uuid: data.user._id,
-    groupId,
-    gaCategory: 'commerce',
-    gaLabel: data.paymentMethod,
-    paymentMethod: data.paymentMethod,
-    headers: data.headers,
-  });
 };
 
 api.buyGems = async function buyGems (data) {
@@ -549,18 +456,6 @@ api.buyGems = async function buyGems (data) {
 
   if (!data.gift) txnEmail(data.user, 'donation');
 
-  analytics.trackPurchase({
-    uuid: data.user._id,
-    itemPurchased: 'Gems',
-    sku: `${data.paymentMethod.toLowerCase()}-checkout`,
-    purchaseType: 'checkout',
-    paymentMethod: data.paymentMethod,
-    quantity: 1,
-    gift: Boolean(data.gift),
-    purchaseValue: amt,
-    headers: data.headers,
-  });
-
   if (data.gift) {
     let byUsername = getUserInfo(data.user, ['name']).name;
     let gemAmount = data.gift.gems.amount || 20;
@@ -595,19 +490,6 @@ api.buyGems = async function buyGems (data) {
       ]);
     }
 
-    if (data.gift.member._id !== data.user._id) { // Only send push notifications if sending to a user other than yourself
-      if (data.gift.member.preferences.pushNotifications.giftedGems !== false) {
-        sendPushNotification(
-          data.gift.member,
-          {
-            title: shared.i18n.t('giftedGems', languages[1]),
-            message: shared.i18n.t('giftedGemsInfo', {amount: gemAmount, name: byUsername}, languages[1]),
-            identifier: 'giftedGems',
-          }
-        );
-      }
-    }
-
     await data.gift.member.save();
   }
 
diff --git a/website/server/libs/setupPassport.js b/website/server/libs/setupPassport.js
index 4c0861a1f..51d872942 100644
--- a/website/server/libs/setupPassport.js
+++ b/website/server/libs/setupPassport.js
@@ -1,28 +1,9 @@
 import passport from 'passport';
-import nconf from 'nconf';
-import { Strategy as FacebookStrategy } from 'passport-facebook';
-import { Strategy as GoogleStrategy } from 'passport-google-oauth20';
 
 // Passport session setup.
 //   To support persistent login sessions, Passport needs to be able to
 //   serialize users into and deserialize users out of the session.  Typically,
 //   this will be as simple as storing the user ID when serializing, and finding
-//   the user by ID when deserializing.  However, since this example does not
-//   have a database of user records, the complete Facebook profile is serialized
-//   and deserialized.
+//   the user by ID when deserializing.
 passport.serializeUser((user, done) => done(null, user));
 passport.deserializeUser((obj, done) => done(null, obj));
-
-// TODO remove?
-// This auth strategy is no longer used. It's just kept around for auth.js#loginFacebook() (passport._strategies.facebook.userProfile)
-// The proper fix would be to move to a general OAuth module simply to verify accessTokens
-passport.use(new FacebookStrategy({
-  clientID: nconf.get('FACEBOOK_KEY'),
-  clientSecret: nconf.get('FACEBOOK_SECRET'),
-  // callbackURL: nconf.get("BASE_URL") + "/auth/facebook/callback"
-}, (accessToken, refreshToken, profile, done) => done(null, profile)));
-
-passport.use(new GoogleStrategy({
-  clientID: nconf.get('GOOGLE_CLIENT_ID'),
-  clientSecret: nconf.get('GOOGLE_CLIENT_SECRET'),
-}, (accessToken, refreshToken, profile, done) => done(null, profile)));
diff --git a/website/server/middlewares/cron.js b/website/server/middlewares/cron.js
index 750cf1ab8..dda2d04cd 100644
--- a/website/server/middlewares/cron.js
+++ b/website/server/middlewares/cron.js
@@ -47,7 +47,6 @@ async function cronAsync (req, res) {
   let user = res.locals.user;
   if (!user) return null; // User might not be available when authentication is not mandatory
 
-  let analytics = res.analytics;
   let now = new Date();
 
   try {
@@ -73,7 +72,7 @@ async function cronAsync (req, res) {
     tasks.forEach(task => tasksByType[`${task.type}s`].push(task));
 
     // Run cron
-    let progress = cron({user, tasksByType, now, daysMissed, analytics, timezoneOffsetFromUserPrefs, headers: req.headers});
+    let progress = cron({user, tasksByType, now, daysMissed, timezoneOffsetFromUserPrefs, headers: req.headers});
 
     // Clear old completed todos - 30 days for free users, 90 for subscribers
     // Do not delete challenges completed todos TODO unless the task is broken?
diff --git a/website/server/middlewares/errorHandler.js b/website/server/middlewares/errorHandler.js
index cb12a714c..42d736acb 100644
--- a/website/server/middlewares/errorHandler.js
+++ b/website/server/middlewares/errorHandler.js
@@ -50,12 +50,6 @@ module.exports = function errorHandler (err, req, res, next) { // eslint-disable
     });
   }
 
-  // Handle Stripe Card errors errors (can be safely shown to the users)
-  // https://stripe.com/docs/api/node#errors
-  if (err.type === 'StripeCardError') {
-    responseErr = new BadRequest(err.message);
-  }
-
   if (!responseErr || responseErr.httpCode >= 500) {
     // Try to identify the error...
     // ...
diff --git a/website/server/middlewares/notFound.js b/website/server/middlewares/notFound.js
index adf74bcbd..67f63b364 100644
--- a/website/server/middlewares/notFound.js
+++ b/website/server/middlewares/notFound.js
@@ -7,10 +7,6 @@ import { serveClient } from '../libs/client';
 // in which case, respond with a 404 error.
 const TOP_LEVEL_ROUTES = [
   '/api',
-  '/amazon',
-  '/iap',
-  '/paypal',
-  '/stripe',
   '/export',
   '/email',
   '/qr-code',
diff --git a/website/server/middlewares/v3.js b/website/server/middlewares/v3.js
index 1829c41af..132948e0b 100644
--- a/website/server/middlewares/v3.js
+++ b/website/server/middlewares/v3.js
@@ -1,6 +1,5 @@
 import express from 'express';
 import expressValidator from 'express-validator';
-import analytics from './analytics';
 import setupBody from './setupBody';
 import routes from '../libs/routes';
 import path from 'path';
@@ -15,7 +14,6 @@ v3app.set('view engine', 'pug');
 v3app.set('views', `${__dirname}/../../views`);
 
 v3app.use(expressValidator());
-v3app.use(analytics);
 v3app.use(setupBody);
 
 const topLevelRouter = express.Router(); // eslint-disable-line new-cap
diff --git a/website/server/models/challenge.js b/website/server/models/challenge.js
index 6d16d3b7e..a8a5b22f1 100644
--- a/website/server/models/challenge.js
+++ b/website/server/models/challenge.js
@@ -10,7 +10,6 @@ import {
 import { removeFromArray } from '../libs/collectionManipulators';
 import shared from '../../common';
 import { sendTxn as txnEmail } from '../libs/email';
-import { sendNotification as sendPushNotification } from '../libs/pushNotifications';
 import { TaskQueue } from 'cwait';
 import { syncableAttrs, setNextDue } from '../libs/taskManager';
 
@@ -324,14 +323,6 @@ schema.methods.closeChal = async function closeChal (broken = {}) {
         {name: 'CHALLENGE_NAME', content: challenge.name},
       ]);
     }
-    if (savedWinner.preferences.pushNotifications.wonChallenge !== false) {
-      sendPushNotification(savedWinner,
-        {
-          title: challenge.name,
-          message: shared.i18n.t('wonChallenge'),
-          identifier: 'wonChallenge',
-        });
-    }
   }
 
   // Run some operations in the background withouth blocking the thread
diff --git a/website/server/models/coupon.js b/website/server/models/coupon.js
index c973ffb76..2d96d9217 100644
--- a/website/server/models/coupon.js
+++ b/website/server/models/coupon.js
@@ -12,7 +12,7 @@ import {
 
 export let schema = new mongoose.Schema({
   _id: {type: String, default: couponCode.generate, required: true},
-  event: {type: String, enum: ['wondercon', 'google_6mo']},
+  event: {type: String, enum: ['wondercon']},
   user: {type: String, ref: 'User'},
 }, {
   strict: true,
diff --git a/website/server/models/group.js b/website/server/models/group.js
index 8d98a1b1e..f3168e1f0 100644
--- a/website/server/models/group.js
+++ b/website/server/models/group.js
@@ -24,16 +24,12 @@ import {
 import baseModel from '../libs/baseModel';
 import { sendTxn as sendTxnEmail } from '../libs/email';
 import nconf from 'nconf';
-import { sendNotification as sendPushNotification } from '../libs/pushNotifications';
-import pusher from '../libs/pusher';
 import {
   syncableAttrs,
 } from '../libs/taskManager';
 import {
   schema as SubscriptionPlanSchema,
 } from './subscriptionPlan';
-import amazonPayments from '../libs/payments/amazon';
-import stripePayments from '../libs/payments/stripe';
 import { getGroupChat } from '../libs/chat/group-chat';
 import { model as UserNotification } from './userNotification';
 
@@ -608,12 +604,6 @@ schema.methods.sendChat = function sendChat (message, user, metaData) {
     User.update(query, lastSeenUpdateAddNew, {multi: true}).exec();
   });
 
-  // If the message being sent is a system message (not gone through the api.postChat controller)
-  // then notify Pusher about it (only parties for now)
-  if (newMessage.uuid === 'system' && this.privacy === 'private' && this.type === 'party') {
-    pusher.trigger(`presence-group-${this._id}`, 'new-chat', newMessage);
-  }
-
   return newChatMessage;
 };
 
@@ -657,7 +647,7 @@ schema.methods.startQuest = async function startQuest (user) {
   await User.find({
     _id: {$in: Object.keys(this.quest.members)},
   })
-    .select('party.quest party._id items.quests auth preferences.emailNotifications preferences.pushNotifications pushDevices profile.name webhooks')
+    .select('party.quest party._id items.quests auth preferences.emailNotifications pushDevices profile.name webhooks')
     .lean()
     .exec()
     .then(partyMembers => {
@@ -721,8 +711,6 @@ schema.methods.startQuest = async function startQuest (user) {
   await newMessage.save();
 
   const membersToEmail = [];
-  const pushTitle = quest.text();
-  const pushMessage = `${shared.i18n.t('questStarted')}: ${quest.text()}`;
 
   // send notifications and webhooks in the background without blocking
   members.forEach(member => {
@@ -731,15 +719,6 @@ schema.methods.startQuest = async function startQuest (user) {
       if (member.preferences.emailNotifications.questStarted !== false) {
         membersToEmail.push(member);
       }
-
-      // send push notifications and filter users that disabled emails
-      if (member.preferences.pushNotifications.questStarted !== false) {
-        sendPushNotification(member, {
-          title: pushTitle,
-          message: pushMessage,
-          identifier: 'questStarted',
-        });
-      }
     }
 
     // Send webhooks
@@ -1242,12 +1221,6 @@ schema.methods.leave = async function leaveGroup (user, keep = 'keep-all', keepC
     promises.push(User.update({_id: user._id}, {$pull: {guilds: group._id}}).exec());
   } else {
     promises.push(User.update({_id: user._id}, {$set: {party: {}}}).exec());
-    // Tell the realtime clients that a user has left
-    // If the user that left is still connected, they'll get disconnected
-    pusher.trigger(`presence-group-${group._id}`, 'user-left', {
-      userId: user._id,
-    });
-
     update.$unset = {[`quest.members.${user._id}`]: 1};
   }
 
@@ -1504,7 +1477,7 @@ schema.methods.hasNotCancelled = function hasNotCancelled () {
   return this.isSubscribed() && !plan.dateTerminated;
 };
 
-schema.methods.updateGroupPlan = async function updateGroupPlan (removingMember) {
+schema.methods.updateGroupPlan = async function updateGroupPlan () {
   // Recheck the group plan count
   let members;
   if (this.type === 'guild') {
@@ -1513,12 +1486,6 @@ schema.methods.updateGroupPlan = async function updateGroupPlan (removingMember)
     members = await User.find({'party._id': this._id}).select('_id').exec();
   }
   this.memberCount = members.length;
-
-  if (this.purchased.plan.paymentMethod === stripePayments.constants.PAYMENT_METHOD) {
-    await stripePayments.chargeForAdditionalGroupMember(this);
-  } else if (this.purchased.plan.paymentMethod === amazonPayments.constants.PAYMENT_METHOD && !removingMember) {
-    await amazonPayments.chargeForAdditionalGroupMember(this);
-  }
 };
 
 export let model = mongoose.model('Group', schema);
diff --git a/website/server/models/subscriptionPlan.js b/website/server/models/subscriptionPlan.js
index e3994c8e0..c6f8a4a17 100644
--- a/website/server/models/subscriptionPlan.js
+++ b/website/server/models/subscriptionPlan.js
@@ -7,18 +7,18 @@ export let schema = new mongoose.Schema({
   subscriptionId: String,
   owner: {type: String, ref: 'User', validate: [validator.isUUID, 'Invalid uuid.']},
   quantity: {type: Number, default: 1},
-  paymentMethod: String, // enum: ['Paypal', 'Stripe', 'Gift', 'Amazon Payments', 'Google', '']}
-  customerId: String, // Billing Agreement Id in case of Amazon Payments
+  paymentMethod: String, // enum: ['Gift', '']}
+  customerId: String,
   dateCreated: Date,
   dateTerminated: Date,
   dateUpdated: Date,
   extraMonths: {type: Number, default: 0},
   gemsBought: {type: Number, default: 0},
   mysteryItems: {type: Array, default: () => []},
-  lastBillingDate: Date, // Used only for Amazon Payments to keep track of billing date
-  additionalData: mongoose.Schema.Types.Mixed, // Example for Google: {'receipt': 'serialized receipt json', 'signature': 'signature string'}
+  lastBillingDate: Date,
+  additionalData: mongoose.Schema.Types.Mixed,
   nextPaymentProcessing: Date, // indicates when the queue server should process this subscription again.
-  nextBillingDate: Date, // Next time google will bill this user.
+  nextBillingDate: Date,
   consecutive: {
     count: {type: Number, default: 0},
     offset: {type: Number, default: 0}, // when gifted subs, offset++ for each month. offset-- each new-month (cron). count doesn't ++ until offset==0
diff --git a/website/server/models/user/hooks.js b/website/server/models/user/hooks.js
index d2ce661b0..78e346ffb 100644
--- a/website/server/models/user/hooks.js
+++ b/website/server/models/user/hooks.js
@@ -167,29 +167,11 @@ function _setUpNewUser (user) {
   return _populateDefaultTasks(user, taskTypes);
 }
 
-function _getFacebookName (fb) {
-  if (!fb) {
-    return;
-  }
-  let possibleName = fb.displayName || fb.name || fb.username;
-
-  if (possibleName) {
-    return possibleName;
-  }
-
-  if (fb.first_name && fb.last_name) {
-    return `${fb.first_name} ${fb.last_name}`;
-  }
-}
-
 function _setProfileName (user) {
-  let google = user.auth.google;
-
   let localUsername = user.auth.local && user.auth.local.username;
-  let googleUsername = google && google.displayName;
   let anonymous = 'profile name not found';
 
-  return localUsername || _getFacebookName(user.auth.facebook) || googleUsername || anonymous;
+  return localUsername || anonymous;
 }
 
 schema.pre('validate', function preValidateUser (next) {
diff --git a/website/server/models/user/methods.js b/website/server/models/user/methods.js
index c9e77427a..3556880fe 100644
--- a/website/server/models/user/methods.js
+++ b/website/server/models/user/methods.js
@@ -11,9 +11,6 @@ import { defaults, map, flatten, flow, compact, uniq, partialRight } from 'lodas
 import { model as UserNotification } from '../userNotification';
 import schema from './schema';
 import payments from '../../libs/payments/payments';
-import amazonPayments from '../../libs/payments/amazon';
-import stripePayments from '../../libs/payments/stripe';
-import paypalPayments from '../../libs/payments/paypal';
 
 const daysSince = common.daysSince;
 
@@ -190,7 +187,7 @@ schema.methods.addComputedStatsToJSONObj = function addComputedStatsToUserJSONOb
  * @param  options
  * @param  options.user  The user object who is purchasing
  * @param  options.groupId  The id of the group purchasing a subscription
- * @param  options.headers  The request headers (only for Amazon subscriptions)
+ * @param  options.headers  The request headers
  * @param  options.cancellationReason  A text string to control sending an email
  *
  * @return a Promise from api.cancelSubscription()
@@ -201,18 +198,7 @@ schema.methods.addComputedStatsToJSONObj = function addComputedStatsToUserJSONOb
 // In summary, currently is is best practice to use this method to cancel a user subscription, rather than calling the
 // payment helper.
 schema.methods.cancelSubscription = async function cancelSubscription (options = {}) {
-  let plan = this.purchased.plan;
-
   options.user = this;
-  if (plan.paymentMethod === amazonPayments.constants.PAYMENT_METHOD) {
-    return await amazonPayments.cancelSubscription(options);
-  } else if (plan.paymentMethod === stripePayments.constants.PAYMENT_METHOD) {
-    return await stripePayments.cancelSubscription(options);
-  } else if (plan.paymentMethod === paypalPayments.constants.PAYMENT_METHOD) {
-    return await paypalPayments.subscribeCancel(options);
-  }
-  // Android and iOS subscriptions cannot be cancelled by Habitica.
-
   return await payments.cancelSubscription(options);
 };
 
diff --git a/website/server/models/user/schema.js b/website/server/models/user/schema.js
index 98e4f7331..d54993dad 100644
--- a/website/server/models/user/schema.js
+++ b/website/server/models/user/schema.js
@@ -25,12 +25,6 @@ let schema = new Schema({
 
   auth: {
     blocked: Boolean,
-    facebook: {type: Schema.Types.Mixed, default: () => {
-      return {};
-    }},
-    google: {type: Schema.Types.Mixed, default: () => {
-      return {};
-    }},
     local: {
       email: {
         type: String,
