Author: aszlig <aszlig@nix.build>
Date:   Mon Apr 2 06:30:04 2018 +0200

    Make invite-only configurable
    
    This is mainly used for tests, but could be useful for some instances as
    well.
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: invite-only-config-option.patch

diff --git a/config.json.example b/config.json.example
index b3fb47d49..22d1d724d 100644
--- a/config.json.example
+++ b/config.json.example
@@ -12,5 +12,6 @@
     "CRON_SEMI_SAFE_MODE":"false",
     "MAINTENANCE_MODE": "false",
     "ADMIN_EMAIL": "you@example.com",
-    "MAILER_SOCKET": "/run/habitica/mailer.sock"
+    "MAILER_SOCKET": "/run/habitica/mailer.sock",
+    "INVITE_ONLY": "true"
 }
diff --git a/website/server/controllers/api-v3/auth.js b/website/server/controllers/api-v3/auth.js
index c11403c10..1020bf1fa 100644
--- a/website/server/controllers/api-v3/auth.js
+++ b/website/server/controllers/api-v3/auth.js
@@ -22,6 +22,7 @@ import { validatePasswordResetCodeAndFindUser, convertToBcrypt} from '../../libs
 const BASE_URL = nconf.get('BASE_URL');
 const TECH_ASSISTANCE_EMAIL = nconf.get('ADMIN_EMAIL');
 const COMMUNITY_MANAGER_EMAIL = nconf.get('ADMIN_EMAIL');
+const INVITE_ONLY = nconf.get('INVITE_ONLY') === 'true';
 const USERNAME_LENGTH_MIN = 1;
 const USERNAME_LENGTH_MAX = 20;
 
@@ -161,9 +162,9 @@ api.registerLocal = {
     // we check for partyInvite for backward compatibility
     if (req.query.groupInvite || req.query.partyInvite) {
       let success = await _handleGroupInvitation(newUser, req.query.groupInvite || req.query.partyInvite);
-      if (hasUsers && !success)
+      if (INVITE_ONLY && hasUsers && !success)
         throw new NotAuthorized(res.t('inviteOnly'));
-    } else if (hasUsers) {
+    } else if (INVITE_ONLY && hasUsers) {
       throw new NotAuthorized(res.t('inviteOnly'));
     }
 
