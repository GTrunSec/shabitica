Author: aszlig <aszlig@nix.build>
Date:   Mon Apr 2 06:30:04 2018 +0200

    Make invite-only configurable
    
    This is mainly used for tests, but could be useful for some instances as
    well.
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: invite-only-config-option.patch

diff --git a/config.json.example b/config.json.example
index 620ac3405..0ae909d5f 100644
--- a/config.json.example
+++ b/config.json.example
@@ -12,5 +12,6 @@
     "CRON_SEMI_SAFE_MODE":"false",
     "MAINTENANCE_MODE": "false",
     "ADMIN_EMAIL": "you@example.com",
-    "MAILER_SOCKET": "/run/habitica/mailer.sock"
+    "MAILER_SOCKET": "/run/habitica/mailer.sock",
+    "INVITE_ONLY": "true"
 }
diff --git a/website/server/libs/auth/index.js b/website/server/libs/auth/index.js
index 764bbebf5..5dc9fc83b 100644
--- a/website/server/libs/auth/index.js
+++ b/website/server/libs/auth/index.js
@@ -13,7 +13,9 @@ import { model as Group } from '../../models/group';
 import moment from 'moment';
 import { loginRes } from './utils';
 import { verifyUsername } from '../user/validation';
+import nconf from 'nconf';
 
+const INVITE_ONLY = nconf.get('INVITE_ONLY') === 'true';
 const USERNAME_LENGTH_MIN = 1;
 const USERNAME_LENGTH_MAX = 20;
 
@@ -146,9 +148,9 @@ async function registerLocal (req, res, { isV3 = false }) {
   // we check for partyInvite for backward compatibility
   if (req.query.groupInvite || req.query.partyInvite) {
     let success = await _handleGroupInvitation(newUser, req.query.groupInvite || req.query.partyInvite);
-    if (hasUsers && !success)
+    if (INVITE_ONLY && hasUsers && !success)
       throw new NotAuthorized(res.t('inviteOnly'));
-  } else if (hasUsers) {
+  } else if (INVITE_ONLY && hasUsers) {
     throw new NotAuthorized(res.t('inviteOnly'));
   }
 
