Author: aszlig <aszlig@nix.build>
Date:   Tue Mar 27 05:37:16 2018 +0200

    Support email notifications using a mailer daemon
    
    The official Habitica setup uses MailChimp to send out emails and it's
    doing so by talking to their API, giving only a few template variables.
    
    However, the real mail templates are hosted within their MailChimp
    account, so we don't have access to the templates.
    
    Instead of sending those mails via HTTPS to the MailChimp API, we now
    have a daemon, which more or less replicates the API. This daemon works
    using UNIX domain sockets, so all we need to do is to use the "unix" URL
    scheme for got.post().
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: mailer-daemon.patch

diff --git a/config.json.example b/config.json.example
index 3a31e9c951..cb82930b49 100644
--- a/config.json.example
+++ b/config.json.example
@@ -7,13 +7,11 @@
   "EMAILS_COMMUNITY_MANAGER_EMAIL": "admin@habitica.com",
   "EMAILS_PRESS_ENQUIRY_EMAIL": "admin@habitica.com",
   "EMAILS_TECH_ASSISTANCE_EMAIL": "admin@habitica.com",
-  "EMAIL_SERVER_AUTH_PASSWORD": "password",
-  "EMAIL_SERVER_AUTH_USER": "user",
-  "EMAIL_SERVER_URL": "http://example.com",
   "ENABLE_CONSOLE_LOGS_IN_PROD": "false",
   "ENABLE_CONSOLE_LOGS_IN_TEST": "false",
   "FLAG_REPORT_EMAIL": "email@example.com, email2@example.com",
   "IGNORE_REDIRECT": "true",
+  "MAILER_SOCKET": "/run/habitica/mailer.sock",
   "MAINTENANCE_MODE": "false",
   "NODE_DB_URI": "mongodb://localhost/habitrpg",
   "NODE_ENV": "development",
@@ -22,15 +20,6 @@
   "SESSION_SECRET": "YOUR SECRET HERE",
   "SESSION_SECRET_IV": "12345678912345678912345678912345",
   "SESSION_SECRET_KEY": "1234567891234567891234567891234567891234567891234567891234567891",
-  "SITE_HTTP_AUTH_ENABLED": "false",
-  "SITE_HTTP_AUTH_PASSWORD": "password",
-  "SITE_HTTP_AUTH_USERNAME": "admin",
-  "SMTP_HOST": "example.com",
-  "SMTP_PASS": "password",
-  "SMTP_PORT": 587,
-  "SMTP_SERVICE": "Gmail",
-  "SMTP_TLS": "true",
-  "SMTP_USER": "user@example.com",
   "TEST_DB_URI": "mongodb://localhost/habitrpg_test",
   "WEB_CONCURRENCY": 1,
   "SKIP_SSL_CHECK_KEY": "key",
diff --git a/package.json b/package.json
index 01ccba8f34..63a0688a8e 100644
--- a/package.json
+++ b/package.json
@@ -59,7 +59,6 @@
     "morgan": "^1.7.0",
     "nconf": "^0.10.0",
     "node-sass": "^4.9.0",
-    "nodemailer": "^6.0.0",
     "ora": "^3.2.0",
     "pageres": "^4.1.1",
     "passport": "^0.4.0",
diff --git a/test/api/unit/libs/email.test.js b/test/api/unit/libs/email.test.js
index 23989fbf31..b043db942f 100644
--- a/test/api/unit/libs/email.test.js
+++ b/test/api/unit/libs/email.test.js
@@ -1,7 +1,6 @@
 /* eslint-disable global-require */
 import got from 'got';
 import nconf from 'nconf';
-import nodemailer from 'nodemailer';
 import requireAgain from 'require-again';
 import logger from '../../../../website/server/libs/logger';
 import { TAVERN_ID } from '../../../../website/server/models/group';
@@ -36,13 +35,8 @@ describe('emails', () => {
   let pathToEmailLib = '../../../../website/server/libs/email';
 
   describe('sendEmail', () => {
-    let sendMailSpy;
-
     beforeEach(() => {
-      sendMailSpy = sandbox.stub().returns(defer().promise);
-      sandbox.stub(nodemailer, 'createTransport').returns({
-        sendMail: sendMailSpy,
-      });
+      sandbox.stub(got, 'post').returns(defer().promise);
     });
 
     afterEach(() => {
@@ -52,7 +46,7 @@ describe('emails', () => {
     it('can send an email using the default transport', () => {
       let attachEmail = requireAgain(pathToEmailLib);
       attachEmail.send();
-      expect(sendMailSpy).to.be.calledOnce;
+      expect(got.post).to.be.calledOnce;
     });
 
     it('logs errors', (done) => {
@@ -60,7 +54,7 @@ describe('emails', () => {
 
       let attachEmail = requireAgain(pathToEmailLib);
       attachEmail.send();
-      expect(sendMailSpy).to.be.calledOnce;
+      expect(got.post).to.be.calledOnce;
       defer().reject();
 
       // wait for unhandledRejection event to fire
@@ -143,7 +137,7 @@ describe('emails', () => {
       };
 
       sendTxnEmail(mailingInfo, emailType);
-      expect(got.post).to.be.calledWith('undefined/job', sinon.match({
+      expect(got.post).to.be.calledWith('unix:undefined:/job', sinon.match({
         json: true,
         body: {
           data: {
@@ -178,7 +172,7 @@ describe('emails', () => {
       let mailingInfo = getUser();
 
       sendTxnEmail(mailingInfo, emailType);
-      expect(got.post).to.be.calledWith('undefined/job', sinon.match({
+      expect(got.post).to.be.calledWith('unix:undefined:/job', sinon.match({
         json: true,
         body: {
           data: {
@@ -201,7 +195,7 @@ describe('emails', () => {
       let variables = [1, 2, 3];
 
       sendTxnEmail(mailingInfo, emailType, variables);
-      expect(got.post).to.be.calledWith('undefined/job', sinon.match({
+      expect(got.post).to.be.calledWith('unix:undefined:/job', sinon.match({
         json: true,
         body: {
           data: {
diff --git a/website/server/libs/email.js b/website/server/libs/email.js
index 9d3d029cf7..a6d71bc7f5 100644
--- a/website/server/libs/email.js
+++ b/website/server/libs/email.js
@@ -1,4 +1,3 @@
-import nodemailer from 'nodemailer';
 import nconf from 'nconf';
 import { TAVERN_ID } from '../models/group';
 import { encrypt } from './encryption';
@@ -6,27 +5,16 @@ import got from 'got';
 import logger from './logger';
 
 const IS_PROD = nconf.get('IS_PROD');
-const EMAIL_SERVER = {
-  url: nconf.get('EMAIL_SERVER_URL'),
-  auth: {
-    user: nconf.get('EMAIL_SERVER_AUTH_USER'),
-    password: nconf.get('EMAIL_SERVER_AUTH_PASSWORD'),
-  },
-};
+const MAILER_SOCKET = nconf.get('MAILER_SOCKET');
 const BASE_URL = nconf.get('BASE_URL');
 
-let smtpTransporter = nodemailer.createTransport({
-  service: nconf.get('SMTP_SERVICE'),
-  auth: {
-    user: nconf.get('SMTP_USER'),
-    pass: nconf.get('SMTP_PASS'),
-  },
-});
-
 // Send email directly from the server using the smtpTransporter,
 // used only to send password reset emails because users unsubscribed on Mandrill wouldn't get them
 export function send (mailData) {
-  return smtpTransporter.sendMail(mailData); // promise
+  return got.post(`unix:${MAILER_SOCKET}:/simple-mail`, {
+    json: true,
+    body: mailData,
+  });
 }
 
 export function getUserInfo (user, fields = []) {
@@ -135,8 +123,7 @@ export function sendTxn (mailingInfoArray, emailType, variables, personalVariabl
   }
 
   if (IS_PROD && mailingInfoArray.length > 0) {
-    got.post(`${EMAIL_SERVER.url}/job`, {
-      auth: `${EMAIL_SERVER.auth.user}:${EMAIL_SERVER.auth.password}`,
+    got.post(`unix:${MAILER_SOCKET}:/job`, {
       json: true,
       body: {
         type: 'email',
