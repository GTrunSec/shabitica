Author: aszlig <aszlig@nix.build>
Date:   Sat Apr 7 03:03:48 2018 +0200

    Don't censor chat messages
    
    There are banned words and slurs that aren't allowed in public chats,
    but our version isn't public, so no need to censor anything.
    
    This also removes the banned user modal.
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: no-censorship.patch

diff --git a/test/api/v3/integration/chat/POST-chat.test.js b/test/api/v3/integration/chat/POST-chat.test.js
index 278388365..e62cf0d09 100644
--- a/test/api/v3/integration/chat/POST-chat.test.js
+++ b/test/api/v3/integration/chat/POST-chat.test.js
@@ -11,19 +11,10 @@ import {
   TAVERN_ID,
 } from '../../../../../website/server/models/group';
 import { v4 as generateUUID } from 'uuid';
-import { getMatchesByWordArray } from '../../../../../website/server/libs/stringUtils';
-import bannedWords from '../../../../../website/server/libs/bannedWords';
-import guildsAllowingBannedWords from '../../../../../website/server/libs/guildsAllowingBannedWords';
-import * as email from '../../../../../website/server/libs/email';
 
 describe('POST /chat', () => {
   let user, groupWithChat, member, additionalMember;
   let testMessage = 'Test Message';
-  let testBannedWordMessage = 'TESTPLACEHOLDERSWEARWORDHERE';
-  let testBannedWordMessage1 = 'TESTPLACEHOLDERSWEARWORDHERE1';
-  let testSlurMessage = 'message with TESTPLACEHOLDERSLURWORDHERE';
-  let testSlurMessage1 = 'TESTPLACEHOLDERSLURWORDHERE1';
-  let bannedWordErrorMessage = t('bannedWordUsed', {swearWordsUsed: testBannedWordMessage});
 
   before(async () => {
     let { group, groupLeader, members } = await createAndPopulateGroup({
@@ -85,220 +76,6 @@ describe('POST /chat', () => {
     });
   });
 
-  context('banned word', () => {
-    it('returns an error when chat message contains a banned word in tavern', async () => {
-      await expect(user.post('/groups/habitrpg/chat', { message: testBannedWordMessage}))
-        .to.eventually.be.rejected.and.eql({
-          code: 400,
-          error: 'BadRequest',
-          message: bannedWordErrorMessage,
-        });
-    });
-
-    it('returns an error when chat message contains a banned word in a public guild', async () => {
-      let { group, members } = await createAndPopulateGroup({
-        groupDetails: {
-          name: 'public guild',
-          type: 'guild',
-          privacy: 'public',
-        },
-        members: 1,
-      });
-
-      await expect(members[0].post(`/groups/${group._id}/chat`, { message: testBannedWordMessage}))
-        .to.eventually.be.rejected.and.eql({
-          code: 400,
-          error: 'BadRequest',
-          message: bannedWordErrorMessage,
-        });
-    });
-
-    it('errors when word is part of a phrase', async () => {
-      let wordInPhrase = `phrase ${testBannedWordMessage} end`;
-      await expect(user.post('/groups/habitrpg/chat', { message: wordInPhrase}))
-        .to.eventually.be.rejected.and.eql({
-          code: 400,
-          error: 'BadRequest',
-          message: bannedWordErrorMessage,
-        });
-    });
-
-    it('errors when word is surrounded by non alphabet characters', async () => {
-      let wordInPhrase = `_!${testBannedWordMessage}@_`;
-      await expect(user.post('/groups/habitrpg/chat', { message: wordInPhrase}))
-        .to.eventually.be.rejected.and.eql({
-          code: 400,
-          error: 'BadRequest',
-          message: bannedWordErrorMessage,
-        });
-    });
-
-    it('errors when word is typed in mixed case', async () => {
-      let substrLength = Math.floor(testBannedWordMessage.length / 2);
-      let chatMessage = testBannedWordMessage.substring(0, substrLength).toLowerCase() + testBannedWordMessage.substring(substrLength).toUpperCase();
-      await expect(user.post('/groups/habitrpg/chat', { message: chatMessage }))
-        .to.eventually.be.rejected.and.eql({
-          code: 400,
-          error: 'BadRequest',
-          message: t('bannedWordUsed', {swearWordsUsed: chatMessage}),
-        });
-    });
-
-    it('checks error message has all the banned words used, regardless of case', async () => {
-      let testBannedWords = [testBannedWordMessage.toUpperCase(), testBannedWordMessage1.toLowerCase()];
-      let chatMessage = `Mixing ${testBannedWords[0]} and ${testBannedWords[1]} is bad for you.`;
-      await expect(user.post('/groups/habitrpg/chat', { message: chatMessage}))
-        .to.eventually.be.rejected
-        .and.have.property('message')
-        .that.includes(testBannedWords.join(', '));
-    });
-
-    it('check all banned words are matched', async () => {
-      let message = bannedWords.join(',').replace(/\\/g, '');
-      let matches = getMatchesByWordArray(message, bannedWords);
-      expect(matches.length).to.equal(bannedWords.length);
-    });
-
-    it('does not error when bad word is suffix of a word', async () => {
-      let wordAsSuffix = `prefix${testBannedWordMessage}`;
-      let message = await user.post('/groups/habitrpg/chat', { message: wordAsSuffix});
-
-      expect(message.message.id).to.exist;
-    });
-
-    it('does not error when bad word is prefix of a word', async () => {
-      let wordAsPrefix = `${testBannedWordMessage}suffix`;
-      let message = await user.post('/groups/habitrpg/chat', { message: wordAsPrefix});
-
-      expect(message.message.id).to.exist;
-    });
-
-    it('does not error when sending a chat message containing a banned word to a party', async () => {
-      let { group, members } = await createAndPopulateGroup({
-        groupDetails: {
-          name: 'Party',
-          type: 'party',
-          privacy: 'private',
-        },
-        members: 1,
-      });
-
-      let message = await members[0].post(`/groups/${group._id}/chat`, { message: testBannedWordMessage});
-
-      expect(message.message.id).to.exist;
-    });
-
-    it('does not error when sending a chat message containing a banned word to a public guild in which banned words are allowed', async () => {
-      let { group, members } = await createAndPopulateGroup({
-        groupDetails: {
-          name: 'public guild',
-          type: 'guild',
-          privacy: 'public',
-        },
-        members: 1,
-      });
-
-      guildsAllowingBannedWords[group._id] = true;
-
-      let message = await members[0].post(`/groups/${group._id}/chat`, { message: testBannedWordMessage});
-
-      expect(message.message.id).to.exist;
-    });
-
-    it('does not error when sending a chat message containing a banned word to a private guild', async () => {
-      let { group, members } = await createAndPopulateGroup({
-        groupDetails: {
-          name: 'private guild',
-          type: 'guild',
-          privacy: 'private',
-        },
-        members: 1,
-      });
-
-      let message = await members[0].post(`/groups/${group._id}/chat`, { message: testBannedWordMessage});
-
-      expect(message.message.id).to.exist;
-    });
-  });
-
-  context('banned slur', () => {
-    beforeEach(() => {
-      sandbox.spy(email, 'sendTxn');
-    });
-
-    afterEach(() => {
-      sandbox.restore();
-    });
-
-    it('errors and revokes privileges when chat message contains a banned slur', async () => {
-      await expect(user.post(`/groups/${groupWithChat._id}/chat`, { message: testSlurMessage})).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: t('bannedSlurUsed'),
-      });
-
-      // Email sent to mods
-      await sleep(0.5);
-      expect(email.sendTxn).to.be.calledOnce;
-      expect(email.sendTxn.args[0][1]).to.eql('slur-report-to-mods');
-
-      // Chat privileges are revoked
-      await expect(user.post(`/groups/${groupWithChat._id}/chat`, { message: testMessage})).to.eventually.be.rejected.and.eql({
-        code: 401,
-        error: 'NotAuthorized',
-        message: t('chatPrivilegesRevoked'),
-      });
-
-      // Restore chat privileges to continue testing
-      user.flags.chatRevoked = false;
-      await user.update({'flags.chatRevoked': false});
-    });
-
-    it('does not allow slurs in private groups', async () => {
-      let { group, members } = await createAndPopulateGroup({
-        groupDetails: {
-          name: 'Party',
-          type: 'party',
-          privacy: 'private',
-        },
-        members: 1,
-      });
-
-      await expect(members[0].post(`/groups/${group._id}/chat`, { message: testSlurMessage})).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: t('bannedSlurUsed'),
-      });
-
-      // Email sent to mods
-      await sleep(0.5);
-      expect(email.sendTxn).to.be.calledThrice;
-      expect(email.sendTxn.args[2][1]).to.eql('slur-report-to-mods');
-
-      // Chat privileges are revoked
-      await expect(members[0].post(`/groups/${groupWithChat._id}/chat`, { message: testMessage})).to.eventually.be.rejected.and.eql({
-        code: 401,
-        error: 'NotAuthorized',
-        message: t('chatPrivilegesRevoked'),
-      });
-
-      // Restore chat privileges to continue testing
-      members[0].flags.chatRevoked = false;
-      await members[0].update({'flags.chatRevoked': false});
-    });
-
-    it('errors when slur is typed in mixed case', async () => {
-      let substrLength = Math.floor(testSlurMessage1.length / 2);
-      let chatMessage = testSlurMessage1.substring(0, substrLength).toLowerCase() + testSlurMessage1.substring(substrLength).toUpperCase();
-      await expect(user.post('/groups/habitrpg/chat', { message: chatMessage }))
-        .to.eventually.be.rejected.and.eql({
-          code: 400,
-          error: 'BadRequest',
-          message: t('bannedSlurUsed'),
-        });
-    });
-  });
-
   it('does not error when sending a message to a private guild with a user with revoked chat', async () => {
     let { group, members } = await createAndPopulateGroup({
       groupDetails: {
diff --git a/website/client/app.vue b/website/client/app.vue
index e1dc614e3..7b6d90a7d 100644
--- a/website/client/app.vue
+++ b/website/client/app.vue
@@ -9,7 +9,6 @@ div
         h2 {{$t('tipTitle', {tipNumber: currentTipNumber})}}
         p {{currentTip}}
   #app(:class='{"casting-spell": castingSpell}')
-    banned-account-modal
     snackbars
     router-view(v-if="!isUserLoggedIn || isStaticPage")
     template(v-else)
@@ -188,7 +187,6 @@ import notifications from 'client/mixins/notifications';
 import spellsMixin from 'client/mixins/spells';
 
 import svgClose from 'assets/svg/close.svg';
-import bannedAccountModal from 'client/components/bannedAccountModal';
 
 const COMMUNITY_MANAGER_EMAIL = process.env.EMAILS.COMMUNITY_MANAGER_EMAIL; // eslint-disable-line
 
@@ -203,7 +201,6 @@ export default {
     snackbars,
     BuyModal,
     SelectMembersModal,
-    bannedAccountModal,
   },
   data () {
     return {
@@ -296,8 +293,6 @@ export default {
       return response;
     }, (error) => {
       if (error.response.status >= 400) {
-        this.checkForBannedUser(error);
-
         // Don't show errors from getting user details. These users have delete their account,
         // but their chat message still exists.
         let configExists = Boolean(error.response) && Boolean(error.response.config);
@@ -427,25 +422,6 @@ export default {
     if (loadingScreen) document.body.removeChild(loadingScreen);
   },
   methods: {
-    checkForBannedUser (error) {
-      const AUTH_SETTINGS = localStorage.getItem('habit-mobile-settings');
-      const parseSettings = JSON.parse(AUTH_SETTINGS);
-      const errorMessage = error.response.data.message;
-
-      // Case where user is not logged in
-      if (!parseSettings) {
-        return;
-      }
-
-      const bannedMessage = this.$t('accountSuspended', {
-        communityManagerEmail: COMMUNITY_MANAGER_EMAIL,
-        userId: parseSettings.auth.apiId,
-      });
-
-      if (errorMessage !== bannedMessage) return;
-
-      this.$root.$emit('bv::show::modal', 'banned-account');
-    },
     initializeModalStack () {
       // Manage modals
       this.$root.$on('bv::show::modal', (modalId, data = {}) => {
diff --git a/website/server/controllers/api-v3/chat.js b/website/server/controllers/api-v3/chat.js
index e4d6e7ef5..d3885bb7b 100644
--- a/website/server/controllers/api-v3/chat.js
+++ b/website/server/controllers/api-v3/chat.js
@@ -3,7 +3,6 @@ import { model as Group } from '../../models/group';
 import { model as User } from '../../models/user';
 import { model as Chat } from '../../models/chat';
 import {
-  BadRequest,
   NotFound,
   NotAuthorized,
 } from '../../libs/errors';
@@ -12,10 +11,6 @@ import { getUserInfo, getGroupUrl, sendTxn } from '../../libs/email';
 import { getAuthorEmailFromMessage } from '../../libs/chat';
 import { chatReporterFactory } from '../../libs/chatReporting/chatReporterFactory';
 import nconf from 'nconf';
-import bannedWords from '../../libs/bannedWords';
-import guildsAllowingBannedWords from '../../libs/guildsAllowingBannedWords';
-import { getMatchesByWordArray } from '../../libs/stringUtils';
-import bannedSlurs from '../../libs/bannedSlurs';
 import apiError from '../../libs/apiError';
 
 const FLAG_REPORT_EMAILS = nconf.get('ADMIN_EMAIL').split(',').map((email) => {
@@ -39,11 +34,6 @@ const FLAG_REPORT_EMAILS = nconf.get('ADMIN_EMAIL').split(',').map((email) => {
 
 let api = {};
 
-function textContainsBannedSlur (message) {
-  let bannedSlursMatched = getMatchesByWordArray(message, bannedSlurs);
-  return bannedSlursMatched.length > 0;
-}
-
 /**
  * @api {get} /api/v3/groups/:groupId/chat Get chat messages from a group
  * @apiName GetChat
@@ -80,10 +70,6 @@ api.getChat = {
   },
 };
 
-function getBannedWordsFromText (message) {
-  return getMatchesByWordArray(message, bannedWords);
-}
-
 /**
  * @api {post} /api/v3/groups/:groupId/chat Post chat message to a group
  * @apiName PostChat
@@ -118,49 +104,11 @@ api.postChat = {
 
     let group = await Group.getGroup({user, groupId});
 
-    // Check message for banned slurs
-    if (textContainsBannedSlur(req.body.message)) {
-      let message = req.body.message;
-      user.flags.chatRevoked = true;
-      await user.save();
-
-      // Email the mods
-      let authorEmail = getUserInfo(user, ['email']).email;
-      let groupUrl = getGroupUrl(group);
-
-      let report =  [
-        {name: 'MESSAGE_TIME', content: (new Date()).toString()},
-        {name: 'MESSAGE_TEXT', content: message},
-
-        {name: 'AUTHOR_USERNAME', content: user.profile.name},
-        {name: 'AUTHOR_UUID', content: user._id},
-        {name: 'AUTHOR_EMAIL', content: authorEmail},
-        {name: 'AUTHOR_MODAL_URL', content: `/static/front/#?memberId=${user._id}`},
-
-        {name: 'GROUP_NAME', content: group.name},
-        {name: 'GROUP_TYPE', content: group.type},
-        {name: 'GROUP_ID', content: group._id},
-        {name: 'GROUP_URL', content: groupUrl},
-      ];
-
-      sendTxn(FLAG_REPORT_EMAILS, 'slur-report-to-mods', report);
-
-      throw new BadRequest(res.t('bannedSlurUsed'));
-    }
-
     if (!group) throw new NotFound(res.t('groupNotFound'));
     if (group.privacy !== 'private' && user.flags.chatRevoked) {
       throw new NotAuthorized(res.t('chatPrivilegesRevoked'));
     }
 
-    // prevent banned words being posted, except in private guilds/parties and in certain public guilds with specific topics
-    if (group.privacy !== 'private' && !guildsAllowingBannedWords[group._id]) {
-      let matchedBadWords = getBannedWordsFromText(req.body.message);
-      if (matchedBadWords.length > 0) {
-        throw new BadRequest(res.t('bannedWordUsed', {swearWordsUsed: matchedBadWords.join(', ')}));
-      }
-    }
-
     const chatRes = await Group.toJSONCleanChat(group, user);
     const lastClientMsg = req.query.previousMsg;
     chatUpdated = lastClientMsg && group.chat && group.chat[0] && group.chat[0].id !== lastClientMsg ? true : false;
